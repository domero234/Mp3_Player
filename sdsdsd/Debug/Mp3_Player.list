
Mp3_Player.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001157c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  0801170c  0801170c  0001270c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080119d0  080119d0  00013080  2**0
                  CONTENTS
  4 .ARM          00000008  080119d0  080119d0  000129d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080119d8  080119d8  00013080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080119d8  080119d8  000129d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080119dc  080119dc  000129dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  080119e0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00013080  2**0
                  CONTENTS
 10 .bss          000021e4  20000080  20000080  00013080  2**2
                  ALLOC
 11 ._user_heap_stack 00004004  20002264  20002264  00013080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00013080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024f41  00000000  00000000  000130b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000586e  00000000  00000000  00037ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c68  00000000  00000000  0003d860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015ff  00000000  00000000  0003f4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027c3d  00000000  00000000  00040ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a55e  00000000  00000000  00068704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7046  00000000  00000000  00092c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00169ca8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007c28  00000000  00000000  00169cec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  00171914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080116f4 	.word	0x080116f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080116f4 	.word	0x080116f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <write_register>:
static void write_register(uint8_t reg, uint8_t *data);
static void read_register(uint8_t reg, uint8_t *data);

// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af02      	add	r7, sp, #8
 8000576:	4603      	mov	r3, r0
 8000578:	6039      	str	r1, [r7, #0]
 800057a:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	733b      	strb	r3, [r7, #12]
	iData[1] = data[0];
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 8000586:	f107 020c 	add.w	r2, r7, #12
 800058a:	2364      	movs	r3, #100	@ 0x64
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2302      	movs	r3, #2
 8000590:	2194      	movs	r1, #148	@ 0x94
 8000592:	4803      	ldr	r0, [pc, #12]	@ (80005a0 <write_register+0x30>)
 8000594:	f005 f816 	bl	80055c4 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 8000598:	bf00      	nop
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	2000009c 	.word	0x2000009c

080005a4 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af02      	add	r7, sp, #8
 80005aa:	4603      	mov	r3, r0
 80005ac:	6039      	str	r1, [r7, #0]
 80005ae:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 80005b4:	f107 020c 	add.w	r2, r7, #12
 80005b8:	2364      	movs	r3, #100	@ 0x64
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	2301      	movs	r3, #1
 80005be:	2194      	movs	r1, #148	@ 0x94
 80005c0:	4807      	ldr	r0, [pc, #28]	@ (80005e0 <read_register+0x3c>)
 80005c2:	f004 ffff 	bl	80055c4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 80005c6:	2364      	movs	r3, #100	@ 0x64
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2301      	movs	r3, #1
 80005cc:	683a      	ldr	r2, [r7, #0]
 80005ce:	2194      	movs	r1, #148	@ 0x94
 80005d0:	4803      	ldr	r0, [pc, #12]	@ (80005e0 <read_register+0x3c>)
 80005d2:	f005 f8f5 	bl	80057c0 <HAL_I2C_Master_Receive>
}
 80005d6:	bf00      	nop
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	2000009c 	.word	0x2000009c

080005e4 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 80005e4:	b084      	sub	sp, #16
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b082      	sub	sp, #8
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	f107 0c10 	add.w	ip, r7, #16
 80005f0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t iData[2];
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 80005f4:	4b7b      	ldr	r3, [pc, #492]	@ (80007e4 <CS43_Init+0x200>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 80005fc:	4b79      	ldr	r3, [pc, #484]	@ (80007e4 <CS43_Init+0x200>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	69da      	ldr	r2, [r3, #28]
 8000602:	4b78      	ldr	r3, [pc, #480]	@ (80007e4 <CS43_Init+0x200>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800060a:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2110      	movs	r1, #16
 8000610:	4875      	ldr	r0, [pc, #468]	@ (80007e8 <CS43_Init+0x204>)
 8000612:	f002 fd5f 	bl	80030d4 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000616:	4b75      	ldr	r3, [pc, #468]	@ (80007ec <CS43_Init+0x208>)
 8000618:	4618      	mov	r0, r3
 800061a:	f107 0310 	add.w	r3, r7, #16
 800061e:	2254      	movs	r2, #84	@ 0x54
 8000620:	4619      	mov	r1, r3
 8000622:	f010 fcd9 	bl	8010fd8 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000626:	2301      	movs	r3, #1
 8000628:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,iData);
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	4619      	mov	r1, r3
 800062e:	2002      	movs	r0, #2
 8000630:	f7ff ff9e 	bl	8000570 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000634:	2380      	movs	r3, #128	@ 0x80
 8000636:	717b      	strb	r3, [r7, #5]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000638:	797b      	ldrb	r3, [r7, #5]
 800063a:	f043 0320 	orr.w	r3, r3, #32
 800063e:	b2db      	uxtb	r3, r3
 8000640:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000642:	797b      	ldrb	r3, [r7, #5]
 8000644:	f043 030c 	orr.w	r3, r3, #12
 8000648:	b2db      	uxtb	r3, r3
 800064a:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 800064c:	797b      	ldrb	r3, [r7, #5]
 800064e:	f043 0303 	orr.w	r3, r3, #3
 8000652:	b2db      	uxtb	r3, r3
 8000654:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL2,&iData[1]);
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	3301      	adds	r3, #1
 800065a:	4619      	mov	r1, r3
 800065c:	2004      	movs	r0, #4
 800065e:	f7ff ff87 	bl	8000570 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 8000662:	2380      	movs	r3, #128	@ 0x80
 8000664:	717b      	strb	r3, [r7, #5]
	write_register(CLOCKING_CONTROL,&iData[1]);
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	3301      	adds	r3, #1
 800066a:	4619      	mov	r1, r3
 800066c:	2005      	movs	r0, #5
 800066e:	f7ff ff7f 	bl	8000570 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	4619      	mov	r1, r3
 8000676:	2006      	movs	r0, #6
 8000678:	f7ff ff94 	bl	80005a4 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 800067c:	797b      	ldrb	r3, [r7, #5]
 800067e:	f003 0320 	and.w	r3, r3, #32
 8000682:	b2db      	uxtb	r3, r3
 8000684:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 7);  // Slave
 8000686:	797b      	ldrb	r3, [r7, #5]
 8000688:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800068c:	b2db      	uxtb	r3, r3
 800068e:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 8000690:	797b      	ldrb	r3, [r7, #5]
 8000692:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000696:	b2db      	uxtb	r3, r3
 8000698:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 4);  // No DSP mode
 800069a:	797b      	ldrb	r3, [r7, #5]
 800069c:	f023 0310 	bic.w	r3, r3, #16
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 80006a4:	797b      	ldrb	r3, [r7, #5]
 80006a6:	f023 0304 	bic.w	r3, r3, #4
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	717b      	strb	r3, [r7, #5]
	iData[1] |= (1 << 2);
 80006ae:	797b      	ldrb	r3, [r7, #5]
 80006b0:	f043 0304 	orr.w	r3, r3, #4
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	717b      	strb	r3, [r7, #5]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 80006b8:	797b      	ldrb	r3, [r7, #5]
 80006ba:	f043 0303 	orr.w	r3, r3, #3
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	717b      	strb	r3, [r7, #5]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	3301      	adds	r3, #1
 80006c6:	4619      	mov	r1, r3
 80006c8:	2006      	movs	r0, #6
 80006ca:	f7ff ff51 	bl	8000570 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	3301      	adds	r3, #1
 80006d2:	4619      	mov	r1, r3
 80006d4:	2008      	movs	r0, #8
 80006d6:	f7ff ff65 	bl	80005a4 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 80006da:	797b      	ldrb	r3, [r7, #5]
 80006dc:	f023 030f 	bic.w	r3, r3, #15
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 80006e4:	797b      	ldrb	r3, [r7, #5]
 80006e6:	f043 0301 	orr.w	r3, r3, #1
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_A,&iData[1]);
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	3301      	adds	r3, #1
 80006f2:	4619      	mov	r1, r3
 80006f4:	2008      	movs	r0, #8
 80006f6:	f7ff ff3b 	bl	8000570 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	3301      	adds	r3, #1
 80006fe:	4619      	mov	r1, r3
 8000700:	2009      	movs	r0, #9
 8000702:	f7ff ff4f 	bl	80005a4 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000706:	797b      	ldrb	r3, [r7, #5]
 8000708:	f023 030f 	bic.w	r3, r3, #15
 800070c:	b2db      	uxtb	r3, r3
 800070e:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000710:	797b      	ldrb	r3, [r7, #5]
 8000712:	f043 0301 	orr.w	r3, r3, #1
 8000716:	b2db      	uxtb	r3, r3
 8000718:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_B,&iData[1]);
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	3301      	adds	r3, #1
 800071e:	4619      	mov	r1, r3
 8000720:	2009      	movs	r0, #9
 8000722:	f7ff ff25 	bl	8000570 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	3301      	adds	r3, #1
 800072a:	4619      	mov	r1, r3
 800072c:	200e      	movs	r0, #14
 800072e:	f7ff ff39 	bl	80005a4 <read_register>
	if(outputMode == MODE_ANALOG)
 8000732:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8000736:	2b03      	cmp	r3, #3
 8000738:	d119      	bne.n	800076e <CS43_Init+0x18a>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 800073a:	797b      	ldrb	r3, [r7, #5]
 800073c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000740:	b2db      	uxtb	r3, r3
 8000742:	717b      	strb	r3, [r7, #5]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 8000744:	797b      	ldrb	r3, [r7, #5]
 8000746:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800074a:	b2db      	uxtb	r3, r3
 800074c:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 800074e:	797b      	ldrb	r3, [r7, #5]
 8000750:	f023 0320 	bic.w	r3, r3, #32
 8000754:	b2db      	uxtb	r3, r3
 8000756:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 8000758:	797b      	ldrb	r3, [r7, #5]
 800075a:	f023 0310 	bic.w	r3, r3, #16
 800075e:	b2db      	uxtb	r3, r3
 8000760:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 8000762:	797b      	ldrb	r3, [r7, #5]
 8000764:	f023 0308 	bic.w	r3, r3, #8
 8000768:	b2db      	uxtb	r3, r3
 800076a:	717b      	strb	r3, [r7, #5]
 800076c:	e005      	b.n	800077a <CS43_Init+0x196>
	}
	else if(outputMode == MODE_I2S)
 800076e:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8000772:	2b00      	cmp	r3, #0
 8000774:	d101      	bne.n	800077a <CS43_Init+0x196>
	{
		iData[1] = 0x02;
 8000776:	2302      	movs	r3, #2
 8000778:	717b      	strb	r3, [r7, #5]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	3301      	adds	r3, #1
 800077e:	4619      	mov	r1, r3
 8000780:	200e      	movs	r0, #14
 8000782:	f7ff fef5 	bl	8000570 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	3301      	adds	r3, #1
 800078a:	4619      	mov	r1, r3
 800078c:	200f      	movs	r0, #15
 800078e:	f7ff ff09 	bl	80005a4 <read_register>
	iData[1] = 0x00;
 8000792:	2300      	movs	r3, #0
 8000794:	717b      	strb	r3, [r7, #5]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	3301      	adds	r3, #1
 800079a:	4619      	mov	r1, r3
 800079c:	200f      	movs	r0, #15
 800079e:	f7ff fee7 	bl	8000570 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	3301      	adds	r3, #1
 80007aa:	4619      	mov	r1, r3
 80007ac:	2014      	movs	r0, #20
 80007ae:	f7ff fedf 	bl	8000570 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	3301      	adds	r3, #1
 80007b6:	4619      	mov	r1, r3
 80007b8:	2015      	movs	r0, #21
 80007ba:	f7ff fed9 	bl	8000570 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	3301      	adds	r3, #1
 80007c2:	4619      	mov	r1, r3
 80007c4:	201a      	movs	r0, #26
 80007c6:	f7ff fed3 	bl	8000570 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	3301      	adds	r3, #1
 80007ce:	4619      	mov	r1, r3
 80007d0:	201b      	movs	r0, #27
 80007d2:	f7ff fecd 	bl	8000570 <write_register>
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007e0:	b004      	add	sp, #16
 80007e2:	4770      	bx	lr
 80007e4:	20000148 	.word	0x20000148
 80007e8:	40020c00 	.word	0x40020c00
 80007ec:	2000009c 	.word	0x2000009c

080007f0 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	switch (side)
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b03      	cmp	r3, #3
 80007fe:	d82b      	bhi.n	8000858 <CS43_Enable_RightLeft+0x68>
 8000800:	a201      	add	r2, pc, #4	@ (adr r2, 8000808 <CS43_Enable_RightLeft+0x18>)
 8000802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000806:	bf00      	nop
 8000808:	08000819 	.word	0x08000819
 800080c:	08000829 	.word	0x08000829
 8000810:	08000839 	.word	0x08000839
 8000814:	08000849 	.word	0x08000849
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000818:	23c0      	movs	r3, #192	@ 0xc0
 800081a:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800081c:	7b7b      	ldrb	r3, [r7, #13]
 800081e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000822:	b2db      	uxtb	r3, r3
 8000824:	737b      	strb	r3, [r7, #13]
			break;
 8000826:	e018      	b.n	800085a <CS43_Enable_RightLeft+0x6a>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000828:	2380      	movs	r3, #128	@ 0x80
 800082a:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800082c:	7b7b      	ldrb	r3, [r7, #13]
 800082e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000832:	b2db      	uxtb	r3, r3
 8000834:	737b      	strb	r3, [r7, #13]
			break;
 8000836:	e010      	b.n	800085a <CS43_Enable_RightLeft+0x6a>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000838:	23c0      	movs	r3, #192	@ 0xc0
 800083a:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800083c:	7b7b      	ldrb	r3, [r7, #13]
 800083e:	f043 0320 	orr.w	r3, r3, #32
 8000842:	b2db      	uxtb	r3, r3
 8000844:	737b      	strb	r3, [r7, #13]
			break;
 8000846:	e008      	b.n	800085a <CS43_Enable_RightLeft+0x6a>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000848:	2380      	movs	r3, #128	@ 0x80
 800084a:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800084c:	7b7b      	ldrb	r3, [r7, #13]
 800084e:	f043 0320 	orr.w	r3, r3, #32
 8000852:	b2db      	uxtb	r3, r3
 8000854:	737b      	strb	r3, [r7, #13]
			break;
 8000856:	e000      	b.n	800085a <CS43_Enable_RightLeft+0x6a>
		default:
			break;
 8000858:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 800085a:	7b7b      	ldrb	r3, [r7, #13]
 800085c:	f043 030c 	orr.w	r3, r3, #12
 8000860:	b2db      	uxtb	r3, r3
 8000862:	737b      	strb	r3, [r7, #13]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000864:	7b7b      	ldrb	r3, [r7, #13]
 8000866:	f043 0303 	orr.w	r3, r3, #3
 800086a:	b2db      	uxtb	r3, r3
 800086c:	737b      	strb	r3, [r7, #13]
	write_register(POWER_CONTROL2,&iData[1]);
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	3301      	adds	r3, #1
 8000874:	4619      	mov	r1, r3
 8000876:	2004      	movs	r0, #4
 8000878:	f7ff fe7a 	bl	8000570 <write_register>
}
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  /* Set the Master volume */
  iData[1] = VOLUME_MASTER(volume);
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	3319      	adds	r3, #25
 8000892:	b2db      	uxtb	r3, r3
 8000894:	737b      	strb	r3, [r7, #13]
  write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 8000896:	f107 030c 	add.w	r3, r7, #12
 800089a:	3301      	adds	r3, #1
 800089c:	4619      	mov	r1, r3
 800089e:	2020      	movs	r0, #32
 80008a0:	f7ff fe66 	bl	8000570 <write_register>
  write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	3301      	adds	r3, #1
 80008aa:	4619      	mov	r1, r3
 80008ac:	2021      	movs	r0, #33	@ 0x21
 80008ae:	f7ff fe5f 	bl	8000570 <write_register>
}
 80008b2:	bf00      	nop
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <CS43_SetMute>:

void CS43_SetMute(bool mute)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b084      	sub	sp, #16
 80008be:	af00      	add	r7, sp, #0
 80008c0:	4603      	mov	r3, r0
 80008c2:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  if(mute)
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d019      	beq.n	80008fe <CS43_SetMute+0x44>
  {
    iData[1] = 0xFF;
 80008ca:	23ff      	movs	r3, #255	@ 0xff
 80008cc:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 80008ce:	f107 030c 	add.w	r3, r7, #12
 80008d2:	3301      	adds	r3, #1
 80008d4:	4619      	mov	r1, r3
 80008d6:	2004      	movs	r0, #4
 80008d8:	f7ff fe4a 	bl	8000570 <write_register>
    iData[1] = 0x01;
 80008dc:	2301      	movs	r3, #1
 80008de:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	3301      	adds	r3, #1
 80008e6:	4619      	mov	r1, r3
 80008e8:	2022      	movs	r0, #34	@ 0x22
 80008ea:	f7ff fe41 	bl	8000570 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	3301      	adds	r3, #1
 80008f4:	4619      	mov	r1, r3
 80008f6:	2023      	movs	r0, #35	@ 0x23
 80008f8:	f7ff fe3a 	bl	8000570 <write_register>
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
    iData[1] = 0xAF;
    write_register(POWER_CONTROL2,&iData[1]);
  }
}
 80008fc:	e018      	b.n	8000930 <CS43_SetMute+0x76>
    iData[1] = 0x00;
 80008fe:	2300      	movs	r3, #0
 8000900:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	3301      	adds	r3, #1
 8000908:	4619      	mov	r1, r3
 800090a:	2022      	movs	r0, #34	@ 0x22
 800090c:	f7ff fe30 	bl	8000570 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	3301      	adds	r3, #1
 8000916:	4619      	mov	r1, r3
 8000918:	2023      	movs	r0, #35	@ 0x23
 800091a:	f7ff fe29 	bl	8000570 <write_register>
    iData[1] = 0xAF;
 800091e:	23af      	movs	r3, #175	@ 0xaf
 8000920:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	3301      	adds	r3, #1
 8000928:	4619      	mov	r1, r3
 800092a:	2004      	movs	r0, #4
 800092c:	f7ff fe20 	bl	8000570 <write_register>
}
 8000930:	bf00      	nop
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(0);
 800093e:	2000      	movs	r0, #0
 8000940:	f7ff ffbb 	bl	80008ba <CS43_SetMute>
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 8000944:	2399      	movs	r3, #153	@ 0x99
 8000946:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	3301      	adds	r3, #1
 800094c:	4619      	mov	r1, r3
 800094e:	2000      	movs	r0, #0
 8000950:	f7ff fe0e 	bl	8000570 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 8000954:	2380      	movs	r3, #128	@ 0x80
 8000956:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_47,&iData[1]);
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	3301      	adds	r3, #1
 800095c:	4619      	mov	r1, r3
 800095e:	2047      	movs	r0, #71	@ 0x47
 8000960:	f7ff fe06 	bl	8000570 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	3301      	adds	r3, #1
 8000968:	4619      	mov	r1, r3
 800096a:	2032      	movs	r0, #50	@ 0x32
 800096c:	f7ff fe1a 	bl	80005a4 <read_register>
	iData[1] |= 0x80;
 8000970:	797b      	ldrb	r3, [r7, #5]
 8000972:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000976:	b2db      	uxtb	r3, r3
 8000978:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	3301      	adds	r3, #1
 800097e:	4619      	mov	r1, r3
 8000980:	2032      	movs	r0, #50	@ 0x32
 8000982:	f7ff fdf5 	bl	8000570 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	3301      	adds	r3, #1
 800098a:	4619      	mov	r1, r3
 800098c:	2032      	movs	r0, #50	@ 0x32
 800098e:	f7ff fe09 	bl	80005a4 <read_register>
	iData[1] &= ~(0x80);
 8000992:	797b      	ldrb	r3, [r7, #5]
 8000994:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000998:	b2db      	uxtb	r3, r3
 800099a:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	3301      	adds	r3, #1
 80009a0:	4619      	mov	r1, r3
 80009a2:	2032      	movs	r0, #50	@ 0x32
 80009a4:	f7ff fde4 	bl	8000570 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 80009a8:	2300      	movs	r3, #0
 80009aa:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	3301      	adds	r3, #1
 80009b0:	4619      	mov	r1, r3
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff fddc 	bl	8000570 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 80009b8:	239e      	movs	r3, #158	@ 0x9e
 80009ba:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	3301      	adds	r3, #1
 80009c0:	4619      	mov	r1, r3
 80009c2:	2002      	movs	r0, #2
 80009c4:	f7ff fdd4 	bl	8000570 <write_register>
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <CS43_Stop>:

void CS43_Stop(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(1);
 80009d6:	2001      	movs	r0, #1
 80009d8:	f7ff ff6f 	bl	80008ba <CS43_SetMute>
  iData[1] = 0x04;
 80009dc:	2304      	movs	r3, #4
 80009de:	717b      	strb	r3, [r7, #5]
  write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	3301      	adds	r3, #1
 80009e4:	4619      	mov	r1, r3
 80009e6:	200e      	movs	r0, #14
 80009e8:	f7ff fdc2 	bl	8000570 <write_register>
	iData[1] = 0x9F;
 80009ec:	239f      	movs	r3, #159	@ 0x9f
 80009ee:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	3301      	adds	r3, #1
 80009f4:	4619      	mov	r1, r3
 80009f6:	2002      	movs	r0, #2
 80009f8:	f7ff fdba 	bl	8000570 <write_register>
}
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <NextionAddComp>:
 */

#include "Nextion.h"

uint8_t NextionAddComp(Nextion* nex, NexComp* _nexcomp, char* objectname, uint8_t __page, uint8_t __id, void (*callbackFuncOnPress)(), void (*callbackFuncOnRelease)())
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
 8000a10:	70fb      	strb	r3, [r7, #3]
	//Make space before passing the object name to the nexcomp struct
	_nexcomp->objname = (char *) malloc((strlen(objectname)*sizeof(char)) + 1);
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff fbdc 	bl	80001d0 <strlen>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f010 f9b1 	bl	8010d84 <malloc>
 8000a22:	4603      	mov	r3, r0
 8000a24:	461a      	mov	r2, r3
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	60da      	str	r2, [r3, #12]
	//Pass the object name to the struct
	strcpy(_nexcomp->objname, objectname);
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	68db      	ldr	r3, [r3, #12]
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f010 fac9 	bl	8010fc8 <strcpy>

	//Pass the corresponding data from component to component struct
	_nexcomp->_id = __id;
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	7e3a      	ldrb	r2, [r7, #24]
 8000a3a:	705a      	strb	r2, [r3, #1]
	_nexcomp->_page = __page;
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	78fa      	ldrb	r2, [r7, #3]
 8000a40:	701a      	strb	r2, [r3, #0]

	//Add the component struct to the list on the Nextion Struct
	nex->_NexCompArr[nex->_NexCompCount] = _nexcomp;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8000a48:	461a      	mov	r2, r3
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	321a      	adds	r2, #26
 8000a4e:	68b9      	ldr	r1, [r7, #8]
 8000a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	nex->_NexCompCount++;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8

	//Bind the correct callback functions together
	_nexcomp->callbackOnPress = callbackFuncOnPress;
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	69fa      	ldr	r2, [r7, #28]
 8000a68:	605a      	str	r2, [r3, #4]
	_nexcomp->callbackOnRelease = callbackFuncOnRelease;
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	6a3a      	ldr	r2, [r7, #32]
 8000a6e:	609a      	str	r2, [r3, #8]

	//Return OK
	return 0;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <NextionInit>:

uint8_t NextionInit(Nextion *nex, UART_HandleTypeDef *nextionUARTHandle)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
 8000a82:	6039      	str	r1, [r7, #0]
	//Pass the used UART handle to the struct
	nex->nextionUARTHandle = nextionUARTHandle;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	683a      	ldr	r2, [r7, #0]
 8000a88:	601a      	str	r2, [r3, #0]

	//Start the parsing counters from zero
	nex->_arrCount = 0;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
	nex->_pkgCount = 0;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2200      	movs	r2, #0
 8000a96:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66

	//Start UART transaction using DMA
	HAL_UART_Receive_IT(nex->nextionUARTHandle, (uint8_t *)&nex->_RxData, 1);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6818      	ldr	r0, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	3364      	adds	r3, #100	@ 0x64
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f008 f836 	bl	8008b16 <HAL_UART_Receive_IT>

	//Start the component count variable from zero
	nex->_NexCompCount  = 0;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2200      	movs	r2, #0
 8000aae:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8

	//Return OK
	return 0;
 8000ab2:	2300      	movs	r3, #0
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <NextionUpdate>:

uint8_t NextionUpdate(UART_HandleTypeDef *huart, Nextion *nex)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
	if(huart->Instance == (nex->nextionUARTHandle->Instance))
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	f040 80d9 	bne.w	8000c88 <NextionUpdate+0x1cc>
	{
		//Add the received byte to the array and increment the counter afterwards
		nex->_RxDataArr[nex->_arrCount] = nex->_RxData;
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 8000adc:	4619      	mov	r1, r3
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	f893 2064 	ldrb.w	r2, [r3, #100]	@ 0x64
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	440b      	add	r3, r1
 8000ae8:	711a      	strb	r2, [r3, #4]
		nex->_arrCount++;
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 8000af0:	3301      	adds	r3, #1
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65

		//Count 0xFF
		if(nex->_RxData == 0xFF)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8000b00:	2bff      	cmp	r3, #255	@ 0xff
 8000b02:	d108      	bne.n	8000b16 <NextionUpdate+0x5a>
			nex->_pkgCount++;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
 8000b14:	e003      	b.n	8000b1e <NextionUpdate+0x62>
		else
			nex->_pkgCount = 0;
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66

		//Assume a package is received after three 0xFF commands,
		//and start processing the data
		if(nex->_pkgCount == 3)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8000b24:	2b03      	cmp	r3, #3
 8000b26:	f040 80a7 	bne.w	8000c78 <NextionUpdate+0x1bc>
		{
			//Determine the length (count) of the data
			uint8_t count = 0, FFCount = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	73fb      	strb	r3, [r7, #15]
 8000b2e:	2300      	movs	r3, #0
 8000b30:	73bb      	strb	r3, [r7, #14]
			for(uint8_t i = 0; FFCount < 3; i++)
 8000b32:	2300      	movs	r3, #0
 8000b34:	737b      	strb	r3, [r7, #13]
 8000b36:	e00e      	b.n	8000b56 <NextionUpdate+0x9a>
			{
				count++;
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	73fb      	strb	r3, [r7, #15]
				if(nex->_RxDataArr[i] == 0xFF) FFCount++;
 8000b3e:	7b7b      	ldrb	r3, [r7, #13]
 8000b40:	683a      	ldr	r2, [r7, #0]
 8000b42:	4413      	add	r3, r2
 8000b44:	791b      	ldrb	r3, [r3, #4]
 8000b46:	2bff      	cmp	r3, #255	@ 0xff
 8000b48:	d102      	bne.n	8000b50 <NextionUpdate+0x94>
 8000b4a:	7bbb      	ldrb	r3, [r7, #14]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	73bb      	strb	r3, [r7, #14]
			for(uint8_t i = 0; FFCount < 3; i++)
 8000b50:	7b7b      	ldrb	r3, [r7, #13]
 8000b52:	3301      	adds	r3, #1
 8000b54:	737b      	strb	r3, [r7, #13]
 8000b56:	7bbb      	ldrb	r3, [r7, #14]
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	d9ed      	bls.n	8000b38 <NextionUpdate+0x7c>
			}

			//In case of a touch event call the callback function accordingly,
			if(nex->_RxDataArr[0] == NEX_RET_EVENT_TOUCH_HEAD)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	791b      	ldrb	r3, [r3, #4]
 8000b60:	2b65      	cmp	r3, #101	@ 0x65
 8000b62:	d145      	bne.n	8000bf0 <NextionUpdate+0x134>
			{
				//Loop through the component struct array,
				for(uint8_t i = 0; i < nex->_NexCompCount; i++)
 8000b64:	2300      	movs	r3, #0
 8000b66:	733b      	strb	r3, [r7, #12]
 8000b68:	e03c      	b.n	8000be4 <NextionUpdate+0x128>
				{
					//Detect the affected component by its Page and ID
					if( (nex->_RxDataArr[2] == (nex->_NexCompArr[i]->_id)) && (nex->_RxDataArr[1] == (nex->_NexCompArr[i]->_page)) )
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	799a      	ldrb	r2, [r3, #6]
 8000b6e:	7b39      	ldrb	r1, [r7, #12]
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	311a      	adds	r1, #26
 8000b74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000b78:	785b      	ldrb	r3, [r3, #1]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d12f      	bne.n	8000bde <NextionUpdate+0x122>
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	795a      	ldrb	r2, [r3, #5]
 8000b82:	7b39      	ldrb	r1, [r7, #12]
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	311a      	adds	r1, #26
 8000b88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d125      	bne.n	8000bde <NextionUpdate+0x122>
					{
						//Call the desired On Press or On Release callback function,
						if((nex->_RxDataArr[3] == NEX_EVENT_ON_PRESS) && (nex->_NexCompArr[i]->callbackOnPress != NULL))
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	79db      	ldrb	r3, [r3, #7]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d10e      	bne.n	8000bb8 <NextionUpdate+0xfc>
 8000b9a:	7b3a      	ldrb	r2, [r7, #12]
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	321a      	adds	r2, #26
 8000ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d006      	beq.n	8000bb8 <NextionUpdate+0xfc>
							nex->_NexCompArr[i]->callbackOnPress();
 8000baa:	7b3a      	ldrb	r2, [r7, #12]
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	321a      	adds	r2, #26
 8000bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	4798      	blx	r3
						if((nex->_RxDataArr[3] == NEX_EVENT_ON_RELEASE) && (nex->_NexCompArr[i]->callbackOnRelease != NULL))
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	79db      	ldrb	r3, [r3, #7]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d10e      	bne.n	8000bde <NextionUpdate+0x122>
 8000bc0:	7b3a      	ldrb	r2, [r7, #12]
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	321a      	adds	r2, #26
 8000bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d006      	beq.n	8000bde <NextionUpdate+0x122>
							nex->_NexCompArr[i]->callbackOnRelease();
 8000bd0:	7b3a      	ldrb	r2, [r7, #12]
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	321a      	adds	r2, #26
 8000bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	4798      	blx	r3
				for(uint8_t i = 0; i < nex->_NexCompCount; i++)
 8000bde:	7b3b      	ldrb	r3, [r7, #12]
 8000be0:	3301      	adds	r3, #1
 8000be2:	733b      	strb	r3, [r7, #12]
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8000bea:	7b3a      	ldrb	r2, [r7, #12]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d3bc      	bcc.n	8000b6a <NextionUpdate+0xae>
					}
				}
			}

			//If the received package contains string data
			if(nex->_RxDataArr[0] == NEX_RET_STRING_HEAD)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	791b      	ldrb	r3, [r3, #4]
 8000bf4:	2b70      	cmp	r3, #112	@ 0x70
 8000bf6:	d121      	bne.n	8000c3c <NextionUpdate+0x180>
			{
				nex->NextTextLen = 0;
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
				for(int i = 0; i < (count - 4); i++)
 8000c00:	2300      	movs	r3, #0
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	e015      	b.n	8000c32 <NextionUpdate+0x176>
				{
					nex->NexTextBuff[i] = nex->_RxDataArr[i+1];
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	683a      	ldr	r2, [r7, #0]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	7919      	ldrb	r1, [r3, #4]
 8000c10:	683a      	ldr	r2, [r7, #0]
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	4413      	add	r3, r2
 8000c16:	33e9      	adds	r3, #233	@ 0xe9
 8000c18:	460a      	mov	r2, r1
 8000c1a:	701a      	strb	r2, [r3, #0]
					nex->NextTextLen++;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	f893 3129 	ldrb.w	r3, [r3, #297]	@ 0x129
 8000c22:	3301      	adds	r3, #1
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
				for(int i = 0; i < (count - 4); i++)
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	3b04      	subs	r3, #4
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	dbe4      	blt.n	8000c06 <NextionUpdate+0x14a>
				}
			}

			//If the received package contains integer data
			if(nex->_RxDataArr[0] == NEX_RET_NUMBER_HEAD)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	791b      	ldrb	r3, [r3, #4]
 8000c40:	2b71      	cmp	r3, #113	@ 0x71
 8000c42:	d111      	bne.n	8000c68 <NextionUpdate+0x1ac>
			{
				nex->NextNumBuff = ((uint32_t)nex->_RxDataArr[4]<<24)|((uint32_t)nex->_RxDataArr[3]<<16)|(nex->_RxDataArr[2]<<8)|(nex->_RxDataArr[1]);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	7a1b      	ldrb	r3, [r3, #8]
 8000c48:	061a      	lsls	r2, r3, #24
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	79db      	ldrb	r3, [r3, #7]
 8000c4e:	041b      	lsls	r3, r3, #16
 8000c50:	431a      	orrs	r2, r3
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	799b      	ldrb	r3, [r3, #6]
 8000c56:	021b      	lsls	r3, r3, #8
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	683a      	ldr	r2, [r7, #0]
 8000c5c:	7952      	ldrb	r2, [r2, #5]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	461a      	mov	r2, r3
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
			}

			//Reset the buffer counters
			nex->_pkgCount = 0;
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
			nex->_arrCount = 0;
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	2200      	movs	r2, #0
 8000c74:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
		}

		HAL_UART_Receive_IT(nex->nextionUARTHandle, (uint8_t *)&nex->_RxData, 1);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	6818      	ldr	r0, [r3, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	3364      	adds	r3, #100	@ 0x64
 8000c80:	2201      	movs	r2, #1
 8000c82:	4619      	mov	r1, r3
 8000c84:	f007 ff47 	bl	8008b16 <HAL_UART_Receive_IT>
	}

	//Return OK
	return 0;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <NextionSetText>:
	//Return OK
	return 0;
}

uint8_t NextionSetText(Nextion *nex, NexComp *comp, char *usertext)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b094      	sub	sp, #80	@ 0x50
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
	//Allocate a static buffer for combining the transfer command string
	char transmitBuff[NEXTION_TEXT_BUFF_LEN] = {0};
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	223c      	movs	r2, #60	@ 0x3c
 8000caa:	2100      	movs	r1, #0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f010 f947 	bl	8010f40 <memset>

	//Combine required commands in a single string
	sprintf(transmitBuff, "%s.txt=\"%s\"", comp->objname, usertext);
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	68da      	ldr	r2, [r3, #12]
 8000cb6:	f107 0010 	add.w	r0, r7, #16
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4906      	ldr	r1, [pc, #24]	@ (8000cd8 <NextionSetText+0x44>)
 8000cbe:	f010 f91f 	bl	8010f00 <siprintf>

	//Send the combined command to Nextion and wait for the received answer
	NextionSendCommand(nex, transmitBuff);
 8000cc2:	f107 0310 	add.w	r3, r7, #16
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	68f8      	ldr	r0, [r7, #12]
 8000cca:	f000 f833 	bl	8000d34 <NextionSendCommand>

	//Return OK
	return 0;
 8000cce:	2300      	movs	r3, #0
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3750      	adds	r7, #80	@ 0x50
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	08011718 	.word	0x08011718

08000cdc <NextionGetVal>:

uint8_t NextionGetVal(Nextion *nex, NexComp *comp, int *valBuf)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b094      	sub	sp, #80	@ 0x50
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
	//Allocate a static buffer for combining the transfer command string
	char transmitBuff[NEXTION_TEXT_BUFF_LEN] = {0};
 8000ce8:	2300      	movs	r3, #0
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	223c      	movs	r2, #60	@ 0x3c
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f010 f923 	bl	8010f40 <memset>

	//Combine required commands in a single string
	sprintf(transmitBuff, "get %s.val", comp->objname);
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	68da      	ldr	r2, [r3, #12]
 8000cfe:	f107 0310 	add.w	r3, r7, #16
 8000d02:	490b      	ldr	r1, [pc, #44]	@ (8000d30 <NextionGetVal+0x54>)
 8000d04:	4618      	mov	r0, r3
 8000d06:	f010 f8fb 	bl	8010f00 <siprintf>

	//Send the combined command to Nextion and wait for the received answer
	NextionSendCommand(nex, transmitBuff);
 8000d0a:	f107 0310 	add.w	r3, r7, #16
 8000d0e:	4619      	mov	r1, r3
 8000d10:	68f8      	ldr	r0, [r7, #12]
 8000d12:	f000 f80f 	bl	8000d34 <NextionSendCommand>

	//Wait for Nextion to send the command back;
	//This line blocks the code for a while and provides a crude ensurement
	HAL_Delay(50);
 8000d16:	2032      	movs	r0, #50	@ 0x32
 8000d18:	f001 faf0 	bl	80022fc <HAL_Delay>

	//Get the received value from the buffer and pass it to the user variable
	*valBuf = nex->NextNumBuff;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	601a      	str	r2, [r3, #0]

	//Return OK
	return 0;
 8000d26:	2300      	movs	r3, #0
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3750      	adds	r7, #80	@ 0x50
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	08011724 	.word	0x08011724

08000d34 <NextionSendCommand>:
	return 0;
}

char ENDTERMS[]={255,255,255};
uint8_t NextionSendCommand(Nextion *nex, char *_command)
{
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(nex->nextionUARTHandle, (uint8_t *)_command, strlen((const char*)_command), NEXTION_TIMEOUT);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681c      	ldr	r4, [r3, #0]
 8000d42:	6838      	ldr	r0, [r7, #0]
 8000d44:	f7ff fa44 	bl	80001d0 <strlen>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	23fa      	movs	r3, #250	@ 0xfa
 8000d4e:	6839      	ldr	r1, [r7, #0]
 8000d50:	4620      	mov	r0, r4
 8000d52:	f007 fe55 	bl	8008a00 <HAL_UART_Transmit>
	NextionEndCommand(nex);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f000 f806 	bl	8000d68 <NextionEndCommand>

	//Return OK
	return 0;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd90      	pop	{r4, r7, pc}
	...

08000d68 <NextionEndCommand>:

uint8_t NextionEndCommand(Nextion *nex)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	uint8_t EndCommand[3] = {255, 255, 255};
 8000d70:	4a0c      	ldr	r2, [pc, #48]	@ (8000da4 <NextionEndCommand+0x3c>)
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	6812      	ldr	r2, [r2, #0]
 8000d78:	4611      	mov	r1, r2
 8000d7a:	8019      	strh	r1, [r3, #0]
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	0c12      	lsrs	r2, r2, #16
 8000d80:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(nex->nextionUARTHandle, EndCommand, 3, NEXTION_TIMEOUT);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6818      	ldr	r0, [r3, #0]
 8000d86:	f107 010c 	add.w	r1, r7, #12
 8000d8a:	23fa      	movs	r3, #250	@ 0xfa
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	f007 fe37 	bl	8008a00 <HAL_UART_Transmit>
	NextionRestartIT(nex);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f000 f808 	bl	8000da8 <NextionRestartIT>

	//Return OK
	return 0;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	0801173c 	.word	0x0801173c

08000da8 <NextionRestartIT>:

//Following two functions are not needed anymore and will be removed in the future,
uint8_t NextionRestartIT(Nextion *nex)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(nex->nextionUARTHandle, (uint8_t *)&nex->_RxData, 1);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6818      	ldr	r0, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3364      	adds	r3, #100	@ 0x64
 8000db8:	2201      	movs	r2, #1
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f007 feab 	bl	8008b16 <HAL_UART_Receive_IT>

	//Return OK
	return 0;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <audioI2S_pllClockConfig>:

/**
 * @brief I2S Clock Config
 */
static void audioI2S_pllClockConfig(uint32_t audioFreq)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	77fb      	strb	r3, [r7, #31]
 8000dd8:	23ff      	movs	r3, #255	@ 0xff
 8000dda:	77bb      	strb	r3, [r7, #30]

  for(index = 0; index < 8; index++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	77fb      	strb	r3, [r7, #31]
 8000de0:	e00b      	b.n	8000dfa <audioI2S_pllClockConfig+0x2e>
  {
    if(I2SFreq[index] == audioFreq)
 8000de2:	7ffb      	ldrb	r3, [r7, #31]
 8000de4:	4a1c      	ldr	r2, [pc, #112]	@ (8000e58 <audioI2S_pllClockConfig+0x8c>)
 8000de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d101      	bne.n	8000df4 <audioI2S_pllClockConfig+0x28>
    {
      freqindex = index;
 8000df0:	7ffb      	ldrb	r3, [r7, #31]
 8000df2:	77bb      	strb	r3, [r7, #30]
  for(index = 0; index < 8; index++)
 8000df4:	7ffb      	ldrb	r3, [r7, #31]
 8000df6:	3301      	adds	r3, #1
 8000df8:	77fb      	strb	r3, [r7, #31]
 8000dfa:	7ffb      	ldrb	r3, [r7, #31]
 8000dfc:	2b07      	cmp	r3, #7
 8000dfe:	d9f0      	bls.n	8000de2 <audioI2S_pllClockConfig+0x16>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	4618      	mov	r0, r3
 8000e06:	f007 f8a9 	bl	8007f5c <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8000e0a:	7fbb      	ldrb	r3, [r7, #30]
 8000e0c:	f003 0307 	and.w	r3, r3, #7
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d111      	bne.n	8000e38 <audioI2S_pllClockConfig+0x6c>
  {
    /* I2S clock config
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) × (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e14:	2301      	movs	r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8000e18:	7fbb      	ldrb	r3, [r7, #30]
 8000e1a:	4a10      	ldr	r2, [pc, #64]	@ (8000e5c <audioI2S_pllClockConfig+0x90>)
 8000e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e20:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8000e22:	7fbb      	ldrb	r3, [r7, #30]
 8000e24:	4a0e      	ldr	r2, [pc, #56]	@ (8000e60 <audioI2S_pllClockConfig+0x94>)
 8000e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2a:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000e2c:	f107 030c 	add.w	r3, r7, #12
 8000e30:	4618      	mov	r0, r3
 8000e32:	f006 ffb1 	bl	8007d98 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 8000e36:	e00b      	b.n	8000e50 <audioI2S_pllClockConfig+0x84>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8000e3c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000e40:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8000e42:	2303      	movs	r3, #3
 8000e44:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000e46:	f107 030c 	add.w	r3, r7, #12
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f006 ffa4 	bl	8007d98 <HAL_RCCEx_PeriphCLKConfig>
}
 8000e50:	bf00      	nop
 8000e52:	3720      	adds	r7, #32
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	08011888 	.word	0x08011888
 8000e5c:	080118a8 	.word	0x080118a8
 8000e60:	080118c8 	.word	0x080118c8

08000e64 <I2S3_freqUpdate>:

/**
 * @brief update I2S peripheral with selected Sampling Frequency
 */
static bool I2S3_freqUpdate(uint32_t AudioFreq)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioI2S->Instance         = SPI3;
 8000e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee4 <I2S3_freqUpdate+0x80>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a1d      	ldr	r2, [pc, #116]	@ (8000ee8 <I2S3_freqUpdate+0x84>)
 8000e72:	601a      	str	r2, [r3, #0]

 /* Disable I2S block */
  __HAL_I2S_DISABLE(hAudioI2S);
 8000e74:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee4 <I2S3_freqUpdate+0x80>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	69da      	ldr	r2, [r3, #28]
 8000e7c:	4b19      	ldr	r3, [pc, #100]	@ (8000ee4 <I2S3_freqUpdate+0x80>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000e86:	61da      	str	r2, [r3, #28]

  /* I2S3 peripheral configuration */
  hAudioI2S->Init.AudioFreq   = AudioFreq;
 8000e88:	4b16      	ldr	r3, [pc, #88]	@ (8000ee4 <I2S3_freqUpdate+0x80>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	615a      	str	r2, [r3, #20]
  hAudioI2S->Init.ClockSource = I2S_CLOCK_PLL;
 8000e90:	4b14      	ldr	r3, [pc, #80]	@ (8000ee4 <I2S3_freqUpdate+0x80>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2200      	movs	r2, #0
 8000e96:	61da      	str	r2, [r3, #28]
  hAudioI2S->Init.CPOL        = I2S_CPOL_LOW;
 8000e98:	4b12      	ldr	r3, [pc, #72]	@ (8000ee4 <I2S3_freqUpdate+0x80>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  hAudioI2S->Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000ea0:	4b10      	ldr	r3, [pc, #64]	@ (8000ee4 <I2S3_freqUpdate+0x80>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	60da      	str	r2, [r3, #12]
  hAudioI2S->Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee4 <I2S3_freqUpdate+0x80>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eb0:	611a      	str	r2, [r3, #16]
  hAudioI2S->Init.Mode        = I2S_MODE_MASTER_TX;
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <I2S3_freqUpdate+0x80>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eba:	605a      	str	r2, [r3, #4]
  hAudioI2S->Init.Standard    = I2S_STANDARD_PHILIPS;
 8000ebc:	4b09      	ldr	r3, [pc, #36]	@ (8000ee4 <I2S3_freqUpdate+0x80>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(hAudioI2S) != HAL_OK)
 8000ec4:	4b07      	ldr	r3, [pc, #28]	@ (8000ee4 <I2S3_freqUpdate+0x80>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f005 fa31 	bl	8006330 <HAL_I2S_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <I2S3_freqUpdate+0x74>
  {
    return false;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	e000      	b.n	8000eda <I2S3_freqUpdate+0x76>
  }
  else
  {
    return true;
 8000ed8:	2301      	movs	r3, #1
  }
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200000f0 	.word	0x200000f0
 8000ee8:	40003c00 	.word	0x40003c00

08000eec <audioI2S_setHandle>:

/**
 * @brief set I2S HAL handle
 */
void audioI2S_setHandle(I2S_HandleTypeDef *pI2Shandle)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  hAudioI2S = pI2Shandle;
 8000ef4:	4a04      	ldr	r2, [pc, #16]	@ (8000f08 <audioI2S_setHandle+0x1c>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6013      	str	r3, [r2, #0]
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	200000f0 	.word	0x200000f0

08000f0c <audioI2S_init>:
 * @param audioFreq - WAV file Audio sampling rate (44.1KHz, 48KHz, ...)
 * @param volume - CS43L22 Codec volume settings (0 - 100)
 * @retval state - true: Successfully, false: Failed
 */
bool audioI2S_init(uint32_t audioFreq)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  //Update PLL Clock Frequency setting
  audioI2S_pllClockConfig(audioFreq);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff ff59 	bl	8000dcc <audioI2S_pllClockConfig>
  //Update I2S peripheral sampling frequency
  I2S3_freqUpdate(audioFreq);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff ffa2 	bl	8000e64 <I2S3_freqUpdate>
  return true;
 8000f20:	2301      	movs	r3, #1
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <audioI2S_play>:

/**
 * @brief Starts Playing Audio from buffer
 */
bool audioI2S_play(uint16_t* pDataBuf, uint32_t len)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  //Start Codec
  CS43_Start();
 8000f36:	f7ff fcff 	bl	8000938 <CS43_Start>
  //Start I2S DMA transfer
  HAL_I2S_Transmit_DMA(hAudioI2S, pDataBuf, DMA_MAX(len/AUDIODATA_SIZE));
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f64 <audioI2S_play+0x38>)
 8000f3c:	6818      	ldr	r0, [r3, #0]
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000f44:	d203      	bcs.n	8000f4e <audioI2S_play+0x22>
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	085b      	lsrs	r3, r3, #1
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	e001      	b.n	8000f52 <audioI2S_play+0x26>
 8000f4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f52:	461a      	mov	r2, r3
 8000f54:	6879      	ldr	r1, [r7, #4]
 8000f56:	f005 fb2b 	bl	80065b0 <HAL_I2S_Transmit_DMA>
  return true;
 8000f5a:	2301      	movs	r3, #1
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200000f0 	.word	0x200000f0

08000f68 <audioI2S_pause>:

/**
 * @brief Pause audio out
 */
void audioI2S_pause(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  CS43_Stop();
 8000f6c:	f7ff fd30 	bl	80009d0 <CS43_Stop>
  HAL_I2S_DMAPause(hAudioI2S);
 8000f70:	4b03      	ldr	r3, [pc, #12]	@ (8000f80 <audioI2S_pause+0x18>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f005 fbc3 	bl	8006700 <HAL_I2S_DMAPause>
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200000f0 	.word	0x200000f0

08000f84 <audioI2S_resume>:

/**
 * @brief Resume audio out
 */
void audioI2S_resume(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  CS43_Start();
 8000f88:	f7ff fcd6 	bl	8000938 <CS43_Start>
  HAL_I2S_DMAResume(hAudioI2S);
 8000f8c:	4b03      	ldr	r3, [pc, #12]	@ (8000f9c <audioI2S_resume+0x18>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f005 fc17 	bl	80067c4 <HAL_I2S_DMAResume>
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200000f0 	.word	0x200000f0

08000fa0 <audioI2S_stop>:

/**
 * @brief Stop audio
 */
void audioI2S_stop(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  CS43_Stop();
 8000fa4:	f7ff fd14 	bl	80009d0 <CS43_Stop>
  HAL_I2S_DMAStop(hAudioI2S);
 8000fa8:	4b03      	ldr	r3, [pc, #12]	@ (8000fb8 <audioI2S_stop+0x18>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f005 fc9d 	bl	80068ec <HAL_I2S_DMAStop>
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200000f0 	.word	0x200000f0

08000fbc <HAL_I2S_TxCpltCallback>:
{

}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a04      	ldr	r2, [pc, #16]	@ (8000fdc <HAL_I2S_TxCpltCallback+0x20>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d101      	bne.n	8000fd2 <HAL_I2S_TxCpltCallback+0x16>
  {
    audioI2S_fullTransfer_Callback();
 8000fce:	f001 f8ed 	bl	80021ac <audioI2S_fullTransfer_Callback>
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40003c00 	.word	0x40003c00

08000fe0 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a04      	ldr	r2, [pc, #16]	@ (8001000 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d101      	bne.n	8000ff6 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    audioI2S_halfTransfer_Callback();
 8000ff2:	f001 f8cf 	bl	8002194 <audioI2S_halfTransfer_Callback>
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40003c00 	.word	0x40003c00

08001004 <HAL_UART_RxCpltCallback>:
bool devam_durum_b = false;



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
    NextionUpdate(huart, &nextion);
 800100c:	4903      	ldr	r1, [pc, #12]	@ (800101c <HAL_UART_RxCpltCallback+0x18>)
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff fd54 	bl	8000abc <NextionUpdate>



}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000280 	.word	0x20000280

08001020 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM1){
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0a      	ldr	r2, [pc, #40]	@ (8001058 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d10c      	bne.n	800104c <HAL_TIM_PeriodElapsedCallback+0x2c>
		yazi_sayac++;
 8001032:	4b0a      	ldr	r3, [pc, #40]	@ (800105c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	3301      	adds	r3, #1
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4b08      	ldr	r3, [pc, #32]	@ (800105c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800103c:	701a      	strb	r2, [r3, #0]

		if(yazi_sayac == 4) yazi_sayac =0;
 800103e:	4b07      	ldr	r3, [pc, #28]	@ (800105c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b04      	cmp	r3, #4
 8001044:	d102      	bne.n	800104c <HAL_TIM_PeriodElapsedCallback+0x2c>
 8001046:	4b05      	ldr	r3, [pc, #20]	@ (800105c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
	}


}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	40010000 	.word	0x40010000
 800105c:	20000494 	.word	0x20000494

08001060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b095      	sub	sp, #84	@ 0x54
 8001064:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001066:	f001 f8d7 	bl	8002218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800106a:	f000 fb4f 	bl	800170c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800106e:	f000 fcaf 	bl	80019d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001072:	f000 fc8d 	bl	8001990 <MX_DMA_Init>
  MX_I2C1_Init();
 8001076:	f000 fbb3 	bl	80017e0 <MX_I2C1_Init>
  MX_I2S3_Init();
 800107a:	f000 fbdf 	bl	800183c <MX_I2S3_Init>
  MX_USB_HOST_Init();
 800107e:	f00f fb69 	bl	8010754 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 8001082:	f009 fe31 	bl	800ace8 <MX_FATFS_Init>
  MX_TIM1_Init();
 8001086:	f000 fc07 	bl	8001898 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800108a:	f000 fc57 	bl	800193c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  NextionInit(&nextion, &huart2);
 800108e:	49a6      	ldr	r1, [pc, #664]	@ (8001328 <main+0x2c8>)
 8001090:	48a6      	ldr	r0, [pc, #664]	@ (800132c <main+0x2cc>)
 8001092:	f7ff fcf2 	bl	8000a7a <NextionInit>
  HAL_Delay(40);
 8001096:	2028      	movs	r0, #40	@ 0x28
 8001098:	f001 f930 	bl	80022fc <HAL_Delay>

  NextionAddComp(&nextion, &nexText1, "t0", 0, 7, NULL, NULL);
 800109c:	2300      	movs	r3, #0
 800109e:	9302      	str	r3, [sp, #8]
 80010a0:	2300      	movs	r3, #0
 80010a2:	9301      	str	r3, [sp, #4]
 80010a4:	2307      	movs	r3, #7
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2300      	movs	r3, #0
 80010aa:	4aa1      	ldr	r2, [pc, #644]	@ (8001330 <main+0x2d0>)
 80010ac:	49a1      	ldr	r1, [pc, #644]	@ (8001334 <main+0x2d4>)
 80010ae:	489f      	ldr	r0, [pc, #636]	@ (800132c <main+0x2cc>)
 80010b0:	f7ff fca8 	bl	8000a04 <NextionAddComp>
  NextionAddComp(&nextion, &nexText2, "t1", 0, 8, NULL, NULL);
 80010b4:	2300      	movs	r3, #0
 80010b6:	9302      	str	r3, [sp, #8]
 80010b8:	2300      	movs	r3, #0
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	2308      	movs	r3, #8
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2300      	movs	r3, #0
 80010c2:	4a9d      	ldr	r2, [pc, #628]	@ (8001338 <main+0x2d8>)
 80010c4:	499d      	ldr	r1, [pc, #628]	@ (800133c <main+0x2dc>)
 80010c6:	4899      	ldr	r0, [pc, #612]	@ (800132c <main+0x2cc>)
 80010c8:	f7ff fc9c 	bl	8000a04 <NextionAddComp>
  NextionAddComp(&nextion, &nexText3, "t2", 0, 9, NULL, NULL);
 80010cc:	2300      	movs	r3, #0
 80010ce:	9302      	str	r3, [sp, #8]
 80010d0:	2300      	movs	r3, #0
 80010d2:	9301      	str	r3, [sp, #4]
 80010d4:	2309      	movs	r3, #9
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2300      	movs	r3, #0
 80010da:	4a99      	ldr	r2, [pc, #612]	@ (8001340 <main+0x2e0>)
 80010dc:	4999      	ldr	r1, [pc, #612]	@ (8001344 <main+0x2e4>)
 80010de:	4893      	ldr	r0, [pc, #588]	@ (800132c <main+0x2cc>)
 80010e0:	f7ff fc90 	bl	8000a04 <NextionAddComp>
  NextionAddComp(&nextion, &nexText4, "t3", 0, 10, NULL, NULL);
 80010e4:	2300      	movs	r3, #0
 80010e6:	9302      	str	r3, [sp, #8]
 80010e8:	2300      	movs	r3, #0
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	230a      	movs	r3, #10
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2300      	movs	r3, #0
 80010f2:	4a95      	ldr	r2, [pc, #596]	@ (8001348 <main+0x2e8>)
 80010f4:	4995      	ldr	r1, [pc, #596]	@ (800134c <main+0x2ec>)
 80010f6:	488d      	ldr	r0, [pc, #564]	@ (800132c <main+0x2cc>)
 80010f8:	f7ff fc84 	bl	8000a04 <NextionAddComp>
  NextionAddComp(&nextion, &nexText5, "t4", 0, 12, NULL, NULL);
 80010fc:	2300      	movs	r3, #0
 80010fe:	9302      	str	r3, [sp, #8]
 8001100:	2300      	movs	r3, #0
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	230c      	movs	r3, #12
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2300      	movs	r3, #0
 800110a:	4a91      	ldr	r2, [pc, #580]	@ (8001350 <main+0x2f0>)
 800110c:	4991      	ldr	r1, [pc, #580]	@ (8001354 <main+0x2f4>)
 800110e:	4887      	ldr	r0, [pc, #540]	@ (800132c <main+0x2cc>)
 8001110:	f7ff fc78 	bl	8000a04 <NextionAddComp>

  NextionAddComp(&nextion, &basla, "basla", 0, 1, NULL, NULL);
 8001114:	2300      	movs	r3, #0
 8001116:	9302      	str	r3, [sp, #8]
 8001118:	2300      	movs	r3, #0
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	2301      	movs	r3, #1
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2300      	movs	r3, #0
 8001122:	4a8d      	ldr	r2, [pc, #564]	@ (8001358 <main+0x2f8>)
 8001124:	498d      	ldr	r1, [pc, #564]	@ (800135c <main+0x2fc>)
 8001126:	4881      	ldr	r0, [pc, #516]	@ (800132c <main+0x2cc>)
 8001128:	f7ff fc6c 	bl	8000a04 <NextionAddComp>
  NextionAddComp(&nextion, &dur, "dur", 0, 2, NULL, NULL);
 800112c:	2300      	movs	r3, #0
 800112e:	9302      	str	r3, [sp, #8]
 8001130:	2300      	movs	r3, #0
 8001132:	9301      	str	r3, [sp, #4]
 8001134:	2302      	movs	r3, #2
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2300      	movs	r3, #0
 800113a:	4a89      	ldr	r2, [pc, #548]	@ (8001360 <main+0x300>)
 800113c:	4989      	ldr	r1, [pc, #548]	@ (8001364 <main+0x304>)
 800113e:	487b      	ldr	r0, [pc, #492]	@ (800132c <main+0x2cc>)
 8001140:	f7ff fc60 	bl	8000a04 <NextionAddComp>
  NextionAddComp(&nextion, &ileri, "ileri", 0, 7, NULL, NULL);
 8001144:	2300      	movs	r3, #0
 8001146:	9302      	str	r3, [sp, #8]
 8001148:	2300      	movs	r3, #0
 800114a:	9301      	str	r3, [sp, #4]
 800114c:	2307      	movs	r3, #7
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2300      	movs	r3, #0
 8001152:	4a85      	ldr	r2, [pc, #532]	@ (8001368 <main+0x308>)
 8001154:	4985      	ldr	r1, [pc, #532]	@ (800136c <main+0x30c>)
 8001156:	4875      	ldr	r0, [pc, #468]	@ (800132c <main+0x2cc>)
 8001158:	f7ff fc54 	bl	8000a04 <NextionAddComp>
  NextionAddComp(&nextion, &geri, "geri", 0, 6, NULL, NULL);
 800115c:	2300      	movs	r3, #0
 800115e:	9302      	str	r3, [sp, #8]
 8001160:	2300      	movs	r3, #0
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	2306      	movs	r3, #6
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2300      	movs	r3, #0
 800116a:	4a81      	ldr	r2, [pc, #516]	@ (8001370 <main+0x310>)
 800116c:	4981      	ldr	r1, [pc, #516]	@ (8001374 <main+0x314>)
 800116e:	486f      	ldr	r0, [pc, #444]	@ (800132c <main+0x2cc>)
 8001170:	f7ff fc48 	bl	8000a04 <NextionAddComp>
  NextionAddComp(&nextion, &ses_azalt, "ses_eksi", 0, 4, NULL, NULL);
 8001174:	2300      	movs	r3, #0
 8001176:	9302      	str	r3, [sp, #8]
 8001178:	2300      	movs	r3, #0
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	2304      	movs	r3, #4
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2300      	movs	r3, #0
 8001182:	4a7d      	ldr	r2, [pc, #500]	@ (8001378 <main+0x318>)
 8001184:	497d      	ldr	r1, [pc, #500]	@ (800137c <main+0x31c>)
 8001186:	4869      	ldr	r0, [pc, #420]	@ (800132c <main+0x2cc>)
 8001188:	f7ff fc3c 	bl	8000a04 <NextionAddComp>
  NextionAddComp(&nextion, &ses_artir, "ses_arti", 0, 3, NULL, NULL);
 800118c:	2300      	movs	r3, #0
 800118e:	9302      	str	r3, [sp, #8]
 8001190:	2300      	movs	r3, #0
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	2303      	movs	r3, #3
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2300      	movs	r3, #0
 800119a:	4a79      	ldr	r2, [pc, #484]	@ (8001380 <main+0x320>)
 800119c:	4979      	ldr	r1, [pc, #484]	@ (8001384 <main+0x324>)
 800119e:	4863      	ldr	r0, [pc, #396]	@ (800132c <main+0x2cc>)
 80011a0:	f7ff fc30 	bl	8000a04 <NextionAddComp>
  NextionAddComp(&nextion, &devam, "devam", 0, 11, NULL, NULL);
 80011a4:	2300      	movs	r3, #0
 80011a6:	9302      	str	r3, [sp, #8]
 80011a8:	2300      	movs	r3, #0
 80011aa:	9301      	str	r3, [sp, #4]
 80011ac:	230b      	movs	r3, #11
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2300      	movs	r3, #0
 80011b2:	4a75      	ldr	r2, [pc, #468]	@ (8001388 <main+0x328>)
 80011b4:	4975      	ldr	r1, [pc, #468]	@ (800138c <main+0x32c>)
 80011b6:	485d      	ldr	r0, [pc, #372]	@ (800132c <main+0x2cc>)
 80011b8:	f7ff fc24 	bl	8000a04 <NextionAddComp>


  HAL_TIM_Base_Start_IT(&htim1);
 80011bc:	4874      	ldr	r0, [pc, #464]	@ (8001390 <main+0x330>)
 80011be:	f006 ffa9 	bl	8008114 <HAL_TIM_Base_Start_IT>




	CS43_Init(hi2c1, MODE_I2S);
 80011c2:	4c74      	ldr	r4, [pc, #464]	@ (8001394 <main+0x334>)
 80011c4:	2300      	movs	r3, #0
 80011c6:	9311      	str	r3, [sp, #68]	@ 0x44
 80011c8:	4668      	mov	r0, sp
 80011ca:	f104 0310 	add.w	r3, r4, #16
 80011ce:	2244      	movs	r2, #68	@ 0x44
 80011d0:	4619      	mov	r1, r3
 80011d2:	f00f ff01 	bl	8010fd8 <memcpy>
 80011d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011da:	f7ff fa03 	bl	80005e4 <CS43_Init>
  CS43_SetVolume(ses_seviye);//0-255 Ses -> ses_seviye
 80011de:	4b6e      	ldr	r3, [pc, #440]	@ (8001398 <main+0x338>)
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fb4d 	bl	8000884 <CS43_SetVolume>
  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 80011ea:	2003      	movs	r0, #3
 80011ec:	f7ff fb00 	bl	80007f0 <CS43_Enable_RightLeft>

  HAL_Delay(50);
 80011f0:	2032      	movs	r0, #50	@ 0x32
 80011f2:	f001 f883 	bl	80022fc <HAL_Delay>
  sprintf(ses_seviye_c, "%u", ses_seviye);
 80011f6:	4b68      	ldr	r3, [pc, #416]	@ (8001398 <main+0x338>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	461a      	mov	r2, r3
 80011fc:	4967      	ldr	r1, [pc, #412]	@ (800139c <main+0x33c>)
 80011fe:	4868      	ldr	r0, [pc, #416]	@ (80013a0 <main+0x340>)
 8001200:	f00f fe7e 	bl	8010f00 <siprintf>
	NextionSetText(&nextion, &nexText5, ses_seviye_c);
 8001204:	4a66      	ldr	r2, [pc, #408]	@ (80013a0 <main+0x340>)
 8001206:	4953      	ldr	r1, [pc, #332]	@ (8001354 <main+0x2f4>)
 8001208:	4848      	ldr	r0, [pc, #288]	@ (800132c <main+0x2cc>)
 800120a:	f7ff fd43 	bl	8000c94 <NextionSetText>

  audioI2S_setHandle(&hi2s3);
 800120e:	4865      	ldr	r0, [pc, #404]	@ (80013a4 <main+0x344>)
 8001210:	f7ff fe6c 	bl	8000eec <audioI2S_setHandle>

  bool isSdCardMounted=0;
 8001214:	2300      	movs	r3, #0
 8001216:	71fb      	strb	r3, [r7, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001218:	f00f fac2 	bl	80107a0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */


	if(yazi_sayac == 1){
 800121c:	4b62      	ldr	r3, [pc, #392]	@ (80013a8 <main+0x348>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d104      	bne.n	800122e <main+0x1ce>
	    NextionSetText(&nextion, &nexText1, "MP3");
 8001224:	4a61      	ldr	r2, [pc, #388]	@ (80013ac <main+0x34c>)
 8001226:	4943      	ldr	r1, [pc, #268]	@ (8001334 <main+0x2d4>)
 8001228:	4840      	ldr	r0, [pc, #256]	@ (800132c <main+0x2cc>)
 800122a:	f7ff fd33 	bl	8000c94 <NextionSetText>
	}
	if(yazi_sayac == 2){
 800122e:	4b5e      	ldr	r3, [pc, #376]	@ (80013a8 <main+0x348>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b02      	cmp	r3, #2
 8001234:	d104      	bne.n	8001240 <main+0x1e0>
	    NextionSetText(&nextion, &nexText1, "UYGAR");
 8001236:	4a5e      	ldr	r2, [pc, #376]	@ (80013b0 <main+0x350>)
 8001238:	493e      	ldr	r1, [pc, #248]	@ (8001334 <main+0x2d4>)
 800123a:	483c      	ldr	r0, [pc, #240]	@ (800132c <main+0x2cc>)
 800123c:	f7ff fd2a 	bl	8000c94 <NextionSetText>
	}
	if(yazi_sayac == 3){
 8001240:	4b59      	ldr	r3, [pc, #356]	@ (80013a8 <main+0x348>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b03      	cmp	r3, #3
 8001246:	d104      	bne.n	8001252 <main+0x1f2>
		NextionSetText(&nextion, &nexText1, "BERAT");
 8001248:	4a5a      	ldr	r2, [pc, #360]	@ (80013b4 <main+0x354>)
 800124a:	493a      	ldr	r1, [pc, #232]	@ (8001334 <main+0x2d4>)
 800124c:	4837      	ldr	r0, [pc, #220]	@ (800132c <main+0x2cc>)
 800124e:	f7ff fd21 	bl	8000c94 <NextionSetText>
	}

    NextionGetVal(&nextion, &basla, &basla_durum);
 8001252:	4a59      	ldr	r2, [pc, #356]	@ (80013b8 <main+0x358>)
 8001254:	4941      	ldr	r1, [pc, #260]	@ (800135c <main+0x2fc>)
 8001256:	4835      	ldr	r0, [pc, #212]	@ (800132c <main+0x2cc>)
 8001258:	f7ff fd40 	bl	8000cdc <NextionGetVal>
    NextionGetVal(&nextion, &dur, &dur_durum);
 800125c:	4a57      	ldr	r2, [pc, #348]	@ (80013bc <main+0x35c>)
 800125e:	4941      	ldr	r1, [pc, #260]	@ (8001364 <main+0x304>)
 8001260:	4832      	ldr	r0, [pc, #200]	@ (800132c <main+0x2cc>)
 8001262:	f7ff fd3b 	bl	8000cdc <NextionGetVal>
    NextionGetVal(&nextion, &ileri, &ileri_durum);
 8001266:	4a56      	ldr	r2, [pc, #344]	@ (80013c0 <main+0x360>)
 8001268:	4940      	ldr	r1, [pc, #256]	@ (800136c <main+0x30c>)
 800126a:	4830      	ldr	r0, [pc, #192]	@ (800132c <main+0x2cc>)
 800126c:	f7ff fd36 	bl	8000cdc <NextionGetVal>
    NextionGetVal(&nextion, &geri, &geri_durum);
 8001270:	4a54      	ldr	r2, [pc, #336]	@ (80013c4 <main+0x364>)
 8001272:	4940      	ldr	r1, [pc, #256]	@ (8001374 <main+0x314>)
 8001274:	482d      	ldr	r0, [pc, #180]	@ (800132c <main+0x2cc>)
 8001276:	f7ff fd31 	bl	8000cdc <NextionGetVal>
    NextionGetVal(&nextion, &ses_azalt, &ses_azalt_durum);
 800127a:	4a53      	ldr	r2, [pc, #332]	@ (80013c8 <main+0x368>)
 800127c:	493f      	ldr	r1, [pc, #252]	@ (800137c <main+0x31c>)
 800127e:	482b      	ldr	r0, [pc, #172]	@ (800132c <main+0x2cc>)
 8001280:	f7ff fd2c 	bl	8000cdc <NextionGetVal>
    NextionGetVal(&nextion, &ses_artir, &ses_artir_durum);
 8001284:	4a51      	ldr	r2, [pc, #324]	@ (80013cc <main+0x36c>)
 8001286:	493f      	ldr	r1, [pc, #252]	@ (8001384 <main+0x324>)
 8001288:	4828      	ldr	r0, [pc, #160]	@ (800132c <main+0x2cc>)
 800128a:	f7ff fd27 	bl	8000cdc <NextionGetVal>
    NextionGetVal(&nextion, &devam, &devam_durum);
 800128e:	4a50      	ldr	r2, [pc, #320]	@ (80013d0 <main+0x370>)
 8001290:	493e      	ldr	r1, [pc, #248]	@ (800138c <main+0x32c>)
 8001292:	4826      	ldr	r0, [pc, #152]	@ (800132c <main+0x2cc>)
 8001294:	f7ff fd22 	bl	8000cdc <NextionGetVal>

    if(ileri_durum == 1){
 8001298:	4b49      	ldr	r3, [pc, #292]	@ (80013c0 <main+0x360>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d114      	bne.n	80012ca <main+0x26a>
	    sarki_numarasi++;
 80012a0:	4b4c      	ldr	r3, [pc, #304]	@ (80013d4 <main+0x374>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	3301      	adds	r3, #1
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	4b4a      	ldr	r3, [pc, #296]	@ (80013d4 <main+0x374>)
 80012aa:	701a      	strb	r2, [r3, #0]
	    sprintf(sarki_numarasi_c, "%u", sarki_numarasi);
 80012ac:	4b49      	ldr	r3, [pc, #292]	@ (80013d4 <main+0x374>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	493a      	ldr	r1, [pc, #232]	@ (800139c <main+0x33c>)
 80012b4:	4848      	ldr	r0, [pc, #288]	@ (80013d8 <main+0x378>)
 80012b6:	f00f fe23 	bl	8010f00 <siprintf>
	    NextionSetText(&nextion, &nexText2, sarki_numarasi_c);
 80012ba:	4a47      	ldr	r2, [pc, #284]	@ (80013d8 <main+0x378>)
 80012bc:	491f      	ldr	r1, [pc, #124]	@ (800133c <main+0x2dc>)
 80012be:	481b      	ldr	r0, [pc, #108]	@ (800132c <main+0x2cc>)
 80012c0:	f7ff fce8 	bl	8000c94 <NextionSetText>
	    test_5 = true;
 80012c4:	4b45      	ldr	r3, [pc, #276]	@ (80013dc <main+0x37c>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
    }

    if(geri_durum == 1){
 80012ca:	4b3e      	ldr	r3, [pc, #248]	@ (80013c4 <main+0x364>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d111      	bne.n	80012f6 <main+0x296>
	    sarki_numarasi--;
 80012d2:	4b40      	ldr	r3, [pc, #256]	@ (80013d4 <main+0x374>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4b3e      	ldr	r3, [pc, #248]	@ (80013d4 <main+0x374>)
 80012dc:	701a      	strb	r2, [r3, #0]
	    sprintf(sarki_numarasi_c, "%u", sarki_numarasi);
 80012de:	4b3d      	ldr	r3, [pc, #244]	@ (80013d4 <main+0x374>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	492d      	ldr	r1, [pc, #180]	@ (800139c <main+0x33c>)
 80012e6:	483c      	ldr	r0, [pc, #240]	@ (80013d8 <main+0x378>)
 80012e8:	f00f fe0a 	bl	8010f00 <siprintf>
	    NextionSetText(&nextion, &nexText2, sarki_numarasi_c);
 80012ec:	4a3a      	ldr	r2, [pc, #232]	@ (80013d8 <main+0x378>)
 80012ee:	4913      	ldr	r1, [pc, #76]	@ (800133c <main+0x2dc>)
 80012f0:	480e      	ldr	r0, [pc, #56]	@ (800132c <main+0x2cc>)
 80012f2:	f7ff fccf 	bl	8000c94 <NextionSetText>

    }


    if(ses_artir_durum == 1){
 80012f6:	4b35      	ldr	r3, [pc, #212]	@ (80013cc <main+0x36c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d17c      	bne.n	80013f8 <main+0x398>
 	   ses_seviye = ses_seviye + 20;
 80012fe:	4b26      	ldr	r3, [pc, #152]	@ (8001398 <main+0x338>)
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	3314      	adds	r3, #20
 8001304:	b29a      	uxth	r2, r3
 8001306:	4b24      	ldr	r3, [pc, #144]	@ (8001398 <main+0x338>)
 8001308:	801a      	strh	r2, [r3, #0]
 	   CS43_SetVolume(ses_seviye);//0-255 Ses
 800130a:	4b23      	ldr	r3, [pc, #140]	@ (8001398 <main+0x338>)
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fab7 	bl	8000884 <CS43_SetVolume>

	    sprintf(ses_seviye_c, "%u", ses_seviye);
 8001316:	4b20      	ldr	r3, [pc, #128]	@ (8001398 <main+0x338>)
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	491f      	ldr	r1, [pc, #124]	@ (800139c <main+0x33c>)
 800131e:	4820      	ldr	r0, [pc, #128]	@ (80013a0 <main+0x340>)
 8001320:	f00f fdee 	bl	8010f00 <siprintf>
 8001324:	e05c      	b.n	80013e0 <main+0x380>
 8001326:	bf00      	nop
 8001328:	20000238 	.word	0x20000238
 800132c:	20000280 	.word	0x20000280
 8001330:	08011740 	.word	0x08011740
 8001334:	20000420 	.word	0x20000420
 8001338:	08011744 	.word	0x08011744
 800133c:	20000430 	.word	0x20000430
 8001340:	08011748 	.word	0x08011748
 8001344:	20000440 	.word	0x20000440
 8001348:	0801174c 	.word	0x0801174c
 800134c:	20000450 	.word	0x20000450
 8001350:	08011750 	.word	0x08011750
 8001354:	20000460 	.word	0x20000460
 8001358:	08011754 	.word	0x08011754
 800135c:	200003b0 	.word	0x200003b0
 8001360:	0801175c 	.word	0x0801175c
 8001364:	200003c0 	.word	0x200003c0
 8001368:	08011760 	.word	0x08011760
 800136c:	200003d0 	.word	0x200003d0
 8001370:	08011768 	.word	0x08011768
 8001374:	200003e0 	.word	0x200003e0
 8001378:	08011770 	.word	0x08011770
 800137c:	200003f0 	.word	0x200003f0
 8001380:	0801177c 	.word	0x0801177c
 8001384:	20000400 	.word	0x20000400
 8001388:	08011788 	.word	0x08011788
 800138c:	20000410 	.word	0x20000410
 8001390:	200001f0 	.word	0x200001f0
 8001394:	200000f4 	.word	0x200000f4
 8001398:	20000002 	.word	0x20000002
 800139c:	08011790 	.word	0x08011790
 80013a0:	200004a0 	.word	0x200004a0
 80013a4:	20000148 	.word	0x20000148
 80013a8:	20000494 	.word	0x20000494
 80013ac:	08011794 	.word	0x08011794
 80013b0:	08011798 	.word	0x08011798
 80013b4:	080117a0 	.word	0x080117a0
 80013b8:	20000470 	.word	0x20000470
 80013bc:	20000474 	.word	0x20000474
 80013c0:	20000478 	.word	0x20000478
 80013c4:	2000047c 	.word	0x2000047c
 80013c8:	20000480 	.word	0x20000480
 80013cc:	20000484 	.word	0x20000484
 80013d0:	20000488 	.word	0x20000488
 80013d4:	20000000 	.word	0x20000000
 80013d8:	20000498 	.word	0x20000498
 80013dc:	2000048f 	.word	0x2000048f
	    NextionSetText(&nextion, &nexText5, ses_seviye_c);
 80013e0:	4aa7      	ldr	r2, [pc, #668]	@ (8001680 <main+0x620>)
 80013e2:	49a8      	ldr	r1, [pc, #672]	@ (8001684 <main+0x624>)
 80013e4:	48a8      	ldr	r0, [pc, #672]	@ (8001688 <main+0x628>)
 80013e6:	f7ff fc55 	bl	8000c94 <NextionSetText>

 	   if(ses_seviye > 245){
 80013ea:	4ba8      	ldr	r3, [pc, #672]	@ (800168c <main+0x62c>)
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	2bf5      	cmp	r3, #245	@ 0xf5
 80013f0:	d902      	bls.n	80013f8 <main+0x398>
 		ses_seviye=150;
 80013f2:	4ba6      	ldr	r3, [pc, #664]	@ (800168c <main+0x62c>)
 80013f4:	2296      	movs	r2, #150	@ 0x96
 80013f6:	801a      	strh	r2, [r3, #0]
 	   }
    }

    if(ses_azalt_durum == 1){
 80013f8:	4ba5      	ldr	r3, [pc, #660]	@ (8001690 <main+0x630>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d11e      	bne.n	800143e <main+0x3de>
 	   ses_seviye = ses_seviye - 20;
 8001400:	4ba2      	ldr	r3, [pc, #648]	@ (800168c <main+0x62c>)
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	3b14      	subs	r3, #20
 8001406:	b29a      	uxth	r2, r3
 8001408:	4ba0      	ldr	r3, [pc, #640]	@ (800168c <main+0x62c>)
 800140a:	801a      	strh	r2, [r3, #0]
 	   CS43_SetVolume(ses_seviye);//0-255 Ses
 800140c:	4b9f      	ldr	r3, [pc, #636]	@ (800168c <main+0x62c>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fa36 	bl	8000884 <CS43_SetVolume>

	    sprintf(ses_seviye_c, "%u", ses_seviye);
 8001418:	4b9c      	ldr	r3, [pc, #624]	@ (800168c <main+0x62c>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	499d      	ldr	r1, [pc, #628]	@ (8001694 <main+0x634>)
 8001420:	4897      	ldr	r0, [pc, #604]	@ (8001680 <main+0x620>)
 8001422:	f00f fd6d 	bl	8010f00 <siprintf>
	    NextionSetText(&nextion, &nexText5, ses_seviye_c);
 8001426:	4a96      	ldr	r2, [pc, #600]	@ (8001680 <main+0x620>)
 8001428:	4996      	ldr	r1, [pc, #600]	@ (8001684 <main+0x624>)
 800142a:	4897      	ldr	r0, [pc, #604]	@ (8001688 <main+0x628>)
 800142c:	f7ff fc32 	bl	8000c94 <NextionSetText>

 	   if(ses_seviye < 50){
 8001430:	4b96      	ldr	r3, [pc, #600]	@ (800168c <main+0x62c>)
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	2b31      	cmp	r3, #49	@ 0x31
 8001436:	d802      	bhi.n	800143e <main+0x3de>
 		ses_seviye=150;
 8001438:	4b94      	ldr	r3, [pc, #592]	@ (800168c <main+0x62c>)
 800143a:	2296      	movs	r2, #150	@ 0x96
 800143c:	801a      	strh	r2, [r3, #0]
 	   }
    }

    if(devam_durum == true){
 800143e:	4b96      	ldr	r3, [pc, #600]	@ (8001698 <main+0x638>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d105      	bne.n	8001452 <main+0x3f2>
    	test_6 = true;
 8001446:	4b95      	ldr	r3, [pc, #596]	@ (800169c <main+0x63c>)
 8001448:	2201      	movs	r2, #1
 800144a:	701a      	strb	r2, [r3, #0]
    	devam_durum_b = true;
 800144c:	4b94      	ldr	r3, [pc, #592]	@ (80016a0 <main+0x640>)
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]





     if(Appli_state == APPLICATION_START)
 8001452:	4b94      	ldr	r3, [pc, #592]	@ (80016a4 <main+0x644>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d109      	bne.n	800146e <main+0x40e>
         {
    	 test_1 = true;
 800145a:	4b93      	ldr	r3, [pc, #588]	@ (80016a8 <main+0x648>)
 800145c:	2201      	movs	r2, #1
 800145e:	701a      	strb	r2, [r3, #0]
           HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001460:	2201      	movs	r2, #1
 8001462:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001466:	4891      	ldr	r0, [pc, #580]	@ (80016ac <main+0x64c>)
 8001468:	f001 fe34 	bl	80030d4 <HAL_GPIO_WritePin>
 800146c:	e010      	b.n	8001490 <main+0x430>
         }
         else if(Appli_state == APPLICATION_DISCONNECT)
 800146e:	4b8d      	ldr	r3, [pc, #564]	@ (80016a4 <main+0x644>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b03      	cmp	r3, #3
 8001474:	d10c      	bne.n	8001490 <main+0x430>
         {
           HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800147c:	488b      	ldr	r0, [pc, #556]	@ (80016ac <main+0x64c>)
 800147e:	f001 fe29 	bl	80030d4 <HAL_GPIO_WritePin>
           f_mount(NULL, (TCHAR const*)"", 0);
 8001482:	2200      	movs	r2, #0
 8001484:	498a      	ldr	r1, [pc, #552]	@ (80016b0 <main+0x650>)
 8001486:	2000      	movs	r0, #0
 8001488:	f00e fb18 	bl	800fabc <f_mount>
           isSdCardMounted = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	71fb      	strb	r3, [r7, #7]
         }



     if(Appli_state == APPLICATION_READY)
 8001490:	4b84      	ldr	r3, [pc, #528]	@ (80016a4 <main+0x644>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b02      	cmp	r3, #2
 8001496:	f47f aebf 	bne.w	8001218 <main+0x1b8>
     {
    	 test_2 = true;
 800149a:	4b86      	ldr	r3, [pc, #536]	@ (80016b4 <main+0x654>)
 800149c:	2201      	movs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]

    	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80014a0:	2201      	movs	r2, #1
 80014a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014a6:	4881      	ldr	r0, [pc, #516]	@ (80016ac <main+0x64c>)
 80014a8:	f001 fe14 	bl	80030d4 <HAL_GPIO_WritePin>

     	if(!isSdCardMounted)
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	f083 0301 	eor.w	r3, r3, #1
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d006      	beq.n	80014c6 <main+0x466>
     	      {
     	        f_mount(&USBHFatFS, (const TCHAR*)USBHPath, 0);
 80014b8:	2200      	movs	r2, #0
 80014ba:	497f      	ldr	r1, [pc, #508]	@ (80016b8 <main+0x658>)
 80014bc:	487f      	ldr	r0, [pc, #508]	@ (80016bc <main+0x65c>)
 80014be:	f00e fafd 	bl	800fabc <f_mount>
     	        isSdCardMounted = 1;
 80014c2:	2301      	movs	r3, #1
 80014c4:	71fb      	strb	r3, [r7, #7]
     	      }

       	if(basla_durum == 1)
 80014c6:	4b7e      	ldr	r3, [pc, #504]	@ (80016c0 <main+0x660>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	f47f aea4 	bne.w	8001218 <main+0x1b8>
       	{

           	HAL_Delay(500);
 80014d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014d4:	f000 ff12 	bl	80022fc <HAL_Delay>
           	test_3 = true;
 80014d8:	4b7a      	ldr	r3, [pc, #488]	@ (80016c4 <main+0x664>)
 80014da:	2201      	movs	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]

           	if(pause_state == true){
 80014de:	4b7a      	ldr	r3, [pc, #488]	@ (80016c8 <main+0x668>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00d      	beq.n	8001502 <main+0x4a2>
                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80014e6:	2201      	movs	r2, #1
 80014e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80014ec:	486f      	ldr	r0, [pc, #444]	@ (80016ac <main+0x64c>)
 80014ee:	f001 fdf1 	bl	80030d4 <HAL_GPIO_WritePin>
                wavPlayer_pause();
 80014f2:	f000 fe37 	bl	8002164 <wavPlayer_pause>
                pause_state = false;
 80014f6:	4b74      	ldr	r3, [pc, #464]	@ (80016c8 <main+0x668>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
                test_7 = true;
 80014fc:	4b73      	ldr	r3, [pc, #460]	@ (80016cc <main+0x66c>)
 80014fe:	2201      	movs	r2, #1
 8001500:	701a      	strb	r2, [r3, #0]
           	}

           	if(devam_durum_b == true){
 8001502:	4b67      	ldr	r3, [pc, #412]	@ (80016a0 <main+0x640>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 80b0 	beq.w	800166c <main+0x60c>
                HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800150c:	2200      	movs	r2, #0
 800150e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001512:	4866      	ldr	r0, [pc, #408]	@ (80016ac <main+0x64c>)
 8001514:	f001 fdde 	bl	80030d4 <HAL_GPIO_WritePin>
              	  test_8 = true;
 8001518:	4b6d      	ldr	r3, [pc, #436]	@ (80016d0 <main+0x670>)
 800151a:	2201      	movs	r2, #1
 800151c:	701a      	strb	r2, [r3, #0]
                  wavPlayer_stop();
 800151e:	f000 fe15 	bl	800214c <wavPlayer_stop>
                  HAL_Delay(50);
 8001522:	2032      	movs	r0, #50	@ 0x32
 8001524:	f000 feea 	bl	80022fc <HAL_Delay>
             		if(sarki_numarasi == 1) {
 8001528:	4b6a      	ldr	r3, [pc, #424]	@ (80016d4 <main+0x674>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d107      	bne.n	8001540 <main+0x4e0>
             			wavPlayer_fileSelect(WAV_FILE1);
 8001530:	4869      	ldr	r0, [pc, #420]	@ (80016d8 <main+0x678>)
 8001532:	f000 fd3d 	bl	8001fb0 <wavPlayer_fileSelect>
             	   		NextionSetText(&nextion, &nexText4, WAV_FILE1);
 8001536:	4a68      	ldr	r2, [pc, #416]	@ (80016d8 <main+0x678>)
 8001538:	4968      	ldr	r1, [pc, #416]	@ (80016dc <main+0x67c>)
 800153a:	4853      	ldr	r0, [pc, #332]	@ (8001688 <main+0x628>)
 800153c:	f7ff fbaa 	bl	8000c94 <NextionSetText>
             		}
             		HAL_Delay(50);
 8001540:	2032      	movs	r0, #50	@ 0x32
 8001542:	f000 fedb 	bl	80022fc <HAL_Delay>
             		if(sarki_numarasi == 2) {
 8001546:	4b63      	ldr	r3, [pc, #396]	@ (80016d4 <main+0x674>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d107      	bne.n	800155e <main+0x4fe>
             			wavPlayer_fileSelect(WAV_FILE2);
 800154e:	4864      	ldr	r0, [pc, #400]	@ (80016e0 <main+0x680>)
 8001550:	f000 fd2e 	bl	8001fb0 <wavPlayer_fileSelect>
             			NextionSetText(&nextion, &nexText4, WAV_FILE2);
 8001554:	4a62      	ldr	r2, [pc, #392]	@ (80016e0 <main+0x680>)
 8001556:	4961      	ldr	r1, [pc, #388]	@ (80016dc <main+0x67c>)
 8001558:	484b      	ldr	r0, [pc, #300]	@ (8001688 <main+0x628>)
 800155a:	f7ff fb9b 	bl	8000c94 <NextionSetText>
             		}
             		HAL_Delay(50);
 800155e:	2032      	movs	r0, #50	@ 0x32
 8001560:	f000 fecc 	bl	80022fc <HAL_Delay>
             		if(sarki_numarasi == 3) {
 8001564:	4b5b      	ldr	r3, [pc, #364]	@ (80016d4 <main+0x674>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b03      	cmp	r3, #3
 800156a:	d107      	bne.n	800157c <main+0x51c>
             			wavPlayer_fileSelect(WAV_FILE3);
 800156c:	485d      	ldr	r0, [pc, #372]	@ (80016e4 <main+0x684>)
 800156e:	f000 fd1f 	bl	8001fb0 <wavPlayer_fileSelect>
             			NextionSetText(&nextion, &nexText4, WAV_FILE3);
 8001572:	4a5c      	ldr	r2, [pc, #368]	@ (80016e4 <main+0x684>)
 8001574:	4959      	ldr	r1, [pc, #356]	@ (80016dc <main+0x67c>)
 8001576:	4844      	ldr	r0, [pc, #272]	@ (8001688 <main+0x628>)
 8001578:	f7ff fb8c 	bl	8000c94 <NextionSetText>
             		}
             		HAL_Delay(50);
 800157c:	2032      	movs	r0, #50	@ 0x32
 800157e:	f000 febd 	bl	80022fc <HAL_Delay>
             		if(sarki_numarasi == 4) {
 8001582:	4b54      	ldr	r3, [pc, #336]	@ (80016d4 <main+0x674>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b04      	cmp	r3, #4
 8001588:	d107      	bne.n	800159a <main+0x53a>
             			wavPlayer_fileSelect(WAV_FILE4);
 800158a:	4857      	ldr	r0, [pc, #348]	@ (80016e8 <main+0x688>)
 800158c:	f000 fd10 	bl	8001fb0 <wavPlayer_fileSelect>
             			NextionSetText(&nextion, &nexText4, WAV_FILE4);
 8001590:	4a55      	ldr	r2, [pc, #340]	@ (80016e8 <main+0x688>)
 8001592:	4952      	ldr	r1, [pc, #328]	@ (80016dc <main+0x67c>)
 8001594:	483c      	ldr	r0, [pc, #240]	@ (8001688 <main+0x628>)
 8001596:	f7ff fb7d 	bl	8000c94 <NextionSetText>
             		}
             		HAL_Delay(50);
 800159a:	2032      	movs	r0, #50	@ 0x32
 800159c:	f000 feae 	bl	80022fc <HAL_Delay>
             		if(sarki_numarasi == 5) {
 80015a0:	4b4c      	ldr	r3, [pc, #304]	@ (80016d4 <main+0x674>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b05      	cmp	r3, #5
 80015a6:	d107      	bne.n	80015b8 <main+0x558>
             			wavPlayer_fileSelect(WAV_FILE5);
 80015a8:	4850      	ldr	r0, [pc, #320]	@ (80016ec <main+0x68c>)
 80015aa:	f000 fd01 	bl	8001fb0 <wavPlayer_fileSelect>
             			NextionSetText(&nextion, &nexText4, WAV_FILE5);
 80015ae:	4a4f      	ldr	r2, [pc, #316]	@ (80016ec <main+0x68c>)
 80015b0:	494a      	ldr	r1, [pc, #296]	@ (80016dc <main+0x67c>)
 80015b2:	4835      	ldr	r0, [pc, #212]	@ (8001688 <main+0x628>)
 80015b4:	f7ff fb6e 	bl	8000c94 <NextionSetText>
             		}
             		HAL_Delay(50);
 80015b8:	2032      	movs	r0, #50	@ 0x32
 80015ba:	f000 fe9f 	bl	80022fc <HAL_Delay>
             		if(sarki_numarasi == 6) {
 80015be:	4b45      	ldr	r3, [pc, #276]	@ (80016d4 <main+0x674>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b06      	cmp	r3, #6
 80015c4:	d107      	bne.n	80015d6 <main+0x576>
             			wavPlayer_fileSelect(WAV_FILE6);
 80015c6:	484a      	ldr	r0, [pc, #296]	@ (80016f0 <main+0x690>)
 80015c8:	f000 fcf2 	bl	8001fb0 <wavPlayer_fileSelect>
             			NextionSetText(&nextion, &nexText4, WAV_FILE6);
 80015cc:	4a48      	ldr	r2, [pc, #288]	@ (80016f0 <main+0x690>)
 80015ce:	4943      	ldr	r1, [pc, #268]	@ (80016dc <main+0x67c>)
 80015d0:	482d      	ldr	r0, [pc, #180]	@ (8001688 <main+0x628>)
 80015d2:	f7ff fb5f 	bl	8000c94 <NextionSetText>
             		}
             		if(sarki_numarasi == 7) {
 80015d6:	4b3f      	ldr	r3, [pc, #252]	@ (80016d4 <main+0x674>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b07      	cmp	r3, #7
 80015dc:	d107      	bne.n	80015ee <main+0x58e>
             			wavPlayer_fileSelect(WAV_FILE7);
 80015de:	4845      	ldr	r0, [pc, #276]	@ (80016f4 <main+0x694>)
 80015e0:	f000 fce6 	bl	8001fb0 <wavPlayer_fileSelect>
             			NextionSetText(&nextion, &nexText4, WAV_FILE7);
 80015e4:	4a43      	ldr	r2, [pc, #268]	@ (80016f4 <main+0x694>)
 80015e6:	493d      	ldr	r1, [pc, #244]	@ (80016dc <main+0x67c>)
 80015e8:	4827      	ldr	r0, [pc, #156]	@ (8001688 <main+0x628>)
 80015ea:	f7ff fb53 	bl	8000c94 <NextionSetText>
             		}
             		if(sarki_numarasi == 8) {
 80015ee:	4b39      	ldr	r3, [pc, #228]	@ (80016d4 <main+0x674>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d107      	bne.n	8001606 <main+0x5a6>
             			wavPlayer_fileSelect(WAV_FILE8);
 80015f6:	4840      	ldr	r0, [pc, #256]	@ (80016f8 <main+0x698>)
 80015f8:	f000 fcda 	bl	8001fb0 <wavPlayer_fileSelect>
             			NextionSetText(&nextion, &nexText4, WAV_FILE8);
 80015fc:	4a3e      	ldr	r2, [pc, #248]	@ (80016f8 <main+0x698>)
 80015fe:	4937      	ldr	r1, [pc, #220]	@ (80016dc <main+0x67c>)
 8001600:	4821      	ldr	r0, [pc, #132]	@ (8001688 <main+0x628>)
 8001602:	f7ff fb47 	bl	8000c94 <NextionSetText>
             		}
             		if(sarki_numarasi == 9) {
 8001606:	4b33      	ldr	r3, [pc, #204]	@ (80016d4 <main+0x674>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b09      	cmp	r3, #9
 800160c:	d107      	bne.n	800161e <main+0x5be>
             			wavPlayer_fileSelect(WAV_FILE9);
 800160e:	483b      	ldr	r0, [pc, #236]	@ (80016fc <main+0x69c>)
 8001610:	f000 fcce 	bl	8001fb0 <wavPlayer_fileSelect>
             			NextionSetText(&nextion, &nexText4, WAV_FILE9);
 8001614:	4a39      	ldr	r2, [pc, #228]	@ (80016fc <main+0x69c>)
 8001616:	4931      	ldr	r1, [pc, #196]	@ (80016dc <main+0x67c>)
 8001618:	481b      	ldr	r0, [pc, #108]	@ (8001688 <main+0x628>)
 800161a:	f7ff fb3b 	bl	8000c94 <NextionSetText>
             		}
             		if(sarki_numarasi == 10) {
 800161e:	4b2d      	ldr	r3, [pc, #180]	@ (80016d4 <main+0x674>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b0a      	cmp	r3, #10
 8001624:	d107      	bne.n	8001636 <main+0x5d6>
             			wavPlayer_fileSelect(WAV_FILE10);
 8001626:	4836      	ldr	r0, [pc, #216]	@ (8001700 <main+0x6a0>)
 8001628:	f000 fcc2 	bl	8001fb0 <wavPlayer_fileSelect>
             			NextionSetText(&nextion, &nexText4, WAV_FILE10);
 800162c:	4a34      	ldr	r2, [pc, #208]	@ (8001700 <main+0x6a0>)
 800162e:	492b      	ldr	r1, [pc, #172]	@ (80016dc <main+0x67c>)
 8001630:	4815      	ldr	r0, [pc, #84]	@ (8001688 <main+0x628>)
 8001632:	f7ff fb2f 	bl	8000c94 <NextionSetText>
             		}
                      wavPlayer_play();
 8001636:	f000 fce5 	bl	8002004 <wavPlayer_play>

              	  wavPlayer_resume();
 800163a:	f000 fd99 	bl	8002170 <wavPlayer_resume>
              	  pause_state = false;
 800163e:	4b22      	ldr	r3, [pc, #136]	@ (80016c8 <main+0x668>)
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
              	devam_durum_b = false;
 8001644:	4b16      	ldr	r3, [pc, #88]	@ (80016a0 <main+0x640>)
 8001646:	2200      	movs	r2, #0
 8001648:	701a      	strb	r2, [r3, #0]
           	}

       		while(!wavPlayer_isFinished()){
 800164a:	e00f      	b.n	800166c <main+0x60c>

       			test_9 = true;
 800164c:	4b2d      	ldr	r3, [pc, #180]	@ (8001704 <main+0x6a4>)
 800164e:	2201      	movs	r2, #1
 8001650:	701a      	strb	r2, [r3, #0]
       		          wavPlayer_process();
 8001652:	f000 fd09 	bl	8002068 <wavPlayer_process>

       		          if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8001656:	2101      	movs	r1, #1
 8001658:	482b      	ldr	r0, [pc, #172]	@ (8001708 <main+0x6a8>)
 800165a:	f001 fd23 	bl	80030a4 <HAL_GPIO_ReadPin>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <main+0x60c>
       		          {
       		        	  pause_state = true;
 8001664:	4b18      	ldr	r3, [pc, #96]	@ (80016c8 <main+0x668>)
 8001666:	2201      	movs	r2, #1
 8001668:	701a      	strb	r2, [r3, #0]
       		        	  break;
 800166a:	e007      	b.n	800167c <main+0x61c>
       		while(!wavPlayer_isFinished()){
 800166c:	f000 fd86 	bl	800217c <wavPlayer_isFinished>
 8001670:	4603      	mov	r3, r0
 8001672:	f083 0301 	eor.w	r3, r3, #1
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1e7      	bne.n	800164c <main+0x5ec>
    MX_USB_HOST_Process();
 800167c:	e5cc      	b.n	8001218 <main+0x1b8>
 800167e:	bf00      	nop
 8001680:	200004a0 	.word	0x200004a0
 8001684:	20000460 	.word	0x20000460
 8001688:	20000280 	.word	0x20000280
 800168c:	20000002 	.word	0x20000002
 8001690:	20000480 	.word	0x20000480
 8001694:	08011790 	.word	0x08011790
 8001698:	20000488 	.word	0x20000488
 800169c:	20000490 	.word	0x20000490
 80016a0:	200004a6 	.word	0x200004a6
 80016a4:	20001d38 	.word	0x20001d38
 80016a8:	2000048c 	.word	0x2000048c
 80016ac:	40020c00 	.word	0x40020c00
 80016b0:	080117a8 	.word	0x080117a8
 80016b4:	2000048d 	.word	0x2000048d
 80016b8:	200016f8 	.word	0x200016f8
 80016bc:	200016fc 	.word	0x200016fc
 80016c0:	20000470 	.word	0x20000470
 80016c4:	2000048e 	.word	0x2000048e
 80016c8:	200004a5 	.word	0x200004a5
 80016cc:	20000491 	.word	0x20000491
 80016d0:	20000492 	.word	0x20000492
 80016d4:	20000000 	.word	0x20000000
 80016d8:	080117ac 	.word	0x080117ac
 80016dc:	20000450 	.word	0x20000450
 80016e0:	080117b8 	.word	0x080117b8
 80016e4:	080117c4 	.word	0x080117c4
 80016e8:	080117d0 	.word	0x080117d0
 80016ec:	080117e0 	.word	0x080117e0
 80016f0:	080117f0 	.word	0x080117f0
 80016f4:	08011800 	.word	0x08011800
 80016f8:	0801180c 	.word	0x0801180c
 80016fc:	08011818 	.word	0x08011818
 8001700:	0801182c 	.word	0x0801182c
 8001704:	20000493 	.word	0x20000493
 8001708:	40020000 	.word	0x40020000

0800170c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b094      	sub	sp, #80	@ 0x50
 8001710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001712:	f107 0320 	add.w	r3, r7, #32
 8001716:	2230      	movs	r2, #48	@ 0x30
 8001718:	2100      	movs	r1, #0
 800171a:	4618      	mov	r0, r3
 800171c:	f00f fc10 	bl	8010f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001720:	f107 030c 	add.w	r3, r7, #12
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	4b28      	ldr	r3, [pc, #160]	@ (80017d8 <SystemClock_Config+0xcc>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001738:	4a27      	ldr	r2, [pc, #156]	@ (80017d8 <SystemClock_Config+0xcc>)
 800173a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800173e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001740:	4b25      	ldr	r3, [pc, #148]	@ (80017d8 <SystemClock_Config+0xcc>)
 8001742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001744:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800174c:	2300      	movs	r3, #0
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	4b22      	ldr	r3, [pc, #136]	@ (80017dc <SystemClock_Config+0xd0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a21      	ldr	r2, [pc, #132]	@ (80017dc <SystemClock_Config+0xd0>)
 8001756:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	4b1f      	ldr	r3, [pc, #124]	@ (80017dc <SystemClock_Config+0xd0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001764:	607b      	str	r3, [r7, #4]
 8001766:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001768:	2301      	movs	r3, #1
 800176a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800176c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001770:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001772:	2302      	movs	r3, #2
 8001774:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001776:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800177a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800177c:	2308      	movs	r3, #8
 800177e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001780:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001784:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001786:	2302      	movs	r3, #2
 8001788:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800178a:	2307      	movs	r3, #7
 800178c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800178e:	f107 0320 	add.w	r3, r7, #32
 8001792:	4618      	mov	r0, r3
 8001794:	f005 fe68 	bl	8007468 <HAL_RCC_OscConfig>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800179e:	f000 f9a9 	bl	8001af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017a2:	230f      	movs	r3, #15
 80017a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017a6:	2302      	movs	r3, #2
 80017a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017ae:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80017b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017ba:	f107 030c 	add.w	r3, r7, #12
 80017be:	2105      	movs	r1, #5
 80017c0:	4618      	mov	r0, r3
 80017c2:	f006 f8c9 	bl	8007958 <HAL_RCC_ClockConfig>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80017cc:	f000 f992 	bl	8001af4 <Error_Handler>
  }
}
 80017d0:	bf00      	nop
 80017d2:	3750      	adds	r7, #80	@ 0x50
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40007000 	.word	0x40007000

080017e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017e4:	4b12      	ldr	r3, [pc, #72]	@ (8001830 <MX_I2C1_Init+0x50>)
 80017e6:	4a13      	ldr	r2, [pc, #76]	@ (8001834 <MX_I2C1_Init+0x54>)
 80017e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017ea:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <MX_I2C1_Init+0x50>)
 80017ec:	4a12      	ldr	r2, [pc, #72]	@ (8001838 <MX_I2C1_Init+0x58>)
 80017ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <MX_I2C1_Init+0x50>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001830 <MX_I2C1_Init+0x50>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <MX_I2C1_Init+0x50>)
 80017fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001802:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001804:	4b0a      	ldr	r3, [pc, #40]	@ (8001830 <MX_I2C1_Init+0x50>)
 8001806:	2200      	movs	r2, #0
 8001808:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800180a:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <MX_I2C1_Init+0x50>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001810:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <MX_I2C1_Init+0x50>)
 8001812:	2200      	movs	r2, #0
 8001814:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001816:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <MX_I2C1_Init+0x50>)
 8001818:	2200      	movs	r2, #0
 800181a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800181c:	4804      	ldr	r0, [pc, #16]	@ (8001830 <MX_I2C1_Init+0x50>)
 800181e:	f003 fd8d 	bl	800533c <HAL_I2C_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001828:	f000 f964 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	200000f4 	.word	0x200000f4
 8001834:	40005400 	.word	0x40005400
 8001838:	000186a0 	.word	0x000186a0

0800183c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001840:	4b13      	ldr	r3, [pc, #76]	@ (8001890 <MX_I2S3_Init+0x54>)
 8001842:	4a14      	ldr	r2, [pc, #80]	@ (8001894 <MX_I2S3_Init+0x58>)
 8001844:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001846:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <MX_I2S3_Init+0x54>)
 8001848:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800184c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800184e:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <MX_I2S3_Init+0x54>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001854:	4b0e      	ldr	r3, [pc, #56]	@ (8001890 <MX_I2S3_Init+0x54>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800185a:	4b0d      	ldr	r3, [pc, #52]	@ (8001890 <MX_I2S3_Init+0x54>)
 800185c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001860:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001862:	4b0b      	ldr	r3, [pc, #44]	@ (8001890 <MX_I2S3_Init+0x54>)
 8001864:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001868:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800186a:	4b09      	ldr	r3, [pc, #36]	@ (8001890 <MX_I2S3_Init+0x54>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001870:	4b07      	ldr	r3, [pc, #28]	@ (8001890 <MX_I2S3_Init+0x54>)
 8001872:	2200      	movs	r2, #0
 8001874:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001876:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <MX_I2S3_Init+0x54>)
 8001878:	2200      	movs	r2, #0
 800187a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800187c:	4804      	ldr	r0, [pc, #16]	@ (8001890 <MX_I2S3_Init+0x54>)
 800187e:	f004 fd57 	bl	8006330 <HAL_I2S_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001888:	f000 f934 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000148 	.word	0x20000148
 8001894:	40003c00 	.word	0x40003c00

08001898 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800189e:	f107 0308 	add.w	r3, r7, #8
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ac:	463b      	mov	r3, r7
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001934 <MX_TIM1_Init+0x9c>)
 80018b6:	4a20      	ldr	r2, [pc, #128]	@ (8001938 <MX_TIM1_Init+0xa0>)
 80018b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400-1;
 80018ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001934 <MX_TIM1_Init+0x9c>)
 80018bc:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80018c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001934 <MX_TIM1_Init+0x9c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80018c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001934 <MX_TIM1_Init+0x9c>)
 80018ca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d0:	4b18      	ldr	r3, [pc, #96]	@ (8001934 <MX_TIM1_Init+0x9c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018d6:	4b17      	ldr	r3, [pc, #92]	@ (8001934 <MX_TIM1_Init+0x9c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018dc:	4b15      	ldr	r3, [pc, #84]	@ (8001934 <MX_TIM1_Init+0x9c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018e2:	4814      	ldr	r0, [pc, #80]	@ (8001934 <MX_TIM1_Init+0x9c>)
 80018e4:	f006 fbc6 	bl	8008074 <HAL_TIM_Base_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80018ee:	f000 f901 	bl	8001af4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	4619      	mov	r1, r3
 80018fe:	480d      	ldr	r0, [pc, #52]	@ (8001934 <MX_TIM1_Init+0x9c>)
 8001900:	f006 fd68 	bl	80083d4 <HAL_TIM_ConfigClockSource>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800190a:	f000 f8f3 	bl	8001af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800190e:	2300      	movs	r3, #0
 8001910:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001912:	2300      	movs	r3, #0
 8001914:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001916:	463b      	mov	r3, r7
 8001918:	4619      	mov	r1, r3
 800191a:	4806      	ldr	r0, [pc, #24]	@ (8001934 <MX_TIM1_Init+0x9c>)
 800191c:	f006 ff90 	bl	8008840 <HAL_TIMEx_MasterConfigSynchronization>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001926:	f000 f8e5 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800192a:	bf00      	nop
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200001f0 	.word	0x200001f0
 8001938:	40010000 	.word	0x40010000

0800193c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001940:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <MX_USART2_UART_Init+0x4c>)
 8001942:	4a12      	ldr	r2, [pc, #72]	@ (800198c <MX_USART2_UART_Init+0x50>)
 8001944:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001946:	4b10      	ldr	r3, [pc, #64]	@ (8001988 <MX_USART2_UART_Init+0x4c>)
 8001948:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800194c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800194e:	4b0e      	ldr	r3, [pc, #56]	@ (8001988 <MX_USART2_UART_Init+0x4c>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001954:	4b0c      	ldr	r3, [pc, #48]	@ (8001988 <MX_USART2_UART_Init+0x4c>)
 8001956:	2200      	movs	r2, #0
 8001958:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800195a:	4b0b      	ldr	r3, [pc, #44]	@ (8001988 <MX_USART2_UART_Init+0x4c>)
 800195c:	2200      	movs	r2, #0
 800195e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001960:	4b09      	ldr	r3, [pc, #36]	@ (8001988 <MX_USART2_UART_Init+0x4c>)
 8001962:	220c      	movs	r2, #12
 8001964:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001966:	4b08      	ldr	r3, [pc, #32]	@ (8001988 <MX_USART2_UART_Init+0x4c>)
 8001968:	2200      	movs	r2, #0
 800196a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800196c:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <MX_USART2_UART_Init+0x4c>)
 800196e:	2200      	movs	r2, #0
 8001970:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001972:	4805      	ldr	r0, [pc, #20]	@ (8001988 <MX_USART2_UART_Init+0x4c>)
 8001974:	f006 fff4 	bl	8008960 <HAL_UART_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800197e:	f000 f8b9 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000238 	.word	0x20000238
 800198c:	40004400 	.word	0x40004400

08001990 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <MX_DMA_Init+0x3c>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	4a0b      	ldr	r2, [pc, #44]	@ (80019cc <MX_DMA_Init+0x3c>)
 80019a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a6:	4b09      	ldr	r3, [pc, #36]	@ (80019cc <MX_DMA_Init+0x3c>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2100      	movs	r1, #0
 80019b6:	2010      	movs	r0, #16
 80019b8:	f000 fd9f 	bl	80024fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80019bc:	2010      	movs	r0, #16
 80019be:	f000 fdb8 	bl	8002532 <HAL_NVIC_EnableIRQ>

}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800

080019d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	@ 0x28
 80019d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
 80019e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	4b3e      	ldr	r3, [pc, #248]	@ (8001ae4 <MX_GPIO_Init+0x114>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ee:	4a3d      	ldr	r2, [pc, #244]	@ (8001ae4 <MX_GPIO_Init+0x114>)
 80019f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ae4 <MX_GPIO_Init+0x114>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	4b37      	ldr	r3, [pc, #220]	@ (8001ae4 <MX_GPIO_Init+0x114>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0a:	4a36      	ldr	r2, [pc, #216]	@ (8001ae4 <MX_GPIO_Init+0x114>)
 8001a0c:	f043 0304 	orr.w	r3, r3, #4
 8001a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a12:	4b34      	ldr	r3, [pc, #208]	@ (8001ae4 <MX_GPIO_Init+0x114>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a16:	f003 0304 	and.w	r3, r3, #4
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	4b30      	ldr	r3, [pc, #192]	@ (8001ae4 <MX_GPIO_Init+0x114>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	4a2f      	ldr	r2, [pc, #188]	@ (8001ae4 <MX_GPIO_Init+0x114>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae4 <MX_GPIO_Init+0x114>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	4b29      	ldr	r3, [pc, #164]	@ (8001ae4 <MX_GPIO_Init+0x114>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	4a28      	ldr	r2, [pc, #160]	@ (8001ae4 <MX_GPIO_Init+0x114>)
 8001a44:	f043 0308 	orr.w	r3, r3, #8
 8001a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4a:	4b26      	ldr	r3, [pc, #152]	@ (8001ae4 <MX_GPIO_Init+0x114>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	603b      	str	r3, [r7, #0]
 8001a5a:	4b22      	ldr	r3, [pc, #136]	@ (8001ae4 <MX_GPIO_Init+0x114>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	4a21      	ldr	r2, [pc, #132]	@ (8001ae4 <MX_GPIO_Init+0x114>)
 8001a60:	f043 0302 	orr.w	r3, r3, #2
 8001a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a66:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae4 <MX_GPIO_Init+0x114>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2101      	movs	r1, #1
 8001a76:	481c      	ldr	r0, [pc, #112]	@ (8001ae8 <MX_GPIO_Init+0x118>)
 8001a78:	f001 fb2c 	bl	80030d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001a82:	481a      	ldr	r0, [pc, #104]	@ (8001aec <MX_GPIO_Init+0x11c>)
 8001a84:	f001 fb26 	bl	80030d4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2300      	movs	r3, #0
 8001a96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4812      	ldr	r0, [pc, #72]	@ (8001ae8 <MX_GPIO_Init+0x118>)
 8001aa0:	f001 f964 	bl	8002d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	480e      	ldr	r0, [pc, #56]	@ (8001af0 <MX_GPIO_Init+0x120>)
 8001ab8:	f001 f958 	bl	8002d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001abc:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001ac0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aca:	2300      	movs	r3, #0
 8001acc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4805      	ldr	r0, [pc, #20]	@ (8001aec <MX_GPIO_Init+0x11c>)
 8001ad6:	f001 f949 	bl	8002d6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ada:	bf00      	nop
 8001adc:	3728      	adds	r7, #40	@ 0x28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40020800 	.word	0x40020800
 8001aec:	40020c00 	.word	0x40020c00
 8001af0:	40020000 	.word	0x40020000

08001af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af8:	b672      	cpsid	i
}
 8001afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <Error_Handler+0x8>

08001b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	4b10      	ldr	r3, [pc, #64]	@ (8001b4c <HAL_MspInit+0x4c>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b4c <HAL_MspInit+0x4c>)
 8001b10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b16:	4b0d      	ldr	r3, [pc, #52]	@ (8001b4c <HAL_MspInit+0x4c>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	603b      	str	r3, [r7, #0]
 8001b26:	4b09      	ldr	r3, [pc, #36]	@ (8001b4c <HAL_MspInit+0x4c>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	4a08      	ldr	r2, [pc, #32]	@ (8001b4c <HAL_MspInit+0x4c>)
 8001b2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b32:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <HAL_MspInit+0x4c>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b3a:	603b      	str	r3, [r7, #0]
 8001b3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b3e:	2007      	movs	r0, #7
 8001b40:	f000 fcd0 	bl	80024e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b44:	bf00      	nop
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40023800 	.word	0x40023800

08001b50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	@ 0x28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a19      	ldr	r2, [pc, #100]	@ (8001bd4 <HAL_I2C_MspInit+0x84>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d12c      	bne.n	8001bcc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	4b18      	ldr	r3, [pc, #96]	@ (8001bd8 <HAL_I2C_MspInit+0x88>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7a:	4a17      	ldr	r2, [pc, #92]	@ (8001bd8 <HAL_I2C_MspInit+0x88>)
 8001b7c:	f043 0302 	orr.w	r3, r3, #2
 8001b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b82:	4b15      	ldr	r3, [pc, #84]	@ (8001bd8 <HAL_I2C_MspInit+0x88>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001b8e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b94:	2312      	movs	r3, #18
 8001b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	4619      	mov	r1, r3
 8001baa:	480c      	ldr	r0, [pc, #48]	@ (8001bdc <HAL_I2C_MspInit+0x8c>)
 8001bac:	f001 f8de 	bl	8002d6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	4b08      	ldr	r3, [pc, #32]	@ (8001bd8 <HAL_I2C_MspInit+0x88>)
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb8:	4a07      	ldr	r2, [pc, #28]	@ (8001bd8 <HAL_I2C_MspInit+0x88>)
 8001bba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bc0:	4b05      	ldr	r3, [pc, #20]	@ (8001bd8 <HAL_I2C_MspInit+0x88>)
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bcc:	bf00      	nop
 8001bce:	3728      	adds	r7, #40	@ 0x28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40005400 	.word	0x40005400
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40020400 	.word	0x40020400

08001be0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08e      	sub	sp, #56	@ 0x38
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a4e      	ldr	r2, [pc, #312]	@ (8001d44 <HAL_I2S_MspInit+0x164>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	f040 8095 	bne.w	8001d3c <HAL_I2S_MspInit+0x15c>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001c12:	2301      	movs	r3, #1
 8001c14:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 271;
 8001c16:	f240 130f 	movw	r3, #271	@ 0x10f
 8001c1a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 8001c1c:	2306      	movs	r3, #6
 8001c1e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	4618      	mov	r0, r3
 8001c26:	f006 f8b7 	bl	8007d98 <HAL_RCCEx_PeriphCLKConfig>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <HAL_I2S_MspInit+0x54>
    {
      Error_Handler();
 8001c30:	f7ff ff60 	bl	8001af4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c34:	2300      	movs	r3, #0
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	4b43      	ldr	r3, [pc, #268]	@ (8001d48 <HAL_I2S_MspInit+0x168>)
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3c:	4a42      	ldr	r2, [pc, #264]	@ (8001d48 <HAL_I2S_MspInit+0x168>)
 8001c3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c42:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c44:	4b40      	ldr	r3, [pc, #256]	@ (8001d48 <HAL_I2S_MspInit+0x168>)
 8001c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c50:	2300      	movs	r3, #0
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	4b3c      	ldr	r3, [pc, #240]	@ (8001d48 <HAL_I2S_MspInit+0x168>)
 8001c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c58:	4a3b      	ldr	r2, [pc, #236]	@ (8001d48 <HAL_I2S_MspInit+0x168>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c60:	4b39      	ldr	r3, [pc, #228]	@ (8001d48 <HAL_I2S_MspInit+0x168>)
 8001c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	4b35      	ldr	r3, [pc, #212]	@ (8001d48 <HAL_I2S_MspInit+0x168>)
 8001c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c74:	4a34      	ldr	r2, [pc, #208]	@ (8001d48 <HAL_I2S_MspInit+0x168>)
 8001c76:	f043 0304 	orr.w	r3, r3, #4
 8001c7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7c:	4b32      	ldr	r3, [pc, #200]	@ (8001d48 <HAL_I2S_MspInit+0x168>)
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c88:	2310      	movs	r3, #16
 8001c8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c94:	2300      	movs	r3, #0
 8001c96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c98:	2306      	movs	r3, #6
 8001c9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	482a      	ldr	r0, [pc, #168]	@ (8001d4c <HAL_I2S_MspInit+0x16c>)
 8001ca4:	f001 f862 	bl	8002d6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001ca8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cba:	2306      	movs	r3, #6
 8001cbc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4822      	ldr	r0, [pc, #136]	@ (8001d50 <HAL_I2S_MspInit+0x170>)
 8001cc6:	f001 f851 	bl	8002d6c <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001cca:	4b22      	ldr	r3, [pc, #136]	@ (8001d54 <HAL_I2S_MspInit+0x174>)
 8001ccc:	4a22      	ldr	r2, [pc, #136]	@ (8001d58 <HAL_I2S_MspInit+0x178>)
 8001cce:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001cd0:	4b20      	ldr	r3, [pc, #128]	@ (8001d54 <HAL_I2S_MspInit+0x174>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cd6:	4b1f      	ldr	r3, [pc, #124]	@ (8001d54 <HAL_I2S_MspInit+0x174>)
 8001cd8:	2240      	movs	r2, #64	@ 0x40
 8001cda:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8001d54 <HAL_I2S_MspInit+0x174>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d54 <HAL_I2S_MspInit+0x174>)
 8001ce4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ce8:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cea:	4b1a      	ldr	r3, [pc, #104]	@ (8001d54 <HAL_I2S_MspInit+0x174>)
 8001cec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001cf0:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cf2:	4b18      	ldr	r3, [pc, #96]	@ (8001d54 <HAL_I2S_MspInit+0x174>)
 8001cf4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cf8:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001cfa:	4b16      	ldr	r3, [pc, #88]	@ (8001d54 <HAL_I2S_MspInit+0x174>)
 8001cfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d00:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d02:	4b14      	ldr	r3, [pc, #80]	@ (8001d54 <HAL_I2S_MspInit+0x174>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001d08:	4b12      	ldr	r3, [pc, #72]	@ (8001d54 <HAL_I2S_MspInit+0x174>)
 8001d0a:	2204      	movs	r2, #4
 8001d0c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001d0e:	4b11      	ldr	r3, [pc, #68]	@ (8001d54 <HAL_I2S_MspInit+0x174>)
 8001d10:	2203      	movs	r2, #3
 8001d12:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001d14:	4b0f      	ldr	r3, [pc, #60]	@ (8001d54 <HAL_I2S_MspInit+0x174>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d54 <HAL_I2S_MspInit+0x174>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001d20:	480c      	ldr	r0, [pc, #48]	@ (8001d54 <HAL_I2S_MspInit+0x174>)
 8001d22:	f000 fc21 	bl	8002568 <HAL_DMA_Init>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <HAL_I2S_MspInit+0x150>
    {
      Error_Handler();
 8001d2c:	f7ff fee2 	bl	8001af4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a08      	ldr	r2, [pc, #32]	@ (8001d54 <HAL_I2S_MspInit+0x174>)
 8001d34:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d36:	4a07      	ldr	r2, [pc, #28]	@ (8001d54 <HAL_I2S_MspInit+0x174>)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001d3c:	bf00      	nop
 8001d3e:	3738      	adds	r7, #56	@ 0x38
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40003c00 	.word	0x40003c00
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40020000 	.word	0x40020000
 8001d50:	40020800 	.word	0x40020800
 8001d54:	20000190 	.word	0x20000190
 8001d58:	40026088 	.word	0x40026088

08001d5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a0e      	ldr	r2, [pc, #56]	@ (8001da4 <HAL_TIM_Base_MspInit+0x48>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d115      	bne.n	8001d9a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	4b0d      	ldr	r3, [pc, #52]	@ (8001da8 <HAL_TIM_Base_MspInit+0x4c>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d76:	4a0c      	ldr	r2, [pc, #48]	@ (8001da8 <HAL_TIM_Base_MspInit+0x4c>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001da8 <HAL_TIM_Base_MspInit+0x4c>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	2019      	movs	r0, #25
 8001d90:	f000 fbb3 	bl	80024fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d94:	2019      	movs	r0, #25
 8001d96:	f000 fbcc 	bl	8002532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d9a:	bf00      	nop
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40010000 	.word	0x40010000
 8001da8:	40023800 	.word	0x40023800

08001dac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08a      	sub	sp, #40	@ 0x28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8001e40 <HAL_UART_MspInit+0x94>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d133      	bne.n	8001e36 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e44 <HAL_UART_MspInit+0x98>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	4a1b      	ldr	r2, [pc, #108]	@ (8001e44 <HAL_UART_MspInit+0x98>)
 8001dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dde:	4b19      	ldr	r3, [pc, #100]	@ (8001e44 <HAL_UART_MspInit+0x98>)
 8001de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	4b15      	ldr	r3, [pc, #84]	@ (8001e44 <HAL_UART_MspInit+0x98>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df2:	4a14      	ldr	r2, [pc, #80]	@ (8001e44 <HAL_UART_MspInit+0x98>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dfa:	4b12      	ldr	r3, [pc, #72]	@ (8001e44 <HAL_UART_MspInit+0x98>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e06:	230c      	movs	r3, #12
 8001e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e12:	2303      	movs	r3, #3
 8001e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e16:	2307      	movs	r3, #7
 8001e18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1a:	f107 0314 	add.w	r3, r7, #20
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4809      	ldr	r0, [pc, #36]	@ (8001e48 <HAL_UART_MspInit+0x9c>)
 8001e22:	f000 ffa3 	bl	8002d6c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e26:	2200      	movs	r2, #0
 8001e28:	2100      	movs	r1, #0
 8001e2a:	2026      	movs	r0, #38	@ 0x26
 8001e2c:	f000 fb65 	bl	80024fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e30:	2026      	movs	r0, #38	@ 0x26
 8001e32:	f000 fb7e 	bl	8002532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e36:	bf00      	nop
 8001e38:	3728      	adds	r7, #40	@ 0x28
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40004400 	.word	0x40004400
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40020000 	.word	0x40020000

08001e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <NMI_Handler+0x4>

08001e54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e58:	bf00      	nop
 8001e5a:	e7fd      	b.n	8001e58 <HardFault_Handler+0x4>

08001e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e60:	bf00      	nop
 8001e62:	e7fd      	b.n	8001e60 <MemManage_Handler+0x4>

08001e64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e68:	bf00      	nop
 8001e6a:	e7fd      	b.n	8001e68 <BusFault_Handler+0x4>

08001e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e70:	bf00      	nop
 8001e72:	e7fd      	b.n	8001e70 <UsageFault_Handler+0x4>

08001e74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ea2:	f000 fa0b 	bl	80022bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001eb0:	4802      	ldr	r0, [pc, #8]	@ (8001ebc <DMA1_Stream5_IRQHandler+0x10>)
 8001eb2:	f000 fcf1 	bl	8002898 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000190 	.word	0x20000190

08001ec0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ec4:	4802      	ldr	r0, [pc, #8]	@ (8001ed0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001ec6:	f006 f995 	bl	80081f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	200001f0 	.word	0x200001f0

08001ed4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ed8:	4802      	ldr	r0, [pc, #8]	@ (8001ee4 <USART2_IRQHandler+0x10>)
 8001eda:	f006 fe41 	bl	8008b60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000238 	.word	0x20000238

08001ee8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001eec:	4802      	ldr	r0, [pc, #8]	@ (8001ef8 <OTG_FS_IRQHandler+0x10>)
 8001eee:	f001 fbeb 	bl	80036c8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20001d3c 	.word	0x20001d3c

08001efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f04:	4a14      	ldr	r2, [pc, #80]	@ (8001f58 <_sbrk+0x5c>)
 8001f06:	4b15      	ldr	r3, [pc, #84]	@ (8001f5c <_sbrk+0x60>)
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f10:	4b13      	ldr	r3, [pc, #76]	@ (8001f60 <_sbrk+0x64>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d102      	bne.n	8001f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f18:	4b11      	ldr	r3, [pc, #68]	@ (8001f60 <_sbrk+0x64>)
 8001f1a:	4a12      	ldr	r2, [pc, #72]	@ (8001f64 <_sbrk+0x68>)
 8001f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f1e:	4b10      	ldr	r3, [pc, #64]	@ (8001f60 <_sbrk+0x64>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d207      	bcs.n	8001f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f2c:	f00f f820 	bl	8010f70 <__errno>
 8001f30:	4603      	mov	r3, r0
 8001f32:	220c      	movs	r2, #12
 8001f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f36:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3a:	e009      	b.n	8001f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f3c:	4b08      	ldr	r3, [pc, #32]	@ (8001f60 <_sbrk+0x64>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f42:	4b07      	ldr	r3, [pc, #28]	@ (8001f60 <_sbrk+0x64>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4413      	add	r3, r2
 8001f4a:	4a05      	ldr	r2, [pc, #20]	@ (8001f60 <_sbrk+0x64>)
 8001f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20020000 	.word	0x20020000
 8001f5c:	00002000 	.word	0x00002000
 8001f60:	200004a8 	.word	0x200004a8
 8001f64:	20002268 	.word	0x20002268

08001f68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f6c:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <SystemInit+0x20>)
 8001f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f72:	4a05      	ldr	r2, [pc, #20]	@ (8001f88 <SystemInit+0x20>)
 8001f74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <wavPlayer_reset>:
  PLAYER_CONTROL_EndOfFile,
}PLAYER_CONTROL_e;
static volatile PLAYER_CONTROL_e playerControlSM = PLAYER_CONTROL_Idle;

static void wavPlayer_reset(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  audioRemainSize = 0;
 8001f90:	4b05      	ldr	r3, [pc, #20]	@ (8001fa8 <wavPlayer_reset+0x1c>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
  playerReadBytes = 0;
 8001f96:	4b05      	ldr	r3, [pc, #20]	@ (8001fac <wavPlayer_reset+0x20>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	200016e0 	.word	0x200016e0
 8001fac:	200016e8 	.word	0x200016e8

08001fb0 <wavPlayer_fileSelect>:
/**
 * @brief Select WAV file to play
 * @retval returns true when file is found in USB Drive
 */
bool wavPlayer_fileSelect(const char* filePath)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08e      	sub	sp, #56	@ 0x38
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  WAV_HeaderTypeDef wavHeader;
  UINT readBytes = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60bb      	str	r3, [r7, #8]
  //Open WAV file
  if(f_open(&wavFile, filePath, FA_READ) != FR_OK)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	480d      	ldr	r0, [pc, #52]	@ (8001ff8 <wavPlayer_fileSelect+0x48>)
 8001fc2:	f00d fdc1 	bl	800fb48 <f_open>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <wavPlayer_fileSelect+0x20>
  {
    return false;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	e00e      	b.n	8001fee <wavPlayer_fileSelect+0x3e>
  }
  //Read WAV file Header
  f_read(&wavFile, &wavHeader, sizeof(wavHeader), &readBytes);
 8001fd0:	f107 0308 	add.w	r3, r7, #8
 8001fd4:	f107 010c 	add.w	r1, r7, #12
 8001fd8:	222c      	movs	r2, #44	@ 0x2c
 8001fda:	4807      	ldr	r0, [pc, #28]	@ (8001ff8 <wavPlayer_fileSelect+0x48>)
 8001fdc:	f00d ff6e 	bl	800febc <f_read>
  //Get audio data size
  fileLength = wavHeader.FileSize;
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4a06      	ldr	r2, [pc, #24]	@ (8001ffc <wavPlayer_fileSelect+0x4c>)
 8001fe4:	6013      	str	r3, [r2, #0]
  //Play the WAV file with frequency specified in header
  samplingFreq = wavHeader.SampleRate;
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe8:	4a05      	ldr	r2, [pc, #20]	@ (8002000 <wavPlayer_fileSelect+0x50>)
 8001fea:	6013      	str	r3, [r2, #0]
  return true;
 8001fec:	2301      	movs	r3, #1
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3738      	adds	r7, #56	@ 0x38
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	200004ac 	.word	0x200004ac
 8001ffc:	200006dc 	.word	0x200006dc
 8002000:	200016e4 	.word	0x200016e4

08002004 <wavPlayer_play>:

/**
 * @brief WAV File Play
 */
void wavPlayer_play(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  isFinished = false;
 8002008:	4b10      	ldr	r3, [pc, #64]	@ (800204c <wavPlayer_play+0x48>)
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
  //Initialise I2S Audio Sampling settings
  audioI2S_init(samplingFreq);
 800200e:	4b10      	ldr	r3, [pc, #64]	@ (8002050 <wavPlayer_play+0x4c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe ff7a 	bl	8000f0c <audioI2S_init>
  //Read Audio data from USB Disk
  f_lseek(&wavFile, 0);
 8002018:	2100      	movs	r1, #0
 800201a:	480e      	ldr	r0, [pc, #56]	@ (8002054 <wavPlayer_play+0x50>)
 800201c:	f00e f935 	bl	801028a <f_lseek>
  f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &playerReadBytes);
 8002020:	4b0d      	ldr	r3, [pc, #52]	@ (8002058 <wavPlayer_play+0x54>)
 8002022:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002026:	490d      	ldr	r1, [pc, #52]	@ (800205c <wavPlayer_play+0x58>)
 8002028:	480a      	ldr	r0, [pc, #40]	@ (8002054 <wavPlayer_play+0x50>)
 800202a:	f00d ff47 	bl	800febc <f_read>
  audioRemainSize = fileLength - playerReadBytes;
 800202e:	4b0c      	ldr	r3, [pc, #48]	@ (8002060 <wavPlayer_play+0x5c>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	4b09      	ldr	r3, [pc, #36]	@ (8002058 <wavPlayer_play+0x54>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	4a0a      	ldr	r2, [pc, #40]	@ (8002064 <wavPlayer_play+0x60>)
 800203a:	6013      	str	r3, [r2, #0]
  //Start playing the WAV
  audioI2S_play((uint16_t *)&audioBuffer[0], AUDIO_BUFFER_SIZE);
 800203c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002040:	4806      	ldr	r0, [pc, #24]	@ (800205c <wavPlayer_play+0x58>)
 8002042:	f7fe ff73 	bl	8000f2c <audioI2S_play>
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200016ec 	.word	0x200016ec
 8002050:	200016e4 	.word	0x200016e4
 8002054:	200004ac 	.word	0x200004ac
 8002058:	200016e8 	.word	0x200016e8
 800205c:	200006e0 	.word	0x200006e0
 8002060:	200006dc 	.word	0x200006dc
 8002064:	200016e0 	.word	0x200016e0

08002068 <wavPlayer_process>:

/**
 * @brief Process WAV
 */
void wavPlayer_process(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  switch(playerControlSM)
 800206c:	4b30      	ldr	r3, [pc, #192]	@ (8002130 <wavPlayer_process+0xc8>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b03      	cmp	r3, #3
 8002074:	d859      	bhi.n	800212a <wavPlayer_process+0xc2>
 8002076:	a201      	add	r2, pc, #4	@ (adr r2, 800207c <wavPlayer_process+0x14>)
 8002078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800207c:	08002129 	.word	0x08002129
 8002080:	0800208d 	.word	0x0800208d
 8002084:	080020cf 	.word	0x080020cf
 8002088:	08002111 	.word	0x08002111
  {
  case PLAYER_CONTROL_Idle:
    break;

  case PLAYER_CONTROL_HalfBuffer:
    playerReadBytes = 0;
 800208c:	4b29      	ldr	r3, [pc, #164]	@ (8002134 <wavPlayer_process+0xcc>)
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8002092:	4b27      	ldr	r3, [pc, #156]	@ (8002130 <wavPlayer_process+0xc8>)
 8002094:	2200      	movs	r2, #0
 8002096:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8002098:	4b26      	ldr	r3, [pc, #152]	@ (8002134 <wavPlayer_process+0xcc>)
 800209a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800209e:	4926      	ldr	r1, [pc, #152]	@ (8002138 <wavPlayer_process+0xd0>)
 80020a0:	4826      	ldr	r0, [pc, #152]	@ (800213c <wavPlayer_process+0xd4>)
 80020a2:	f00d ff0b 	bl	800febc <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 80020a6:	4b26      	ldr	r3, [pc, #152]	@ (8002140 <wavPlayer_process+0xd8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020ae:	d907      	bls.n	80020c0 <wavPlayer_process+0x58>
    {
      audioRemainSize -= playerReadBytes;
 80020b0:	4b23      	ldr	r3, [pc, #140]	@ (8002140 <wavPlayer_process+0xd8>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002134 <wavPlayer_process+0xcc>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	4a21      	ldr	r2, [pc, #132]	@ (8002140 <wavPlayer_process+0xd8>)
 80020bc:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 80020be:	e034      	b.n	800212a <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 80020c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002140 <wavPlayer_process+0xd8>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 80020c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002130 <wavPlayer_process+0xc8>)
 80020c8:	2203      	movs	r2, #3
 80020ca:	701a      	strb	r2, [r3, #0]
    break;
 80020cc:	e02d      	b.n	800212a <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_FullBuffer:
    playerReadBytes = 0;
 80020ce:	4b19      	ldr	r3, [pc, #100]	@ (8002134 <wavPlayer_process+0xcc>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 80020d4:	4b16      	ldr	r3, [pc, #88]	@ (8002130 <wavPlayer_process+0xc8>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 80020da:	4b16      	ldr	r3, [pc, #88]	@ (8002134 <wavPlayer_process+0xcc>)
 80020dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020e0:	4918      	ldr	r1, [pc, #96]	@ (8002144 <wavPlayer_process+0xdc>)
 80020e2:	4816      	ldr	r0, [pc, #88]	@ (800213c <wavPlayer_process+0xd4>)
 80020e4:	f00d feea 	bl	800febc <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 80020e8:	4b15      	ldr	r3, [pc, #84]	@ (8002140 <wavPlayer_process+0xd8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020f0:	d907      	bls.n	8002102 <wavPlayer_process+0x9a>
    {
      audioRemainSize -= playerReadBytes;
 80020f2:	4b13      	ldr	r3, [pc, #76]	@ (8002140 <wavPlayer_process+0xd8>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002134 <wavPlayer_process+0xcc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	4a10      	ldr	r2, [pc, #64]	@ (8002140 <wavPlayer_process+0xd8>)
 80020fe:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8002100:	e013      	b.n	800212a <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8002102:	4b0f      	ldr	r3, [pc, #60]	@ (8002140 <wavPlayer_process+0xd8>)
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8002108:	4b09      	ldr	r3, [pc, #36]	@ (8002130 <wavPlayer_process+0xc8>)
 800210a:	2203      	movs	r2, #3
 800210c:	701a      	strb	r2, [r3, #0]
    break;
 800210e:	e00c      	b.n	800212a <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_EndOfFile:
    f_close(&wavFile);
 8002110:	480a      	ldr	r0, [pc, #40]	@ (800213c <wavPlayer_process+0xd4>)
 8002112:	f00e f890 	bl	8010236 <f_close>
    wavPlayer_reset();
 8002116:	f7ff ff39 	bl	8001f8c <wavPlayer_reset>
    isFinished = true;
 800211a:	4b0b      	ldr	r3, [pc, #44]	@ (8002148 <wavPlayer_process+0xe0>)
 800211c:	2201      	movs	r2, #1
 800211e:	701a      	strb	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8002120:	4b03      	ldr	r3, [pc, #12]	@ (8002130 <wavPlayer_process+0xc8>)
 8002122:	2200      	movs	r2, #0
 8002124:	701a      	strb	r2, [r3, #0]
    break;
 8002126:	e000      	b.n	800212a <wavPlayer_process+0xc2>
    break;
 8002128:	bf00      	nop
  }
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	200016ed 	.word	0x200016ed
 8002134:	200016e8 	.word	0x200016e8
 8002138:	200006e0 	.word	0x200006e0
 800213c:	200004ac 	.word	0x200004ac
 8002140:	200016e0 	.word	0x200016e0
 8002144:	20000ee0 	.word	0x20000ee0
 8002148:	200016ec 	.word	0x200016ec

0800214c <wavPlayer_stop>:

/**
 * @brief WAV stop
 */
void wavPlayer_stop(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  audioI2S_stop();
 8002150:	f7fe ff26 	bl	8000fa0 <audioI2S_stop>
  isFinished = true;
 8002154:	4b02      	ldr	r3, [pc, #8]	@ (8002160 <wavPlayer_stop+0x14>)
 8002156:	2201      	movs	r2, #1
 8002158:	701a      	strb	r2, [r3, #0]
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	200016ec 	.word	0x200016ec

08002164 <wavPlayer_pause>:

/**
 * @brief WAV pause/resume
 */
void wavPlayer_pause(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  audioI2S_pause();
 8002168:	f7fe fefe 	bl	8000f68 <audioI2S_pause>
}
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}

08002170 <wavPlayer_resume>:
void wavPlayer_resume(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  audioI2S_resume();
 8002174:	f7fe ff06 	bl	8000f84 <audioI2S_resume>
}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}

0800217c <wavPlayer_isFinished>:

/**
 * @brief isEndofFile reached
 */
bool wavPlayer_isFinished(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return isFinished;
 8002180:	4b03      	ldr	r3, [pc, #12]	@ (8002190 <wavPlayer_isFinished+0x14>)
 8002182:	781b      	ldrb	r3, [r3, #0]
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	200016ec 	.word	0x200016ec

08002194 <audioI2S_halfTransfer_Callback>:

/**
 * @brief Half/Full transfer Audio callback for buffer management
 */
void audioI2S_halfTransfer_Callback(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_HalfBuffer;
 8002198:	4b03      	ldr	r3, [pc, #12]	@ (80021a8 <audioI2S_halfTransfer_Callback+0x14>)
 800219a:	2201      	movs	r2, #1
 800219c:	701a      	strb	r2, [r3, #0]
}
 800219e:	bf00      	nop
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	200016ed 	.word	0x200016ed

080021ac <audioI2S_fullTransfer_Callback>:
void audioI2S_fullTransfer_Callback(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_FullBuffer;
 80021b0:	4b03      	ldr	r3, [pc, #12]	@ (80021c0 <audioI2S_fullTransfer_Callback+0x14>)
 80021b2:	2202      	movs	r2, #2
 80021b4:	701a      	strb	r2, [r3, #0]
//  audioI2S_changeBuffer((uint16_t*)&audioBuffer[0], AUDIO_BUFFER_SIZE / 2);
}
 80021b6:	bf00      	nop
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	200016ed 	.word	0x200016ed

080021c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80021c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021c8:	f7ff fece 	bl	8001f68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021cc:	480c      	ldr	r0, [pc, #48]	@ (8002200 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021ce:	490d      	ldr	r1, [pc, #52]	@ (8002204 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002208 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d4:	e002      	b.n	80021dc <LoopCopyDataInit>

080021d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021da:	3304      	adds	r3, #4

080021dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021e0:	d3f9      	bcc.n	80021d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021e2:	4a0a      	ldr	r2, [pc, #40]	@ (800220c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021e4:	4c0a      	ldr	r4, [pc, #40]	@ (8002210 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e8:	e001      	b.n	80021ee <LoopFillZerobss>

080021ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021ec:	3204      	adds	r2, #4

080021ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021f0:	d3fb      	bcc.n	80021ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021f2:	f00e fec3 	bl	8010f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021f6:	f7fe ff33 	bl	8001060 <main>
  bx  lr    
 80021fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002204:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002208:	080119e0 	.word	0x080119e0
  ldr r2, =_sbss
 800220c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002210:	20002264 	.word	0x20002264

08002214 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002214:	e7fe      	b.n	8002214 <ADC_IRQHandler>
	...

08002218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800221c:	4b0e      	ldr	r3, [pc, #56]	@ (8002258 <HAL_Init+0x40>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a0d      	ldr	r2, [pc, #52]	@ (8002258 <HAL_Init+0x40>)
 8002222:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002226:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002228:	4b0b      	ldr	r3, [pc, #44]	@ (8002258 <HAL_Init+0x40>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a0a      	ldr	r2, [pc, #40]	@ (8002258 <HAL_Init+0x40>)
 800222e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002232:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002234:	4b08      	ldr	r3, [pc, #32]	@ (8002258 <HAL_Init+0x40>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a07      	ldr	r2, [pc, #28]	@ (8002258 <HAL_Init+0x40>)
 800223a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800223e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002240:	2003      	movs	r0, #3
 8002242:	f000 f94f 	bl	80024e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002246:	2000      	movs	r0, #0
 8002248:	f000 f808 	bl	800225c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800224c:	f7ff fc58 	bl	8001b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40023c00 	.word	0x40023c00

0800225c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002264:	4b12      	ldr	r3, [pc, #72]	@ (80022b0 <HAL_InitTick+0x54>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	4b12      	ldr	r3, [pc, #72]	@ (80022b4 <HAL_InitTick+0x58>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	4619      	mov	r1, r3
 800226e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002272:	fbb3 f3f1 	udiv	r3, r3, r1
 8002276:	fbb2 f3f3 	udiv	r3, r2, r3
 800227a:	4618      	mov	r0, r3
 800227c:	f000 f967 	bl	800254e <HAL_SYSTICK_Config>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e00e      	b.n	80022a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b0f      	cmp	r3, #15
 800228e:	d80a      	bhi.n	80022a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002290:	2200      	movs	r2, #0
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	f04f 30ff 	mov.w	r0, #4294967295
 8002298:	f000 f92f 	bl	80024fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800229c:	4a06      	ldr	r2, [pc, #24]	@ (80022b8 <HAL_InitTick+0x5c>)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	e000      	b.n	80022a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20000004 	.word	0x20000004
 80022b4:	2000000c 	.word	0x2000000c
 80022b8:	20000008 	.word	0x20000008

080022bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022c0:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <HAL_IncTick+0x20>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	461a      	mov	r2, r3
 80022c6:	4b06      	ldr	r3, [pc, #24]	@ (80022e0 <HAL_IncTick+0x24>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4413      	add	r3, r2
 80022cc:	4a04      	ldr	r2, [pc, #16]	@ (80022e0 <HAL_IncTick+0x24>)
 80022ce:	6013      	str	r3, [r2, #0]
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	2000000c 	.word	0x2000000c
 80022e0:	200016f0 	.word	0x200016f0

080022e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return uwTick;
 80022e8:	4b03      	ldr	r3, [pc, #12]	@ (80022f8 <HAL_GetTick+0x14>)
 80022ea:	681b      	ldr	r3, [r3, #0]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	200016f0 	.word	0x200016f0

080022fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002304:	f7ff ffee 	bl	80022e4 <HAL_GetTick>
 8002308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002314:	d005      	beq.n	8002322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002316:	4b0a      	ldr	r3, [pc, #40]	@ (8002340 <HAL_Delay+0x44>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	461a      	mov	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4413      	add	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002322:	bf00      	nop
 8002324:	f7ff ffde 	bl	80022e4 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	429a      	cmp	r2, r3
 8002332:	d8f7      	bhi.n	8002324 <HAL_Delay+0x28>
  {
  }
}
 8002334:	bf00      	nop
 8002336:	bf00      	nop
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	2000000c 	.word	0x2000000c

08002344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002354:	4b0c      	ldr	r3, [pc, #48]	@ (8002388 <__NVIC_SetPriorityGrouping+0x44>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002360:	4013      	ands	r3, r2
 8002362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800236c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002370:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002376:	4a04      	ldr	r2, [pc, #16]	@ (8002388 <__NVIC_SetPriorityGrouping+0x44>)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	60d3      	str	r3, [r2, #12]
}
 800237c:	bf00      	nop
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002390:	4b04      	ldr	r3, [pc, #16]	@ (80023a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	0a1b      	lsrs	r3, r3, #8
 8002396:	f003 0307 	and.w	r3, r3, #7
}
 800239a:	4618      	mov	r0, r3
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	db0b      	blt.n	80023d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	f003 021f 	and.w	r2, r3, #31
 80023c0:	4907      	ldr	r1, [pc, #28]	@ (80023e0 <__NVIC_EnableIRQ+0x38>)
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	2001      	movs	r0, #1
 80023ca:	fa00 f202 	lsl.w	r2, r0, r2
 80023ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	e000e100 	.word	0xe000e100

080023e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	6039      	str	r1, [r7, #0]
 80023ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	db0a      	blt.n	800240e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	490c      	ldr	r1, [pc, #48]	@ (8002430 <__NVIC_SetPriority+0x4c>)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	0112      	lsls	r2, r2, #4
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	440b      	add	r3, r1
 8002408:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800240c:	e00a      	b.n	8002424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4908      	ldr	r1, [pc, #32]	@ (8002434 <__NVIC_SetPriority+0x50>)
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	3b04      	subs	r3, #4
 800241c:	0112      	lsls	r2, r2, #4
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	440b      	add	r3, r1
 8002422:	761a      	strb	r2, [r3, #24]
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	e000e100 	.word	0xe000e100
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002438:	b480      	push	{r7}
 800243a:	b089      	sub	sp, #36	@ 0x24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f1c3 0307 	rsb	r3, r3, #7
 8002452:	2b04      	cmp	r3, #4
 8002454:	bf28      	it	cs
 8002456:	2304      	movcs	r3, #4
 8002458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3304      	adds	r3, #4
 800245e:	2b06      	cmp	r3, #6
 8002460:	d902      	bls.n	8002468 <NVIC_EncodePriority+0x30>
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3b03      	subs	r3, #3
 8002466:	e000      	b.n	800246a <NVIC_EncodePriority+0x32>
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800246c:	f04f 32ff 	mov.w	r2, #4294967295
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43da      	mvns	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	401a      	ands	r2, r3
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002480:	f04f 31ff 	mov.w	r1, #4294967295
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	fa01 f303 	lsl.w	r3, r1, r3
 800248a:	43d9      	mvns	r1, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002490:	4313      	orrs	r3, r2
         );
}
 8002492:	4618      	mov	r0, r3
 8002494:	3724      	adds	r7, #36	@ 0x24
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024b0:	d301      	bcc.n	80024b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024b2:	2301      	movs	r3, #1
 80024b4:	e00f      	b.n	80024d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024b6:	4a0a      	ldr	r2, [pc, #40]	@ (80024e0 <SysTick_Config+0x40>)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024be:	210f      	movs	r1, #15
 80024c0:	f04f 30ff 	mov.w	r0, #4294967295
 80024c4:	f7ff ff8e 	bl	80023e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c8:	4b05      	ldr	r3, [pc, #20]	@ (80024e0 <SysTick_Config+0x40>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ce:	4b04      	ldr	r3, [pc, #16]	@ (80024e0 <SysTick_Config+0x40>)
 80024d0:	2207      	movs	r2, #7
 80024d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	e000e010 	.word	0xe000e010

080024e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff ff29 	bl	8002344 <__NVIC_SetPriorityGrouping>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b086      	sub	sp, #24
 80024fe:	af00      	add	r7, sp, #0
 8002500:	4603      	mov	r3, r0
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
 8002506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800250c:	f7ff ff3e 	bl	800238c <__NVIC_GetPriorityGrouping>
 8002510:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	6978      	ldr	r0, [r7, #20]
 8002518:	f7ff ff8e 	bl	8002438 <NVIC_EncodePriority>
 800251c:	4602      	mov	r2, r0
 800251e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002522:	4611      	mov	r1, r2
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff ff5d 	bl	80023e4 <__NVIC_SetPriority>
}
 800252a:	bf00      	nop
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	4603      	mov	r3, r0
 800253a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800253c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff31 	bl	80023a8 <__NVIC_EnableIRQ>
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff ffa2 	bl	80024a0 <SysTick_Config>
 800255c:	4603      	mov	r3, r0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002574:	f7ff feb6 	bl	80022e4 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e099      	b.n	80026b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0201 	bic.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025a4:	e00f      	b.n	80025c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025a6:	f7ff fe9d 	bl	80022e4 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b05      	cmp	r3, #5
 80025b2:	d908      	bls.n	80025c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2220      	movs	r2, #32
 80025b8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2203      	movs	r2, #3
 80025be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e078      	b.n	80026b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1e8      	bne.n	80025a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	4b38      	ldr	r3, [pc, #224]	@ (80026c0 <HAL_DMA_Init+0x158>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800260a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	4313      	orrs	r3, r2
 8002616:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261c:	2b04      	cmp	r3, #4
 800261e:	d107      	bne.n	8002630 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002628:	4313      	orrs	r3, r2
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	4313      	orrs	r3, r2
 800262e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f023 0307 	bic.w	r3, r3, #7
 8002646:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	4313      	orrs	r3, r2
 8002650:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002656:	2b04      	cmp	r3, #4
 8002658:	d117      	bne.n	800268a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	4313      	orrs	r3, r2
 8002662:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00e      	beq.n	800268a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 fb01 	bl	8002c74 <DMA_CheckFifoParam>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2240      	movs	r2, #64	@ 0x40
 800267c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002686:	2301      	movs	r3, #1
 8002688:	e016      	b.n	80026b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 fab8 	bl	8002c08 <DMA_CalcBaseAndBitshift>
 8002698:	4603      	mov	r3, r0
 800269a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a0:	223f      	movs	r2, #63	@ 0x3f
 80026a2:	409a      	lsls	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	f010803f 	.word	0xf010803f

080026c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
 80026d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d101      	bne.n	80026ea <HAL_DMA_Start_IT+0x26>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e040      	b.n	800276c <HAL_DMA_Start_IT+0xa8>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d12f      	bne.n	800275e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2202      	movs	r2, #2
 8002702:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 fa4a 	bl	8002bac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800271c:	223f      	movs	r2, #63	@ 0x3f
 800271e:	409a      	lsls	r2, r3
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0216 	orr.w	r2, r2, #22
 8002732:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002738:	2b00      	cmp	r3, #0
 800273a:	d007      	beq.n	800274c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0208 	orr.w	r2, r2, #8
 800274a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0201 	orr.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	e005      	b.n	800276a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002766:	2302      	movs	r3, #2
 8002768:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800276a:	7dfb      	ldrb	r3, [r7, #23]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002780:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002782:	f7ff fdaf 	bl	80022e4 <HAL_GetTick>
 8002786:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d008      	beq.n	80027a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2280      	movs	r2, #128	@ 0x80
 8002798:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e052      	b.n	800284c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0216 	bic.w	r2, r2, #22
 80027b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	695a      	ldr	r2, [r3, #20]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d103      	bne.n	80027d6 <HAL_DMA_Abort+0x62>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d007      	beq.n	80027e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0208 	bic.w	r2, r2, #8
 80027e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0201 	bic.w	r2, r2, #1
 80027f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027f6:	e013      	b.n	8002820 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027f8:	f7ff fd74 	bl	80022e4 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b05      	cmp	r3, #5
 8002804:	d90c      	bls.n	8002820 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2220      	movs	r2, #32
 800280a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2203      	movs	r2, #3
 8002810:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e015      	b.n	800284c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1e4      	bne.n	80027f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002832:	223f      	movs	r2, #63	@ 0x3f
 8002834:	409a      	lsls	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d004      	beq.n	8002872 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2280      	movs	r2, #128	@ 0x80
 800286c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e00c      	b.n	800288c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2205      	movs	r2, #5
 8002876:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0201 	bic.w	r2, r2, #1
 8002888:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028a4:	4b8e      	ldr	r3, [pc, #568]	@ (8002ae0 <HAL_DMA_IRQHandler+0x248>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a8e      	ldr	r2, [pc, #568]	@ (8002ae4 <HAL_DMA_IRQHandler+0x24c>)
 80028aa:	fba2 2303 	umull	r2, r3, r2, r3
 80028ae:	0a9b      	lsrs	r3, r3, #10
 80028b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c2:	2208      	movs	r2, #8
 80028c4:	409a      	lsls	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4013      	ands	r3, r2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d01a      	beq.n	8002904 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d013      	beq.n	8002904 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0204 	bic.w	r2, r2, #4
 80028ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f0:	2208      	movs	r2, #8
 80028f2:	409a      	lsls	r2, r3
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028fc:	f043 0201 	orr.w	r2, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002908:	2201      	movs	r2, #1
 800290a:	409a      	lsls	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4013      	ands	r3, r2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d012      	beq.n	800293a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00b      	beq.n	800293a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002926:	2201      	movs	r2, #1
 8002928:	409a      	lsls	r2, r3
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002932:	f043 0202 	orr.w	r2, r3, #2
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800293e:	2204      	movs	r2, #4
 8002940:	409a      	lsls	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	4013      	ands	r3, r2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d012      	beq.n	8002970 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00b      	beq.n	8002970 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800295c:	2204      	movs	r2, #4
 800295e:	409a      	lsls	r2, r3
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002968:	f043 0204 	orr.w	r2, r3, #4
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002974:	2210      	movs	r2, #16
 8002976:	409a      	lsls	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4013      	ands	r3, r2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d043      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d03c      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002992:	2210      	movs	r2, #16
 8002994:	409a      	lsls	r2, r3
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d018      	beq.n	80029da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d108      	bne.n	80029c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d024      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	4798      	blx	r3
 80029c6:	e01f      	b.n	8002a08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d01b      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	4798      	blx	r3
 80029d8:	e016      	b.n	8002a08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d107      	bne.n	80029f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0208 	bic.w	r2, r2, #8
 80029f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	409a      	lsls	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4013      	ands	r3, r2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 808f 	beq.w	8002b38 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0310 	and.w	r3, r3, #16
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 8087 	beq.w	8002b38 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a2e:	2220      	movs	r2, #32
 8002a30:	409a      	lsls	r2, r3
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b05      	cmp	r3, #5
 8002a40:	d136      	bne.n	8002ab0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0216 	bic.w	r2, r2, #22
 8002a50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	695a      	ldr	r2, [r3, #20]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d103      	bne.n	8002a72 <HAL_DMA_IRQHandler+0x1da>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d007      	beq.n	8002a82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0208 	bic.w	r2, r2, #8
 8002a80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a86:	223f      	movs	r2, #63	@ 0x3f
 8002a88:	409a      	lsls	r2, r3
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d07e      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	4798      	blx	r3
        }
        return;
 8002aae:	e079      	b.n	8002ba4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d01d      	beq.n	8002afa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10d      	bne.n	8002ae8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d031      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	4798      	blx	r3
 8002adc:	e02c      	b.n	8002b38 <HAL_DMA_IRQHandler+0x2a0>
 8002ade:	bf00      	nop
 8002ae0:	20000004 	.word	0x20000004
 8002ae4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d023      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	4798      	blx	r3
 8002af8:	e01e      	b.n	8002b38 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10f      	bne.n	8002b28 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0210 	bic.w	r2, r2, #16
 8002b16:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d032      	beq.n	8002ba6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d022      	beq.n	8002b92 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2205      	movs	r2, #5
 8002b50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0201 	bic.w	r2, r2, #1
 8002b62:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	3301      	adds	r3, #1
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d307      	bcc.n	8002b80 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f2      	bne.n	8002b64 <HAL_DMA_IRQHandler+0x2cc>
 8002b7e:	e000      	b.n	8002b82 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b80:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d005      	beq.n	8002ba6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	4798      	blx	r3
 8002ba2:	e000      	b.n	8002ba6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ba4:	bf00      	nop
    }
  }
}
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
 8002bb8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002bc8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2b40      	cmp	r3, #64	@ 0x40
 8002bd8:	d108      	bne.n	8002bec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bea:	e007      	b.n	8002bfc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	60da      	str	r2, [r3, #12]
}
 8002bfc:	bf00      	nop
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	3b10      	subs	r3, #16
 8002c18:	4a14      	ldr	r2, [pc, #80]	@ (8002c6c <DMA_CalcBaseAndBitshift+0x64>)
 8002c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1e:	091b      	lsrs	r3, r3, #4
 8002c20:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c22:	4a13      	ldr	r2, [pc, #76]	@ (8002c70 <DMA_CalcBaseAndBitshift+0x68>)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4413      	add	r3, r2
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d909      	bls.n	8002c4a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c3e:	f023 0303 	bic.w	r3, r3, #3
 8002c42:	1d1a      	adds	r2, r3, #4
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c48:	e007      	b.n	8002c5a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c52:	f023 0303 	bic.w	r3, r3, #3
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	aaaaaaab 	.word	0xaaaaaaab
 8002c70:	08011900 	.word	0x08011900

08002c74 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c84:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d11f      	bne.n	8002cce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2b03      	cmp	r3, #3
 8002c92:	d856      	bhi.n	8002d42 <DMA_CheckFifoParam+0xce>
 8002c94:	a201      	add	r2, pc, #4	@ (adr r2, 8002c9c <DMA_CheckFifoParam+0x28>)
 8002c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c9a:	bf00      	nop
 8002c9c:	08002cad 	.word	0x08002cad
 8002ca0:	08002cbf 	.word	0x08002cbf
 8002ca4:	08002cad 	.word	0x08002cad
 8002ca8:	08002d43 	.word	0x08002d43
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d046      	beq.n	8002d46 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cbc:	e043      	b.n	8002d46 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002cc6:	d140      	bne.n	8002d4a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ccc:	e03d      	b.n	8002d4a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cd6:	d121      	bne.n	8002d1c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d837      	bhi.n	8002d4e <DMA_CheckFifoParam+0xda>
 8002cde:	a201      	add	r2, pc, #4	@ (adr r2, 8002ce4 <DMA_CheckFifoParam+0x70>)
 8002ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce4:	08002cf5 	.word	0x08002cf5
 8002ce8:	08002cfb 	.word	0x08002cfb
 8002cec:	08002cf5 	.word	0x08002cf5
 8002cf0:	08002d0d 	.word	0x08002d0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf8:	e030      	b.n	8002d5c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d025      	beq.n	8002d52 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d0a:	e022      	b.n	8002d52 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d10:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d14:	d11f      	bne.n	8002d56 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d1a:	e01c      	b.n	8002d56 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d903      	bls.n	8002d2a <DMA_CheckFifoParam+0xb6>
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d003      	beq.n	8002d30 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d28:	e018      	b.n	8002d5c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	73fb      	strb	r3, [r7, #15]
      break;
 8002d2e:	e015      	b.n	8002d5c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00e      	beq.n	8002d5a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d40:	e00b      	b.n	8002d5a <DMA_CheckFifoParam+0xe6>
      break;
 8002d42:	bf00      	nop
 8002d44:	e00a      	b.n	8002d5c <DMA_CheckFifoParam+0xe8>
      break;
 8002d46:	bf00      	nop
 8002d48:	e008      	b.n	8002d5c <DMA_CheckFifoParam+0xe8>
      break;
 8002d4a:	bf00      	nop
 8002d4c:	e006      	b.n	8002d5c <DMA_CheckFifoParam+0xe8>
      break;
 8002d4e:	bf00      	nop
 8002d50:	e004      	b.n	8002d5c <DMA_CheckFifoParam+0xe8>
      break;
 8002d52:	bf00      	nop
 8002d54:	e002      	b.n	8002d5c <DMA_CheckFifoParam+0xe8>
      break;   
 8002d56:	bf00      	nop
 8002d58:	e000      	b.n	8002d5c <DMA_CheckFifoParam+0xe8>
      break;
 8002d5a:	bf00      	nop
    }
  } 
  
  return status; 
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop

08002d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b089      	sub	sp, #36	@ 0x24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d82:	2300      	movs	r3, #0
 8002d84:	61fb      	str	r3, [r7, #28]
 8002d86:	e16b      	b.n	8003060 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d88:	2201      	movs	r2, #1
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	f040 815a 	bne.w	800305a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d005      	beq.n	8002dbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d130      	bne.n	8002e20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	2203      	movs	r2, #3
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002df4:	2201      	movs	r2, #1
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4013      	ands	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	091b      	lsrs	r3, r3, #4
 8002e0a:	f003 0201 	and.w	r2, r3, #1
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 0303 	and.w	r3, r3, #3
 8002e28:	2b03      	cmp	r3, #3
 8002e2a:	d017      	beq.n	8002e5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	2203      	movs	r2, #3
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4013      	ands	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 0303 	and.w	r3, r3, #3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d123      	bne.n	8002eb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	08da      	lsrs	r2, r3, #3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3208      	adds	r2, #8
 8002e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	220f      	movs	r2, #15
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	691a      	ldr	r2, [r3, #16]
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	08da      	lsrs	r2, r3, #3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	3208      	adds	r2, #8
 8002eaa:	69b9      	ldr	r1, [r7, #24]
 8002eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	2203      	movs	r2, #3
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f003 0203 	and.w	r2, r3, #3
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 80b4 	beq.w	800305a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	4b60      	ldr	r3, [pc, #384]	@ (8003078 <HAL_GPIO_Init+0x30c>)
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efa:	4a5f      	ldr	r2, [pc, #380]	@ (8003078 <HAL_GPIO_Init+0x30c>)
 8002efc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f00:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f02:	4b5d      	ldr	r3, [pc, #372]	@ (8003078 <HAL_GPIO_Init+0x30c>)
 8002f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f0e:	4a5b      	ldr	r2, [pc, #364]	@ (800307c <HAL_GPIO_Init+0x310>)
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	089b      	lsrs	r3, r3, #2
 8002f14:	3302      	adds	r3, #2
 8002f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	220f      	movs	r2, #15
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a52      	ldr	r2, [pc, #328]	@ (8003080 <HAL_GPIO_Init+0x314>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d02b      	beq.n	8002f92 <HAL_GPIO_Init+0x226>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a51      	ldr	r2, [pc, #324]	@ (8003084 <HAL_GPIO_Init+0x318>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d025      	beq.n	8002f8e <HAL_GPIO_Init+0x222>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a50      	ldr	r2, [pc, #320]	@ (8003088 <HAL_GPIO_Init+0x31c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d01f      	beq.n	8002f8a <HAL_GPIO_Init+0x21e>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a4f      	ldr	r2, [pc, #316]	@ (800308c <HAL_GPIO_Init+0x320>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d019      	beq.n	8002f86 <HAL_GPIO_Init+0x21a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a4e      	ldr	r2, [pc, #312]	@ (8003090 <HAL_GPIO_Init+0x324>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d013      	beq.n	8002f82 <HAL_GPIO_Init+0x216>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a4d      	ldr	r2, [pc, #308]	@ (8003094 <HAL_GPIO_Init+0x328>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d00d      	beq.n	8002f7e <HAL_GPIO_Init+0x212>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a4c      	ldr	r2, [pc, #304]	@ (8003098 <HAL_GPIO_Init+0x32c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d007      	beq.n	8002f7a <HAL_GPIO_Init+0x20e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a4b      	ldr	r2, [pc, #300]	@ (800309c <HAL_GPIO_Init+0x330>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d101      	bne.n	8002f76 <HAL_GPIO_Init+0x20a>
 8002f72:	2307      	movs	r3, #7
 8002f74:	e00e      	b.n	8002f94 <HAL_GPIO_Init+0x228>
 8002f76:	2308      	movs	r3, #8
 8002f78:	e00c      	b.n	8002f94 <HAL_GPIO_Init+0x228>
 8002f7a:	2306      	movs	r3, #6
 8002f7c:	e00a      	b.n	8002f94 <HAL_GPIO_Init+0x228>
 8002f7e:	2305      	movs	r3, #5
 8002f80:	e008      	b.n	8002f94 <HAL_GPIO_Init+0x228>
 8002f82:	2304      	movs	r3, #4
 8002f84:	e006      	b.n	8002f94 <HAL_GPIO_Init+0x228>
 8002f86:	2303      	movs	r3, #3
 8002f88:	e004      	b.n	8002f94 <HAL_GPIO_Init+0x228>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e002      	b.n	8002f94 <HAL_GPIO_Init+0x228>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e000      	b.n	8002f94 <HAL_GPIO_Init+0x228>
 8002f92:	2300      	movs	r3, #0
 8002f94:	69fa      	ldr	r2, [r7, #28]
 8002f96:	f002 0203 	and.w	r2, r2, #3
 8002f9a:	0092      	lsls	r2, r2, #2
 8002f9c:	4093      	lsls	r3, r2
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fa4:	4935      	ldr	r1, [pc, #212]	@ (800307c <HAL_GPIO_Init+0x310>)
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	089b      	lsrs	r3, r3, #2
 8002faa:	3302      	adds	r3, #2
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fb2:	4b3b      	ldr	r3, [pc, #236]	@ (80030a0 <HAL_GPIO_Init+0x334>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fd6:	4a32      	ldr	r2, [pc, #200]	@ (80030a0 <HAL_GPIO_Init+0x334>)
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fdc:	4b30      	ldr	r3, [pc, #192]	@ (80030a0 <HAL_GPIO_Init+0x334>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003000:	4a27      	ldr	r2, [pc, #156]	@ (80030a0 <HAL_GPIO_Init+0x334>)
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003006:	4b26      	ldr	r3, [pc, #152]	@ (80030a0 <HAL_GPIO_Init+0x334>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	43db      	mvns	r3, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4013      	ands	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	4313      	orrs	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800302a:	4a1d      	ldr	r2, [pc, #116]	@ (80030a0 <HAL_GPIO_Init+0x334>)
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003030:	4b1b      	ldr	r3, [pc, #108]	@ (80030a0 <HAL_GPIO_Init+0x334>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	43db      	mvns	r3, r3
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4013      	ands	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	4313      	orrs	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003054:	4a12      	ldr	r2, [pc, #72]	@ (80030a0 <HAL_GPIO_Init+0x334>)
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	3301      	adds	r3, #1
 800305e:	61fb      	str	r3, [r7, #28]
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	2b0f      	cmp	r3, #15
 8003064:	f67f ae90 	bls.w	8002d88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003068:	bf00      	nop
 800306a:	bf00      	nop
 800306c:	3724      	adds	r7, #36	@ 0x24
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40023800 	.word	0x40023800
 800307c:	40013800 	.word	0x40013800
 8003080:	40020000 	.word	0x40020000
 8003084:	40020400 	.word	0x40020400
 8003088:	40020800 	.word	0x40020800
 800308c:	40020c00 	.word	0x40020c00
 8003090:	40021000 	.word	0x40021000
 8003094:	40021400 	.word	0x40021400
 8003098:	40021800 	.word	0x40021800
 800309c:	40021c00 	.word	0x40021c00
 80030a0:	40013c00 	.word	0x40013c00

080030a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691a      	ldr	r2, [r3, #16]
 80030b4:	887b      	ldrh	r3, [r7, #2]
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
 80030c0:	e001      	b.n	80030c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030c2:	2300      	movs	r3, #0
 80030c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	807b      	strh	r3, [r7, #2]
 80030e0:	4613      	mov	r3, r2
 80030e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030e4:	787b      	ldrb	r3, [r7, #1]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ea:	887a      	ldrh	r2, [r7, #2]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030f0:	e003      	b.n	80030fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030f2:	887b      	ldrh	r3, [r7, #2]
 80030f4:	041a      	lsls	r2, r3, #16
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	619a      	str	r2, [r3, #24]
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b086      	sub	sp, #24
 800310a:	af02      	add	r7, sp, #8
 800310c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e059      	b.n	80031cc <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d106      	bne.n	8003138 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f00d fb6c 	bl	8010810 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2203      	movs	r2, #3
 800313c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003146:	d102      	bne.n	800314e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f006 fccf 	bl	8009af6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6818      	ldr	r0, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	7c1a      	ldrb	r2, [r3, #16]
 8003160:	f88d 2000 	strb.w	r2, [sp]
 8003164:	3304      	adds	r3, #4
 8003166:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003168:	f006 fc50 	bl	8009a0c <USB_CoreInit>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d005      	beq.n	800317e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2202      	movs	r2, #2
 8003176:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e026      	b.n	80031cc <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2101      	movs	r1, #1
 8003184:	4618      	mov	r0, r3
 8003186:	f006 fcc7 	bl	8009b18 <USB_SetCurrentMode>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d005      	beq.n	800319c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e017      	b.n	80031cc <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	7c1a      	ldrb	r2, [r3, #16]
 80031a4:	f88d 2000 	strb.w	r2, [sp]
 80031a8:	3304      	adds	r3, #4
 80031aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031ac:	f006 fe6a 	bl	8009e84 <USB_HostInit>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d005      	beq.n	80031c2 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2202      	movs	r2, #2
 80031ba:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e004      	b.n	80031cc <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80031d4:	b590      	push	{r4, r7, lr}
 80031d6:	b08b      	sub	sp, #44	@ 0x2c
 80031d8:	af04      	add	r7, sp, #16
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	4608      	mov	r0, r1
 80031de:	4611      	mov	r1, r2
 80031e0:	461a      	mov	r2, r3
 80031e2:	4603      	mov	r3, r0
 80031e4:	70fb      	strb	r3, [r7, #3]
 80031e6:	460b      	mov	r3, r1
 80031e8:	70bb      	strb	r3, [r7, #2]
 80031ea:	4613      	mov	r3, r2
 80031ec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80031ee:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80031f0:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_HCD_HC_Init+0x2c>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e09d      	b.n	800333c <HAL_HCD_HC_Init+0x168>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003208:	78fa      	ldrb	r2, [r7, #3]
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	1a9b      	subs	r3, r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	3319      	adds	r3, #25
 8003218:	2200      	movs	r2, #0
 800321a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800321c:	78fa      	ldrb	r2, [r7, #3]
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	1a9b      	subs	r3, r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	3314      	adds	r3, #20
 800322c:	787a      	ldrb	r2, [r7, #1]
 800322e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003230:	78fa      	ldrb	r2, [r7, #3]
 8003232:	6879      	ldr	r1, [r7, #4]
 8003234:	4613      	mov	r3, r2
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	1a9b      	subs	r3, r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	3315      	adds	r3, #21
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003244:	78fa      	ldrb	r2, [r7, #3]
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	1a9b      	subs	r3, r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	3326      	adds	r3, #38	@ 0x26
 8003254:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003258:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800325a:	78fa      	ldrb	r2, [r7, #3]
 800325c:	78bb      	ldrb	r3, [r7, #2]
 800325e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003262:	b2d8      	uxtb	r0, r3
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	1a9b      	subs	r3, r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	440b      	add	r3, r1
 8003270:	3316      	adds	r3, #22
 8003272:	4602      	mov	r2, r0
 8003274:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8003276:	78fb      	ldrb	r3, [r7, #3]
 8003278:	4619      	mov	r1, r3
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 fbc8 	bl	8003a10 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003280:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003284:	2b00      	cmp	r3, #0
 8003286:	da0a      	bge.n	800329e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003288:	78fa      	ldrb	r2, [r7, #3]
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	4613      	mov	r3, r2
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	1a9b      	subs	r3, r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	3317      	adds	r3, #23
 8003298:	2201      	movs	r2, #1
 800329a:	701a      	strb	r2, [r3, #0]
 800329c:	e009      	b.n	80032b2 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800329e:	78fa      	ldrb	r2, [r7, #3]
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	4613      	mov	r3, r2
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	1a9b      	subs	r3, r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	3317      	adds	r3, #23
 80032ae:	2200      	movs	r2, #0
 80032b0:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f006 ff48 	bl	800a14c <USB_GetHostSpeed>
 80032bc:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80032be:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d10b      	bne.n	80032de <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80032c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d107      	bne.n	80032de <HAL_HCD_HC_Init+0x10a>
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d104      	bne.n	80032de <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	2bbc      	cmp	r3, #188	@ 0xbc
 80032d8:	d901      	bls.n	80032de <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80032da:	23bc      	movs	r3, #188	@ 0xbc
 80032dc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80032de:	78fa      	ldrb	r2, [r7, #3]
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	4613      	mov	r3, r2
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	1a9b      	subs	r3, r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	440b      	add	r3, r1
 80032ec:	3318      	adds	r3, #24
 80032ee:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80032f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80032f4:	78fa      	ldrb	r2, [r7, #3]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	b298      	uxth	r0, r3
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	1a9b      	subs	r3, r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	3328      	adds	r3, #40	@ 0x28
 8003308:	4602      	mov	r2, r0
 800330a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6818      	ldr	r0, [r3, #0]
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	b29b      	uxth	r3, r3
 8003314:	787c      	ldrb	r4, [r7, #1]
 8003316:	78ba      	ldrb	r2, [r7, #2]
 8003318:	78f9      	ldrb	r1, [r7, #3]
 800331a:	9302      	str	r3, [sp, #8]
 800331c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003320:	9301      	str	r3, [sp, #4]
 8003322:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	4623      	mov	r3, r4
 800332a:	f006 ff37 	bl	800a19c <USB_HC_Init>
 800332e:	4603      	mov	r3, r0
 8003330:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800333a:	7bfb      	ldrb	r3, [r7, #15]
}
 800333c:	4618      	mov	r0, r3
 800333e:	371c      	adds	r7, #28
 8003340:	46bd      	mov	sp, r7
 8003342:	bd90      	pop	{r4, r7, pc}

08003344 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	460b      	mov	r3, r1
 800334e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003350:	2300      	movs	r3, #0
 8003352:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <HAL_HCD_HC_Halt+0x1e>
 800335e:	2302      	movs	r3, #2
 8003360:	e00f      	b.n	8003382 <HAL_HCD_HC_Halt+0x3e>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	78fa      	ldrb	r2, [r7, #3]
 8003370:	4611      	mov	r1, r2
 8003372:	4618      	mov	r0, r3
 8003374:	f007 fac9 	bl	800a90a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003380:	7bfb      	ldrb	r3, [r7, #15]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	4608      	mov	r0, r1
 8003396:	4611      	mov	r1, r2
 8003398:	461a      	mov	r2, r3
 800339a:	4603      	mov	r3, r0
 800339c:	70fb      	strb	r3, [r7, #3]
 800339e:	460b      	mov	r3, r1
 80033a0:	70bb      	strb	r3, [r7, #2]
 80033a2:	4613      	mov	r3, r2
 80033a4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80033a6:	78fa      	ldrb	r2, [r7, #3]
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	4613      	mov	r3, r2
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	1a9b      	subs	r3, r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	440b      	add	r3, r1
 80033b4:	3317      	adds	r3, #23
 80033b6:	78ba      	ldrb	r2, [r7, #2]
 80033b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80033ba:	78fa      	ldrb	r2, [r7, #3]
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	3326      	adds	r3, #38	@ 0x26
 80033ca:	787a      	ldrb	r2, [r7, #1]
 80033cc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80033ce:	7c3b      	ldrb	r3, [r7, #16]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d114      	bne.n	80033fe <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80033d4:	78fa      	ldrb	r2, [r7, #3]
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	332a      	adds	r3, #42	@ 0x2a
 80033e4:	2203      	movs	r2, #3
 80033e6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	3319      	adds	r3, #25
 80033f8:	7f3a      	ldrb	r2, [r7, #28]
 80033fa:	701a      	strb	r2, [r3, #0]
 80033fc:	e009      	b.n	8003412 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033fe:	78fa      	ldrb	r2, [r7, #3]
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	1a9b      	subs	r3, r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	440b      	add	r3, r1
 800340c:	332a      	adds	r3, #42	@ 0x2a
 800340e:	2202      	movs	r2, #2
 8003410:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003412:	787b      	ldrb	r3, [r7, #1]
 8003414:	2b03      	cmp	r3, #3
 8003416:	f200 8102 	bhi.w	800361e <HAL_HCD_HC_SubmitRequest+0x292>
 800341a:	a201      	add	r2, pc, #4	@ (adr r2, 8003420 <HAL_HCD_HC_SubmitRequest+0x94>)
 800341c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003420:	08003431 	.word	0x08003431
 8003424:	08003609 	.word	0x08003609
 8003428:	080034f5 	.word	0x080034f5
 800342c:	0800357f 	.word	0x0800357f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003430:	7c3b      	ldrb	r3, [r7, #16]
 8003432:	2b01      	cmp	r3, #1
 8003434:	f040 80f5 	bne.w	8003622 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003438:	78bb      	ldrb	r3, [r7, #2]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d12d      	bne.n	800349a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800343e:	8b3b      	ldrh	r3, [r7, #24]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d109      	bne.n	8003458 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003444:	78fa      	ldrb	r2, [r7, #3]
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	1a9b      	subs	r3, r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	333d      	adds	r3, #61	@ 0x3d
 8003454:	2201      	movs	r2, #1
 8003456:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003458:	78fa      	ldrb	r2, [r7, #3]
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	1a9b      	subs	r3, r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	333d      	adds	r3, #61	@ 0x3d
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10a      	bne.n	8003484 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800346e:	78fa      	ldrb	r2, [r7, #3]
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	4613      	mov	r3, r2
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	1a9b      	subs	r3, r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	440b      	add	r3, r1
 800347c:	332a      	adds	r3, #42	@ 0x2a
 800347e:	2200      	movs	r2, #0
 8003480:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003482:	e0ce      	b.n	8003622 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003484:	78fa      	ldrb	r2, [r7, #3]
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	4613      	mov	r3, r2
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	1a9b      	subs	r3, r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	332a      	adds	r3, #42	@ 0x2a
 8003494:	2202      	movs	r2, #2
 8003496:	701a      	strb	r2, [r3, #0]
      break;
 8003498:	e0c3      	b.n	8003622 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	331a      	adds	r3, #26
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	f040 80b8 	bne.w	8003622 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80034b2:	78fa      	ldrb	r2, [r7, #3]
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	1a9b      	subs	r3, r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	333c      	adds	r3, #60	@ 0x3c
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10a      	bne.n	80034de <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034c8:	78fa      	ldrb	r2, [r7, #3]
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	1a9b      	subs	r3, r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	332a      	adds	r3, #42	@ 0x2a
 80034d8:	2200      	movs	r2, #0
 80034da:	701a      	strb	r2, [r3, #0]
      break;
 80034dc:	e0a1      	b.n	8003622 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034de:	78fa      	ldrb	r2, [r7, #3]
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	4613      	mov	r3, r2
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	1a9b      	subs	r3, r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	440b      	add	r3, r1
 80034ec:	332a      	adds	r3, #42	@ 0x2a
 80034ee:	2202      	movs	r2, #2
 80034f0:	701a      	strb	r2, [r3, #0]
      break;
 80034f2:	e096      	b.n	8003622 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80034f4:	78bb      	ldrb	r3, [r7, #2]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d120      	bne.n	800353c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80034fa:	78fa      	ldrb	r2, [r7, #3]
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	1a9b      	subs	r3, r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	333d      	adds	r3, #61	@ 0x3d
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10a      	bne.n	8003526 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003510:	78fa      	ldrb	r2, [r7, #3]
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	1a9b      	subs	r3, r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	332a      	adds	r3, #42	@ 0x2a
 8003520:	2200      	movs	r2, #0
 8003522:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003524:	e07e      	b.n	8003624 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003526:	78fa      	ldrb	r2, [r7, #3]
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	1a9b      	subs	r3, r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	440b      	add	r3, r1
 8003534:	332a      	adds	r3, #42	@ 0x2a
 8003536:	2202      	movs	r2, #2
 8003538:	701a      	strb	r2, [r3, #0]
      break;
 800353a:	e073      	b.n	8003624 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800353c:	78fa      	ldrb	r2, [r7, #3]
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	4613      	mov	r3, r2
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	333c      	adds	r3, #60	@ 0x3c
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10a      	bne.n	8003568 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003552:	78fa      	ldrb	r2, [r7, #3]
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	1a9b      	subs	r3, r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	332a      	adds	r3, #42	@ 0x2a
 8003562:	2200      	movs	r2, #0
 8003564:	701a      	strb	r2, [r3, #0]
      break;
 8003566:	e05d      	b.n	8003624 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003568:	78fa      	ldrb	r2, [r7, #3]
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	4613      	mov	r3, r2
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	1a9b      	subs	r3, r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	332a      	adds	r3, #42	@ 0x2a
 8003578:	2202      	movs	r2, #2
 800357a:	701a      	strb	r2, [r3, #0]
      break;
 800357c:	e052      	b.n	8003624 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800357e:	78bb      	ldrb	r3, [r7, #2]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d120      	bne.n	80035c6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003584:	78fa      	ldrb	r2, [r7, #3]
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	4613      	mov	r3, r2
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	1a9b      	subs	r3, r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	333d      	adds	r3, #61	@ 0x3d
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10a      	bne.n	80035b0 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800359a:	78fa      	ldrb	r2, [r7, #3]
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	4613      	mov	r3, r2
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	1a9b      	subs	r3, r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	332a      	adds	r3, #42	@ 0x2a
 80035aa:	2200      	movs	r2, #0
 80035ac:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80035ae:	e039      	b.n	8003624 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80035b0:	78fa      	ldrb	r2, [r7, #3]
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	4613      	mov	r3, r2
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	1a9b      	subs	r3, r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	332a      	adds	r3, #42	@ 0x2a
 80035c0:	2202      	movs	r2, #2
 80035c2:	701a      	strb	r2, [r3, #0]
      break;
 80035c4:	e02e      	b.n	8003624 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80035c6:	78fa      	ldrb	r2, [r7, #3]
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	1a9b      	subs	r3, r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	440b      	add	r3, r1
 80035d4:	333c      	adds	r3, #60	@ 0x3c
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10a      	bne.n	80035f2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80035dc:	78fa      	ldrb	r2, [r7, #3]
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	4613      	mov	r3, r2
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	1a9b      	subs	r3, r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	332a      	adds	r3, #42	@ 0x2a
 80035ec:	2200      	movs	r2, #0
 80035ee:	701a      	strb	r2, [r3, #0]
      break;
 80035f0:	e018      	b.n	8003624 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80035f2:	78fa      	ldrb	r2, [r7, #3]
 80035f4:	6879      	ldr	r1, [r7, #4]
 80035f6:	4613      	mov	r3, r2
 80035f8:	011b      	lsls	r3, r3, #4
 80035fa:	1a9b      	subs	r3, r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	440b      	add	r3, r1
 8003600:	332a      	adds	r3, #42	@ 0x2a
 8003602:	2202      	movs	r2, #2
 8003604:	701a      	strb	r2, [r3, #0]
      break;
 8003606:	e00d      	b.n	8003624 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003608:	78fa      	ldrb	r2, [r7, #3]
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	1a9b      	subs	r3, r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	332a      	adds	r3, #42	@ 0x2a
 8003618:	2200      	movs	r2, #0
 800361a:	701a      	strb	r2, [r3, #0]
      break;
 800361c:	e002      	b.n	8003624 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800361e:	bf00      	nop
 8003620:	e000      	b.n	8003624 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003622:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003624:	78fa      	ldrb	r2, [r7, #3]
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	4613      	mov	r3, r2
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	1a9b      	subs	r3, r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	332c      	adds	r3, #44	@ 0x2c
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003638:	78fa      	ldrb	r2, [r7, #3]
 800363a:	8b39      	ldrh	r1, [r7, #24]
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	1a9b      	subs	r3, r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4403      	add	r3, r0
 8003648:	3334      	adds	r3, #52	@ 0x34
 800364a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800364c:	78fa      	ldrb	r2, [r7, #3]
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	4613      	mov	r3, r2
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	1a9b      	subs	r3, r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	334c      	adds	r3, #76	@ 0x4c
 800365c:	2200      	movs	r2, #0
 800365e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003660:	78fa      	ldrb	r2, [r7, #3]
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	4613      	mov	r3, r2
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	1a9b      	subs	r3, r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	3338      	adds	r3, #56	@ 0x38
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003674:	78fa      	ldrb	r2, [r7, #3]
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	1a9b      	subs	r3, r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	3315      	adds	r3, #21
 8003684:	78fa      	ldrb	r2, [r7, #3]
 8003686:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003688:	78fa      	ldrb	r2, [r7, #3]
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	4613      	mov	r3, r2
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	1a9b      	subs	r3, r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	334d      	adds	r3, #77	@ 0x4d
 8003698:	2200      	movs	r2, #0
 800369a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6818      	ldr	r0, [r3, #0]
 80036a0:	78fa      	ldrb	r2, [r7, #3]
 80036a2:	4613      	mov	r3, r2
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	1a9b      	subs	r3, r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	3310      	adds	r3, #16
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	4413      	add	r3, r2
 80036b0:	1d19      	adds	r1, r3, #4
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	799b      	ldrb	r3, [r3, #6]
 80036b6:	461a      	mov	r2, r3
 80036b8:	f006 fe9c 	bl	800a3f4 <USB_HC_StartXfer>
 80036bc:	4603      	mov	r3, r0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop

080036c8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f006 fb90 	bl	8009e04 <USB_GetMode>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	f040 80fb 	bne.w	80038e2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f006 fb53 	bl	8009d9c <USB_ReadInterrupts>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 80f1 	beq.w	80038e0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f006 fb4a 	bl	8009d9c <USB_ReadInterrupts>
 8003708:	4603      	mov	r3, r0
 800370a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800370e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003712:	d104      	bne.n	800371e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800371c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f006 fb3a 	bl	8009d9c <USB_ReadInterrupts>
 8003728:	4603      	mov	r3, r0
 800372a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800372e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003732:	d104      	bne.n	800373e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800373c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f006 fb2a 	bl	8009d9c <USB_ReadInterrupts>
 8003748:	4603      	mov	r3, r0
 800374a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800374e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003752:	d104      	bne.n	800375e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800375c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f006 fb1a 	bl	8009d9c <USB_ReadInterrupts>
 8003768:	4603      	mov	r3, r0
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b02      	cmp	r3, #2
 8003770:	d103      	bne.n	800377a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2202      	movs	r2, #2
 8003778:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f006 fb0c 	bl	8009d9c <USB_ReadInterrupts>
 8003784:	4603      	mov	r3, r0
 8003786:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800378a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800378e:	d120      	bne.n	80037d2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003798:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d113      	bne.n	80037d2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80037aa:	2110      	movs	r1, #16
 80037ac:	6938      	ldr	r0, [r7, #16]
 80037ae:	f006 f9ff 	bl	8009bb0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80037b2:	6938      	ldr	r0, [r7, #16]
 80037b4:	f006 fa2e 	bl	8009c14 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	7a5b      	ldrb	r3, [r3, #9]
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d105      	bne.n	80037cc <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2101      	movs	r1, #1
 80037c6:	4618      	mov	r0, r3
 80037c8:	f006 fc20 	bl	800a00c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f00d f89d 	bl	801090c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f006 fae0 	bl	8009d9c <USB_ReadInterrupts>
 80037dc:	4603      	mov	r3, r0
 80037de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037e6:	d102      	bne.n	80037ee <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f001 fd33 	bl	8005254 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f006 fad2 	bl	8009d9c <USB_ReadInterrupts>
 80037f8:	4603      	mov	r3, r0
 80037fa:	f003 0308 	and.w	r3, r3, #8
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d106      	bne.n	8003810 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f00d f866 	bl	80108d4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2208      	movs	r2, #8
 800380e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f006 fac1 	bl	8009d9c <USB_ReadInterrupts>
 800381a:	4603      	mov	r3, r0
 800381c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003820:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003824:	d139      	bne.n	800389a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f007 f85c 	bl	800a8e8 <USB_HC_ReadInterrupt>
 8003830:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003832:	2300      	movs	r3, #0
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	e025      	b.n	8003884 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	fa22 f303 	lsr.w	r3, r2, r3
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b00      	cmp	r3, #0
 800384a:	d018      	beq.n	800387e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	015a      	lsls	r2, r3, #5
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4413      	add	r3, r2
 8003854:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800385e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003862:	d106      	bne.n	8003872 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	b2db      	uxtb	r3, r3
 8003868:	4619      	mov	r1, r3
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f905 	bl	8003a7a <HCD_HC_IN_IRQHandler>
 8003870:	e005      	b.n	800387e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	b2db      	uxtb	r3, r3
 8003876:	4619      	mov	r1, r3
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 ff67 	bl	800474c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	3301      	adds	r3, #1
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	795b      	ldrb	r3, [r3, #5]
 8003888:	461a      	mov	r2, r3
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	4293      	cmp	r3, r2
 800388e:	d3d3      	bcc.n	8003838 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003898:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f006 fa7c 	bl	8009d9c <USB_ReadInterrupts>
 80038a4:	4603      	mov	r3, r0
 80038a6:	f003 0310 	and.w	r3, r3, #16
 80038aa:	2b10      	cmp	r3, #16
 80038ac:	d101      	bne.n	80038b2 <HAL_HCD_IRQHandler+0x1ea>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <HAL_HCD_IRQHandler+0x1ec>
 80038b2:	2300      	movs	r3, #0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d014      	beq.n	80038e2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	699a      	ldr	r2, [r3, #24]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0210 	bic.w	r2, r2, #16
 80038c6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f001 fbe4 	bl	8005096 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	699a      	ldr	r2, [r3, #24]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f042 0210 	orr.w	r2, r2, #16
 80038dc:	619a      	str	r2, [r3, #24]
 80038de:	e000      	b.n	80038e2 <HAL_HCD_IRQHandler+0x21a>
      return;
 80038e0:	bf00      	nop
    }
  }
}
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d101      	bne.n	80038fe <HAL_HCD_Start+0x16>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e013      	b.n	8003926 <HAL_HCD_Start+0x3e>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2101      	movs	r1, #1
 800390c:	4618      	mov	r0, r3
 800390e:	f006 fbe4 	bl	800a0da <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f006 f8dc 	bl	8009ad4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b082      	sub	sp, #8
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800393c:	2b01      	cmp	r3, #1
 800393e:	d101      	bne.n	8003944 <HAL_HCD_Stop+0x16>
 8003940:	2302      	movs	r3, #2
 8003942:	e00d      	b.n	8003960 <HAL_HCD_Stop+0x32>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	f007 f937 	bl	800abc4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f006 fb86 	bl	800a086 <USB_ResetPort>
 800397a:	4603      	mov	r3, r0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	460b      	mov	r3, r1
 800398e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	1a9b      	subs	r3, r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	334c      	adds	r3, #76	@ 0x4c
 80039a0:	781b      	ldrb	r3, [r3, #0]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
 80039b6:	460b      	mov	r3, r1
 80039b8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80039ba:	78fa      	ldrb	r2, [r7, #3]
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	4613      	mov	r3, r2
 80039c0:	011b      	lsls	r3, r3, #4
 80039c2:	1a9b      	subs	r3, r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	440b      	add	r3, r1
 80039c8:	3338      	adds	r3, #56	@ 0x38
 80039ca:	681b      	ldr	r3, [r3, #0]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f006 fbc8 	bl	800a17a <USB_GetCurrentFrame>
 80039ea:	4603      	mov	r3, r0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f006 fba3 	bl	800a14c <USB_GetHostSpeed>
 8003a06:	4603      	mov	r3, r0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	460b      	mov	r3, r1
 8003a1a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003a1c:	78fa      	ldrb	r2, [r7, #3]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	1a9b      	subs	r3, r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	331a      	adds	r3, #26
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003a30:	78fa      	ldrb	r2, [r7, #3]
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	4613      	mov	r3, r2
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	331b      	adds	r3, #27
 8003a40:	2200      	movs	r2, #0
 8003a42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003a44:	78fa      	ldrb	r2, [r7, #3]
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	1a9b      	subs	r3, r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	440b      	add	r3, r1
 8003a52:	3325      	adds	r3, #37	@ 0x25
 8003a54:	2200      	movs	r2, #0
 8003a56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003a58:	78fa      	ldrb	r2, [r7, #3]
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	011b      	lsls	r3, r3, #4
 8003a60:	1a9b      	subs	r3, r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	3324      	adds	r3, #36	@ 0x24
 8003a68:	2200      	movs	r2, #0
 8003a6a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b086      	sub	sp, #24
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	460b      	mov	r3, r1
 8003a84:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	78fa      	ldrb	r2, [r7, #3]
 8003a96:	4611      	mov	r1, r2
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f006 f992 	bl	8009dc2 <USB_ReadChInterrupts>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	d11a      	bne.n	8003ade <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	2304      	movs	r3, #4
 8003ab8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003aba:	78fa      	ldrb	r2, [r7, #3]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	334d      	adds	r3, #77	@ 0x4d
 8003aca:	2207      	movs	r2, #7
 8003acc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	78fa      	ldrb	r2, [r7, #3]
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f006 ff17 	bl	800a90a <USB_HC_Halt>
 8003adc:	e09e      	b.n	8003c1c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	78fa      	ldrb	r2, [r7, #3]
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f006 f96b 	bl	8009dc2 <USB_ReadChInterrupts>
 8003aec:	4603      	mov	r3, r0
 8003aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003af6:	d11b      	bne.n	8003b30 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003af8:	78fb      	ldrb	r3, [r7, #3]
 8003afa:	015a      	lsls	r2, r3, #5
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	4413      	add	r3, r2
 8003b00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b04:	461a      	mov	r2, r3
 8003b06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003b0c:	78fa      	ldrb	r2, [r7, #3]
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	4613      	mov	r3, r2
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	1a9b      	subs	r3, r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	334d      	adds	r3, #77	@ 0x4d
 8003b1c:	2208      	movs	r2, #8
 8003b1e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	78fa      	ldrb	r2, [r7, #3]
 8003b26:	4611      	mov	r1, r2
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f006 feee 	bl	800a90a <USB_HC_Halt>
 8003b2e:	e075      	b.n	8003c1c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	78fa      	ldrb	r2, [r7, #3]
 8003b36:	4611      	mov	r1, r2
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f006 f942 	bl	8009dc2 <USB_ReadChInterrupts>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	f003 0308 	and.w	r3, r3, #8
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d11a      	bne.n	8003b7e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003b48:	78fb      	ldrb	r3, [r7, #3]
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b54:	461a      	mov	r2, r3
 8003b56:	2308      	movs	r3, #8
 8003b58:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003b5a:	78fa      	ldrb	r2, [r7, #3]
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	1a9b      	subs	r3, r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	440b      	add	r3, r1
 8003b68:	334d      	adds	r3, #77	@ 0x4d
 8003b6a:	2206      	movs	r2, #6
 8003b6c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	78fa      	ldrb	r2, [r7, #3]
 8003b74:	4611      	mov	r1, r2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f006 fec7 	bl	800a90a <USB_HC_Halt>
 8003b7c:	e04e      	b.n	8003c1c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	78fa      	ldrb	r2, [r7, #3]
 8003b84:	4611      	mov	r1, r2
 8003b86:	4618      	mov	r0, r3
 8003b88:	f006 f91b 	bl	8009dc2 <USB_ReadChInterrupts>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b96:	d11b      	bne.n	8003bd0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003b98:	78fb      	ldrb	r3, [r7, #3]
 8003b9a:	015a      	lsls	r2, r3, #5
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003baa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003bac:	78fa      	ldrb	r2, [r7, #3]
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	1a9b      	subs	r3, r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	334d      	adds	r3, #77	@ 0x4d
 8003bbc:	2209      	movs	r2, #9
 8003bbe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	78fa      	ldrb	r2, [r7, #3]
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f006 fe9e 	bl	800a90a <USB_HC_Halt>
 8003bce:	e025      	b.n	8003c1c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	78fa      	ldrb	r2, [r7, #3]
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f006 f8f2 	bl	8009dc2 <USB_ReadChInterrupts>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003be4:	2b80      	cmp	r3, #128	@ 0x80
 8003be6:	d119      	bne.n	8003c1c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003be8:	78fb      	ldrb	r3, [r7, #3]
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	2380      	movs	r3, #128	@ 0x80
 8003bf8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003bfa:	78fa      	ldrb	r2, [r7, #3]
 8003bfc:	6879      	ldr	r1, [r7, #4]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	1a9b      	subs	r3, r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	440b      	add	r3, r1
 8003c08:	334d      	adds	r3, #77	@ 0x4d
 8003c0a:	2207      	movs	r2, #7
 8003c0c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	78fa      	ldrb	r2, [r7, #3]
 8003c14:	4611      	mov	r1, r2
 8003c16:	4618      	mov	r0, r3
 8003c18:	f006 fe77 	bl	800a90a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	78fa      	ldrb	r2, [r7, #3]
 8003c22:	4611      	mov	r1, r2
 8003c24:	4618      	mov	r0, r3
 8003c26:	f006 f8cc 	bl	8009dc2 <USB_ReadChInterrupts>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c34:	d112      	bne.n	8003c5c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	78fa      	ldrb	r2, [r7, #3]
 8003c3c:	4611      	mov	r1, r2
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f006 fe63 	bl	800a90a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003c44:	78fb      	ldrb	r3, [r7, #3]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c50:	461a      	mov	r2, r3
 8003c52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c56:	6093      	str	r3, [r2, #8]
 8003c58:	f000 bd75 	b.w	8004746 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	78fa      	ldrb	r2, [r7, #3]
 8003c62:	4611      	mov	r1, r2
 8003c64:	4618      	mov	r0, r3
 8003c66:	f006 f8ac 	bl	8009dc2 <USB_ReadChInterrupts>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	f040 8128 	bne.w	8003ec6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003c76:	78fb      	ldrb	r3, [r7, #3]
 8003c78:	015a      	lsls	r2, r3, #5
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c82:	461a      	mov	r2, r3
 8003c84:	2320      	movs	r3, #32
 8003c86:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003c88:	78fa      	ldrb	r2, [r7, #3]
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	1a9b      	subs	r3, r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	331b      	adds	r3, #27
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d119      	bne.n	8003cd2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003c9e:	78fa      	ldrb	r2, [r7, #3]
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	1a9b      	subs	r3, r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	440b      	add	r3, r1
 8003cac:	331b      	adds	r3, #27
 8003cae:	2200      	movs	r2, #0
 8003cb0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003cb2:	78fb      	ldrb	r3, [r7, #3]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	78fa      	ldrb	r2, [r7, #3]
 8003cc2:	0151      	lsls	r1, r2, #5
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	440a      	add	r2, r1
 8003cc8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ccc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cd0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	799b      	ldrb	r3, [r3, #6]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d01b      	beq.n	8003d12 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003cda:	78fa      	ldrb	r2, [r7, #3]
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	1a9b      	subs	r3, r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	3330      	adds	r3, #48	@ 0x30
 8003cea:	6819      	ldr	r1, [r3, #0]
 8003cec:	78fb      	ldrb	r3, [r7, #3]
 8003cee:	015a      	lsls	r2, r3, #5
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cfe:	78fa      	ldrb	r2, [r7, #3]
 8003d00:	1ac9      	subs	r1, r1, r3
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	4613      	mov	r3, r2
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	1a9b      	subs	r3, r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4403      	add	r3, r0
 8003d0e:	3338      	adds	r3, #56	@ 0x38
 8003d10:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003d12:	78fa      	ldrb	r2, [r7, #3]
 8003d14:	6879      	ldr	r1, [r7, #4]
 8003d16:	4613      	mov	r3, r2
 8003d18:	011b      	lsls	r3, r3, #4
 8003d1a:	1a9b      	subs	r3, r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	440b      	add	r3, r1
 8003d20:	334d      	adds	r3, #77	@ 0x4d
 8003d22:	2201      	movs	r2, #1
 8003d24:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003d26:	78fa      	ldrb	r2, [r7, #3]
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	1a9b      	subs	r3, r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	3344      	adds	r3, #68	@ 0x44
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003d3a:	78fb      	ldrb	r3, [r7, #3]
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d46:	461a      	mov	r2, r3
 8003d48:	2301      	movs	r3, #1
 8003d4a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d4c:	78fa      	ldrb	r2, [r7, #3]
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	4613      	mov	r3, r2
 8003d52:	011b      	lsls	r3, r3, #4
 8003d54:	1a9b      	subs	r3, r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	3326      	adds	r3, #38	@ 0x26
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00a      	beq.n	8003d78 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003d62:	78fa      	ldrb	r2, [r7, #3]
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	4613      	mov	r3, r2
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	1a9b      	subs	r3, r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	440b      	add	r3, r1
 8003d70:	3326      	adds	r3, #38	@ 0x26
 8003d72:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d110      	bne.n	8003d9a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	78fa      	ldrb	r2, [r7, #3]
 8003d7e:	4611      	mov	r1, r2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f006 fdc2 	bl	800a90a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003d86:	78fb      	ldrb	r3, [r7, #3]
 8003d88:	015a      	lsls	r2, r3, #5
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d92:	461a      	mov	r2, r3
 8003d94:	2310      	movs	r3, #16
 8003d96:	6093      	str	r3, [r2, #8]
 8003d98:	e03d      	b.n	8003e16 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003d9a:	78fa      	ldrb	r2, [r7, #3]
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	1a9b      	subs	r3, r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	440b      	add	r3, r1
 8003da8:	3326      	adds	r3, #38	@ 0x26
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d00a      	beq.n	8003dc6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003db0:	78fa      	ldrb	r2, [r7, #3]
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	4613      	mov	r3, r2
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	1a9b      	subs	r3, r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	440b      	add	r3, r1
 8003dbe:	3326      	adds	r3, #38	@ 0x26
 8003dc0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d127      	bne.n	8003e16 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003dc6:	78fb      	ldrb	r3, [r7, #3]
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	78fa      	ldrb	r2, [r7, #3]
 8003dd6:	0151      	lsls	r1, r2, #5
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	440a      	add	r2, r1
 8003ddc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003de0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003de4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003de6:	78fa      	ldrb	r2, [r7, #3]
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	4613      	mov	r3, r2
 8003dec:	011b      	lsls	r3, r3, #4
 8003dee:	1a9b      	subs	r3, r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	440b      	add	r3, r1
 8003df4:	334c      	adds	r3, #76	@ 0x4c
 8003df6:	2201      	movs	r2, #1
 8003df8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003dfa:	78fa      	ldrb	r2, [r7, #3]
 8003dfc:	6879      	ldr	r1, [r7, #4]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	1a9b      	subs	r3, r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	440b      	add	r3, r1
 8003e08:	334c      	adds	r3, #76	@ 0x4c
 8003e0a:	781a      	ldrb	r2, [r3, #0]
 8003e0c:	78fb      	ldrb	r3, [r7, #3]
 8003e0e:	4619      	mov	r1, r3
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f00c fd89 	bl	8010928 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	799b      	ldrb	r3, [r3, #6]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d13b      	bne.n	8003e96 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003e1e:	78fa      	ldrb	r2, [r7, #3]
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	1a9b      	subs	r3, r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	3338      	adds	r3, #56	@ 0x38
 8003e2e:	6819      	ldr	r1, [r3, #0]
 8003e30:	78fa      	ldrb	r2, [r7, #3]
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	4613      	mov	r3, r2
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	1a9b      	subs	r3, r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4403      	add	r3, r0
 8003e3e:	3328      	adds	r3, #40	@ 0x28
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	440b      	add	r3, r1
 8003e44:	1e59      	subs	r1, r3, #1
 8003e46:	78fa      	ldrb	r2, [r7, #3]
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	1a9b      	subs	r3, r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4403      	add	r3, r0
 8003e54:	3328      	adds	r3, #40	@ 0x28
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 8470 	beq.w	8004746 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003e66:	78fa      	ldrb	r2, [r7, #3]
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	011b      	lsls	r3, r3, #4
 8003e6e:	1a9b      	subs	r3, r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	440b      	add	r3, r1
 8003e74:	333c      	adds	r3, #60	@ 0x3c
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	78fa      	ldrb	r2, [r7, #3]
 8003e7a:	f083 0301 	eor.w	r3, r3, #1
 8003e7e:	b2d8      	uxtb	r0, r3
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	4613      	mov	r3, r2
 8003e84:	011b      	lsls	r3, r3, #4
 8003e86:	1a9b      	subs	r3, r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	440b      	add	r3, r1
 8003e8c:	333c      	adds	r3, #60	@ 0x3c
 8003e8e:	4602      	mov	r2, r0
 8003e90:	701a      	strb	r2, [r3, #0]
 8003e92:	f000 bc58 	b.w	8004746 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003e96:	78fa      	ldrb	r2, [r7, #3]
 8003e98:	6879      	ldr	r1, [r7, #4]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	1a9b      	subs	r3, r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	440b      	add	r3, r1
 8003ea4:	333c      	adds	r3, #60	@ 0x3c
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	78fa      	ldrb	r2, [r7, #3]
 8003eaa:	f083 0301 	eor.w	r3, r3, #1
 8003eae:	b2d8      	uxtb	r0, r3
 8003eb0:	6879      	ldr	r1, [r7, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	1a9b      	subs	r3, r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	333c      	adds	r3, #60	@ 0x3c
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	701a      	strb	r2, [r3, #0]
 8003ec2:	f000 bc40 	b.w	8004746 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	78fa      	ldrb	r2, [r7, #3]
 8003ecc:	4611      	mov	r1, r2
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f005 ff77 	bl	8009dc2 <USB_ReadChInterrupts>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	f003 0320 	and.w	r3, r3, #32
 8003eda:	2b20      	cmp	r3, #32
 8003edc:	d131      	bne.n	8003f42 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003ede:	78fb      	ldrb	r3, [r7, #3]
 8003ee0:	015a      	lsls	r2, r3, #5
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eea:	461a      	mov	r2, r3
 8003eec:	2320      	movs	r3, #32
 8003eee:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003ef0:	78fa      	ldrb	r2, [r7, #3]
 8003ef2:	6879      	ldr	r1, [r7, #4]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	1a9b      	subs	r3, r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	440b      	add	r3, r1
 8003efe:	331a      	adds	r3, #26
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	f040 841f 	bne.w	8004746 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003f08:	78fa      	ldrb	r2, [r7, #3]
 8003f0a:	6879      	ldr	r1, [r7, #4]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	011b      	lsls	r3, r3, #4
 8003f10:	1a9b      	subs	r3, r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	331b      	adds	r3, #27
 8003f18:	2201      	movs	r2, #1
 8003f1a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003f1c:	78fa      	ldrb	r2, [r7, #3]
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	4613      	mov	r3, r2
 8003f22:	011b      	lsls	r3, r3, #4
 8003f24:	1a9b      	subs	r3, r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	440b      	add	r3, r1
 8003f2a:	334d      	adds	r3, #77	@ 0x4d
 8003f2c:	2203      	movs	r2, #3
 8003f2e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	78fa      	ldrb	r2, [r7, #3]
 8003f36:	4611      	mov	r1, r2
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f006 fce6 	bl	800a90a <USB_HC_Halt>
 8003f3e:	f000 bc02 	b.w	8004746 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	78fa      	ldrb	r2, [r7, #3]
 8003f48:	4611      	mov	r1, r2
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f005 ff39 	bl	8009dc2 <USB_ReadChInterrupts>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	f040 8305 	bne.w	8004566 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003f5c:	78fb      	ldrb	r3, [r7, #3]
 8003f5e:	015a      	lsls	r2, r3, #5
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f68:	461a      	mov	r2, r3
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003f6e:	78fa      	ldrb	r2, [r7, #3]
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	4613      	mov	r3, r2
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	1a9b      	subs	r3, r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	334d      	adds	r3, #77	@ 0x4d
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d114      	bne.n	8003fae <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f84:	78fa      	ldrb	r2, [r7, #3]
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	1a9b      	subs	r3, r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	440b      	add	r3, r1
 8003f92:	334d      	adds	r3, #77	@ 0x4d
 8003f94:	2202      	movs	r2, #2
 8003f96:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003f98:	78fa      	ldrb	r2, [r7, #3]
 8003f9a:	6879      	ldr	r1, [r7, #4]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	1a9b      	subs	r3, r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	334c      	adds	r3, #76	@ 0x4c
 8003fa8:	2201      	movs	r2, #1
 8003faa:	701a      	strb	r2, [r3, #0]
 8003fac:	e2cc      	b.n	8004548 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003fae:	78fa      	ldrb	r2, [r7, #3]
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	1a9b      	subs	r3, r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	440b      	add	r3, r1
 8003fbc:	334d      	adds	r3, #77	@ 0x4d
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	2b06      	cmp	r3, #6
 8003fc2:	d114      	bne.n	8003fee <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003fc4:	78fa      	ldrb	r2, [r7, #3]
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	1a9b      	subs	r3, r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	334d      	adds	r3, #77	@ 0x4d
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003fd8:	78fa      	ldrb	r2, [r7, #3]
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	1a9b      	subs	r3, r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	440b      	add	r3, r1
 8003fe6:	334c      	adds	r3, #76	@ 0x4c
 8003fe8:	2205      	movs	r2, #5
 8003fea:	701a      	strb	r2, [r3, #0]
 8003fec:	e2ac      	b.n	8004548 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003fee:	78fa      	ldrb	r2, [r7, #3]
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	011b      	lsls	r3, r3, #4
 8003ff6:	1a9b      	subs	r3, r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	440b      	add	r3, r1
 8003ffc:	334d      	adds	r3, #77	@ 0x4d
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b07      	cmp	r3, #7
 8004002:	d00b      	beq.n	800401c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004004:	78fa      	ldrb	r2, [r7, #3]
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	4613      	mov	r3, r2
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	1a9b      	subs	r3, r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	334d      	adds	r3, #77	@ 0x4d
 8004014:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004016:	2b09      	cmp	r3, #9
 8004018:	f040 80a6 	bne.w	8004168 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800401c:	78fa      	ldrb	r2, [r7, #3]
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	4613      	mov	r3, r2
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	1a9b      	subs	r3, r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	334d      	adds	r3, #77	@ 0x4d
 800402c:	2202      	movs	r2, #2
 800402e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004030:	78fa      	ldrb	r2, [r7, #3]
 8004032:	6879      	ldr	r1, [r7, #4]
 8004034:	4613      	mov	r3, r2
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	1a9b      	subs	r3, r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	3344      	adds	r3, #68	@ 0x44
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	1c59      	adds	r1, r3, #1
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	4613      	mov	r3, r2
 8004048:	011b      	lsls	r3, r3, #4
 800404a:	1a9b      	subs	r3, r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4403      	add	r3, r0
 8004050:	3344      	adds	r3, #68	@ 0x44
 8004052:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004054:	78fa      	ldrb	r2, [r7, #3]
 8004056:	6879      	ldr	r1, [r7, #4]
 8004058:	4613      	mov	r3, r2
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	1a9b      	subs	r3, r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	440b      	add	r3, r1
 8004062:	3344      	adds	r3, #68	@ 0x44
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b02      	cmp	r3, #2
 8004068:	d943      	bls.n	80040f2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800406a:	78fa      	ldrb	r2, [r7, #3]
 800406c:	6879      	ldr	r1, [r7, #4]
 800406e:	4613      	mov	r3, r2
 8004070:	011b      	lsls	r3, r3, #4
 8004072:	1a9b      	subs	r3, r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	440b      	add	r3, r1
 8004078:	3344      	adds	r3, #68	@ 0x44
 800407a:	2200      	movs	r2, #0
 800407c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800407e:	78fa      	ldrb	r2, [r7, #3]
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	4613      	mov	r3, r2
 8004084:	011b      	lsls	r3, r3, #4
 8004086:	1a9b      	subs	r3, r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	440b      	add	r3, r1
 800408c:	331a      	adds	r3, #26
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d123      	bne.n	80040dc <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004094:	78fa      	ldrb	r2, [r7, #3]
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	4613      	mov	r3, r2
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	1a9b      	subs	r3, r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	440b      	add	r3, r1
 80040a2:	331b      	adds	r3, #27
 80040a4:	2200      	movs	r2, #0
 80040a6:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80040a8:	78fa      	ldrb	r2, [r7, #3]
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	4613      	mov	r3, r2
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	1a9b      	subs	r3, r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	331c      	adds	r3, #28
 80040b8:	2200      	movs	r2, #0
 80040ba:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80040bc:	78fb      	ldrb	r3, [r7, #3]
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	78fa      	ldrb	r2, [r7, #3]
 80040cc:	0151      	lsls	r1, r2, #5
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	440a      	add	r2, r1
 80040d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80040d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040da:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80040dc:	78fa      	ldrb	r2, [r7, #3]
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	4613      	mov	r3, r2
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	1a9b      	subs	r3, r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	440b      	add	r3, r1
 80040ea:	334c      	adds	r3, #76	@ 0x4c
 80040ec:	2204      	movs	r2, #4
 80040ee:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80040f0:	e229      	b.n	8004546 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80040f2:	78fa      	ldrb	r2, [r7, #3]
 80040f4:	6879      	ldr	r1, [r7, #4]
 80040f6:	4613      	mov	r3, r2
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	1a9b      	subs	r3, r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	440b      	add	r3, r1
 8004100:	334c      	adds	r3, #76	@ 0x4c
 8004102:	2202      	movs	r2, #2
 8004104:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004106:	78fa      	ldrb	r2, [r7, #3]
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	4613      	mov	r3, r2
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	1a9b      	subs	r3, r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	440b      	add	r3, r1
 8004114:	3326      	adds	r3, #38	@ 0x26
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00b      	beq.n	8004134 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800411c:	78fa      	ldrb	r2, [r7, #3]
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	4613      	mov	r3, r2
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	1a9b      	subs	r3, r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	440b      	add	r3, r1
 800412a:	3326      	adds	r3, #38	@ 0x26
 800412c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800412e:	2b02      	cmp	r3, #2
 8004130:	f040 8209 	bne.w	8004546 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004134:	78fb      	ldrb	r3, [r7, #3]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	4413      	add	r3, r2
 800413c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800414a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004152:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004154:	78fb      	ldrb	r3, [r7, #3]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	4413      	add	r3, r2
 800415c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004160:	461a      	mov	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004166:	e1ee      	b.n	8004546 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004168:	78fa      	ldrb	r2, [r7, #3]
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	011b      	lsls	r3, r3, #4
 8004170:	1a9b      	subs	r3, r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	334d      	adds	r3, #77	@ 0x4d
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	2b05      	cmp	r3, #5
 800417c:	f040 80c8 	bne.w	8004310 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004180:	78fa      	ldrb	r2, [r7, #3]
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	4613      	mov	r3, r2
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	1a9b      	subs	r3, r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	334d      	adds	r3, #77	@ 0x4d
 8004190:	2202      	movs	r2, #2
 8004192:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004194:	78fa      	ldrb	r2, [r7, #3]
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	1a9b      	subs	r3, r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	331b      	adds	r3, #27
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	f040 81ce 	bne.w	8004548 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80041ac:	78fa      	ldrb	r2, [r7, #3]
 80041ae:	6879      	ldr	r1, [r7, #4]
 80041b0:	4613      	mov	r3, r2
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	1a9b      	subs	r3, r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	440b      	add	r3, r1
 80041ba:	3326      	adds	r3, #38	@ 0x26
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	2b03      	cmp	r3, #3
 80041c0:	d16b      	bne.n	800429a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80041c2:	78fa      	ldrb	r2, [r7, #3]
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	4613      	mov	r3, r2
 80041c8:	011b      	lsls	r3, r3, #4
 80041ca:	1a9b      	subs	r3, r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	440b      	add	r3, r1
 80041d0:	3348      	adds	r3, #72	@ 0x48
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	1c59      	adds	r1, r3, #1
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	4613      	mov	r3, r2
 80041da:	011b      	lsls	r3, r3, #4
 80041dc:	1a9b      	subs	r3, r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4403      	add	r3, r0
 80041e2:	3348      	adds	r3, #72	@ 0x48
 80041e4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80041e6:	78fa      	ldrb	r2, [r7, #3]
 80041e8:	6879      	ldr	r1, [r7, #4]
 80041ea:	4613      	mov	r3, r2
 80041ec:	011b      	lsls	r3, r3, #4
 80041ee:	1a9b      	subs	r3, r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	440b      	add	r3, r1
 80041f4:	3348      	adds	r3, #72	@ 0x48
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d943      	bls.n	8004284 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80041fc:	78fa      	ldrb	r2, [r7, #3]
 80041fe:	6879      	ldr	r1, [r7, #4]
 8004200:	4613      	mov	r3, r2
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	1a9b      	subs	r3, r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	440b      	add	r3, r1
 800420a:	3348      	adds	r3, #72	@ 0x48
 800420c:	2200      	movs	r2, #0
 800420e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004210:	78fa      	ldrb	r2, [r7, #3]
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	4613      	mov	r3, r2
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	1a9b      	subs	r3, r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	331b      	adds	r3, #27
 8004220:	2200      	movs	r2, #0
 8004222:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004224:	78fa      	ldrb	r2, [r7, #3]
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	4613      	mov	r3, r2
 800422a:	011b      	lsls	r3, r3, #4
 800422c:	1a9b      	subs	r3, r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	440b      	add	r3, r1
 8004232:	3344      	adds	r3, #68	@ 0x44
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b02      	cmp	r3, #2
 8004238:	d809      	bhi.n	800424e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800423a:	78fa      	ldrb	r2, [r7, #3]
 800423c:	6879      	ldr	r1, [r7, #4]
 800423e:	4613      	mov	r3, r2
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	1a9b      	subs	r3, r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	440b      	add	r3, r1
 8004248:	331c      	adds	r3, #28
 800424a:	2201      	movs	r2, #1
 800424c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800424e:	78fb      	ldrb	r3, [r7, #3]
 8004250:	015a      	lsls	r2, r3, #5
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	4413      	add	r3, r2
 8004256:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	78fa      	ldrb	r2, [r7, #3]
 800425e:	0151      	lsls	r1, r2, #5
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	440a      	add	r2, r1
 8004264:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004268:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800426c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800426e:	78fa      	ldrb	r2, [r7, #3]
 8004270:	6879      	ldr	r1, [r7, #4]
 8004272:	4613      	mov	r3, r2
 8004274:	011b      	lsls	r3, r3, #4
 8004276:	1a9b      	subs	r3, r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	440b      	add	r3, r1
 800427c:	334c      	adds	r3, #76	@ 0x4c
 800427e:	2204      	movs	r2, #4
 8004280:	701a      	strb	r2, [r3, #0]
 8004282:	e014      	b.n	80042ae <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004284:	78fa      	ldrb	r2, [r7, #3]
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	4613      	mov	r3, r2
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	1a9b      	subs	r3, r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	440b      	add	r3, r1
 8004292:	334c      	adds	r3, #76	@ 0x4c
 8004294:	2202      	movs	r2, #2
 8004296:	701a      	strb	r2, [r3, #0]
 8004298:	e009      	b.n	80042ae <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800429a:	78fa      	ldrb	r2, [r7, #3]
 800429c:	6879      	ldr	r1, [r7, #4]
 800429e:	4613      	mov	r3, r2
 80042a0:	011b      	lsls	r3, r3, #4
 80042a2:	1a9b      	subs	r3, r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	440b      	add	r3, r1
 80042a8:	334c      	adds	r3, #76	@ 0x4c
 80042aa:	2202      	movs	r2, #2
 80042ac:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80042ae:	78fa      	ldrb	r2, [r7, #3]
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	4613      	mov	r3, r2
 80042b4:	011b      	lsls	r3, r3, #4
 80042b6:	1a9b      	subs	r3, r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	440b      	add	r3, r1
 80042bc:	3326      	adds	r3, #38	@ 0x26
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00b      	beq.n	80042dc <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80042c4:	78fa      	ldrb	r2, [r7, #3]
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	4613      	mov	r3, r2
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	1a9b      	subs	r3, r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	440b      	add	r3, r1
 80042d2:	3326      	adds	r3, #38	@ 0x26
 80042d4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	f040 8136 	bne.w	8004548 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80042dc:	78fb      	ldrb	r3, [r7, #3]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80042f2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80042fa:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80042fc:	78fb      	ldrb	r3, [r7, #3]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	4413      	add	r3, r2
 8004304:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004308:	461a      	mov	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	e11b      	b.n	8004548 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004310:	78fa      	ldrb	r2, [r7, #3]
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	4613      	mov	r3, r2
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	1a9b      	subs	r3, r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	440b      	add	r3, r1
 800431e:	334d      	adds	r3, #77	@ 0x4d
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	2b03      	cmp	r3, #3
 8004324:	f040 8081 	bne.w	800442a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004328:	78fa      	ldrb	r2, [r7, #3]
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	4613      	mov	r3, r2
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	1a9b      	subs	r3, r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	440b      	add	r3, r1
 8004336:	334d      	adds	r3, #77	@ 0x4d
 8004338:	2202      	movs	r2, #2
 800433a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800433c:	78fa      	ldrb	r2, [r7, #3]
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	4613      	mov	r3, r2
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	1a9b      	subs	r3, r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	331b      	adds	r3, #27
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	2b01      	cmp	r3, #1
 8004350:	f040 80fa 	bne.w	8004548 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004354:	78fa      	ldrb	r2, [r7, #3]
 8004356:	6879      	ldr	r1, [r7, #4]
 8004358:	4613      	mov	r3, r2
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	1a9b      	subs	r3, r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	440b      	add	r3, r1
 8004362:	334c      	adds	r3, #76	@ 0x4c
 8004364:	2202      	movs	r2, #2
 8004366:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004368:	78fb      	ldrb	r3, [r7, #3]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	4413      	add	r3, r2
 8004370:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	78fa      	ldrb	r2, [r7, #3]
 8004378:	0151      	lsls	r1, r2, #5
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	440a      	add	r2, r1
 800437e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004382:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004386:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004388:	78fb      	ldrb	r3, [r7, #3]
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	4413      	add	r3, r2
 8004390:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	78fa      	ldrb	r2, [r7, #3]
 8004398:	0151      	lsls	r1, r2, #5
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	440a      	add	r2, r1
 800439e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80043a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043a6:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80043a8:	78fb      	ldrb	r3, [r7, #3]
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	78fa      	ldrb	r2, [r7, #3]
 80043b8:	0151      	lsls	r1, r2, #5
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	440a      	add	r2, r1
 80043be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80043c2:	f023 0320 	bic.w	r3, r3, #32
 80043c6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80043c8:	78fa      	ldrb	r2, [r7, #3]
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	4613      	mov	r3, r2
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	1a9b      	subs	r3, r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	440b      	add	r3, r1
 80043d6:	3326      	adds	r3, #38	@ 0x26
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00b      	beq.n	80043f6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80043de:	78fa      	ldrb	r2, [r7, #3]
 80043e0:	6879      	ldr	r1, [r7, #4]
 80043e2:	4613      	mov	r3, r2
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	1a9b      	subs	r3, r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	440b      	add	r3, r1
 80043ec:	3326      	adds	r3, #38	@ 0x26
 80043ee:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	f040 80a9 	bne.w	8004548 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80043f6:	78fb      	ldrb	r3, [r7, #3]
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800440c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004414:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004416:	78fb      	ldrb	r3, [r7, #3]
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	4413      	add	r3, r2
 800441e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004422:	461a      	mov	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6013      	str	r3, [r2, #0]
 8004428:	e08e      	b.n	8004548 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800442a:	78fa      	ldrb	r2, [r7, #3]
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	4613      	mov	r3, r2
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	1a9b      	subs	r3, r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	440b      	add	r3, r1
 8004438:	334d      	adds	r3, #77	@ 0x4d
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	2b04      	cmp	r3, #4
 800443e:	d143      	bne.n	80044c8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004440:	78fa      	ldrb	r2, [r7, #3]
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	4613      	mov	r3, r2
 8004446:	011b      	lsls	r3, r3, #4
 8004448:	1a9b      	subs	r3, r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	440b      	add	r3, r1
 800444e:	334d      	adds	r3, #77	@ 0x4d
 8004450:	2202      	movs	r2, #2
 8004452:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004454:	78fa      	ldrb	r2, [r7, #3]
 8004456:	6879      	ldr	r1, [r7, #4]
 8004458:	4613      	mov	r3, r2
 800445a:	011b      	lsls	r3, r3, #4
 800445c:	1a9b      	subs	r3, r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	440b      	add	r3, r1
 8004462:	334c      	adds	r3, #76	@ 0x4c
 8004464:	2202      	movs	r2, #2
 8004466:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004468:	78fa      	ldrb	r2, [r7, #3]
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	4613      	mov	r3, r2
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	1a9b      	subs	r3, r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	440b      	add	r3, r1
 8004476:	3326      	adds	r3, #38	@ 0x26
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800447e:	78fa      	ldrb	r2, [r7, #3]
 8004480:	6879      	ldr	r1, [r7, #4]
 8004482:	4613      	mov	r3, r2
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	1a9b      	subs	r3, r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	440b      	add	r3, r1
 800448c:	3326      	adds	r3, #38	@ 0x26
 800448e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004490:	2b02      	cmp	r3, #2
 8004492:	d159      	bne.n	8004548 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004494:	78fb      	ldrb	r3, [r7, #3]
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	4413      	add	r3, r2
 800449c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80044aa:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80044b2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80044b4:	78fb      	ldrb	r3, [r7, #3]
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044c0:	461a      	mov	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6013      	str	r3, [r2, #0]
 80044c6:	e03f      	b.n	8004548 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80044c8:	78fa      	ldrb	r2, [r7, #3]
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	4613      	mov	r3, r2
 80044ce:	011b      	lsls	r3, r3, #4
 80044d0:	1a9b      	subs	r3, r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	440b      	add	r3, r1
 80044d6:	334d      	adds	r3, #77	@ 0x4d
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d126      	bne.n	800452c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044de:	78fa      	ldrb	r2, [r7, #3]
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	4613      	mov	r3, r2
 80044e4:	011b      	lsls	r3, r3, #4
 80044e6:	1a9b      	subs	r3, r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	440b      	add	r3, r1
 80044ec:	334d      	adds	r3, #77	@ 0x4d
 80044ee:	2202      	movs	r2, #2
 80044f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80044f2:	78fa      	ldrb	r2, [r7, #3]
 80044f4:	6879      	ldr	r1, [r7, #4]
 80044f6:	4613      	mov	r3, r2
 80044f8:	011b      	lsls	r3, r3, #4
 80044fa:	1a9b      	subs	r3, r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	440b      	add	r3, r1
 8004500:	3344      	adds	r3, #68	@ 0x44
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	1c59      	adds	r1, r3, #1
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	4613      	mov	r3, r2
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	1a9b      	subs	r3, r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4403      	add	r3, r0
 8004512:	3344      	adds	r3, #68	@ 0x44
 8004514:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004516:	78fa      	ldrb	r2, [r7, #3]
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	4613      	mov	r3, r2
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	1a9b      	subs	r3, r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	440b      	add	r3, r1
 8004524:	334c      	adds	r3, #76	@ 0x4c
 8004526:	2204      	movs	r2, #4
 8004528:	701a      	strb	r2, [r3, #0]
 800452a:	e00d      	b.n	8004548 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800452c:	78fa      	ldrb	r2, [r7, #3]
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	4613      	mov	r3, r2
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	1a9b      	subs	r3, r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	440b      	add	r3, r1
 800453a:	334d      	adds	r3, #77	@ 0x4d
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2b02      	cmp	r3, #2
 8004540:	f000 8100 	beq.w	8004744 <HCD_HC_IN_IRQHandler+0xcca>
 8004544:	e000      	b.n	8004548 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004546:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004548:	78fa      	ldrb	r2, [r7, #3]
 800454a:	6879      	ldr	r1, [r7, #4]
 800454c:	4613      	mov	r3, r2
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	1a9b      	subs	r3, r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	440b      	add	r3, r1
 8004556:	334c      	adds	r3, #76	@ 0x4c
 8004558:	781a      	ldrb	r2, [r3, #0]
 800455a:	78fb      	ldrb	r3, [r7, #3]
 800455c:	4619      	mov	r1, r3
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f00c f9e2 	bl	8010928 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004564:	e0ef      	b.n	8004746 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	78fa      	ldrb	r2, [r7, #3]
 800456c:	4611      	mov	r1, r2
 800456e:	4618      	mov	r0, r3
 8004570:	f005 fc27 	bl	8009dc2 <USB_ReadChInterrupts>
 8004574:	4603      	mov	r3, r0
 8004576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800457a:	2b40      	cmp	r3, #64	@ 0x40
 800457c:	d12f      	bne.n	80045de <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800457e:	78fb      	ldrb	r3, [r7, #3]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	4413      	add	r3, r2
 8004586:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800458a:	461a      	mov	r2, r3
 800458c:	2340      	movs	r3, #64	@ 0x40
 800458e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004590:	78fa      	ldrb	r2, [r7, #3]
 8004592:	6879      	ldr	r1, [r7, #4]
 8004594:	4613      	mov	r3, r2
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	1a9b      	subs	r3, r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	440b      	add	r3, r1
 800459e:	334d      	adds	r3, #77	@ 0x4d
 80045a0:	2205      	movs	r2, #5
 80045a2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80045a4:	78fa      	ldrb	r2, [r7, #3]
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	4613      	mov	r3, r2
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	1a9b      	subs	r3, r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	331a      	adds	r3, #26
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d109      	bne.n	80045ce <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80045ba:	78fa      	ldrb	r2, [r7, #3]
 80045bc:	6879      	ldr	r1, [r7, #4]
 80045be:	4613      	mov	r3, r2
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	1a9b      	subs	r3, r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	440b      	add	r3, r1
 80045c8:	3344      	adds	r3, #68	@ 0x44
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	78fa      	ldrb	r2, [r7, #3]
 80045d4:	4611      	mov	r1, r2
 80045d6:	4618      	mov	r0, r3
 80045d8:	f006 f997 	bl	800a90a <USB_HC_Halt>
 80045dc:	e0b3      	b.n	8004746 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	78fa      	ldrb	r2, [r7, #3]
 80045e4:	4611      	mov	r1, r2
 80045e6:	4618      	mov	r0, r3
 80045e8:	f005 fbeb 	bl	8009dc2 <USB_ReadChInterrupts>
 80045ec:	4603      	mov	r3, r0
 80045ee:	f003 0310 	and.w	r3, r3, #16
 80045f2:	2b10      	cmp	r3, #16
 80045f4:	f040 80a7 	bne.w	8004746 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80045f8:	78fa      	ldrb	r2, [r7, #3]
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	4613      	mov	r3, r2
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	1a9b      	subs	r3, r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	440b      	add	r3, r1
 8004606:	3326      	adds	r3, #38	@ 0x26
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	2b03      	cmp	r3, #3
 800460c:	d11b      	bne.n	8004646 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800460e:	78fa      	ldrb	r2, [r7, #3]
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	011b      	lsls	r3, r3, #4
 8004616:	1a9b      	subs	r3, r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	3344      	adds	r3, #68	@ 0x44
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004622:	78fa      	ldrb	r2, [r7, #3]
 8004624:	6879      	ldr	r1, [r7, #4]
 8004626:	4613      	mov	r3, r2
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	1a9b      	subs	r3, r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	440b      	add	r3, r1
 8004630:	334d      	adds	r3, #77	@ 0x4d
 8004632:	2204      	movs	r2, #4
 8004634:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	78fa      	ldrb	r2, [r7, #3]
 800463c:	4611      	mov	r1, r2
 800463e:	4618      	mov	r0, r3
 8004640:	f006 f963 	bl	800a90a <USB_HC_Halt>
 8004644:	e03f      	b.n	80046c6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004646:	78fa      	ldrb	r2, [r7, #3]
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	4613      	mov	r3, r2
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	1a9b      	subs	r3, r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	440b      	add	r3, r1
 8004654:	3326      	adds	r3, #38	@ 0x26
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00a      	beq.n	8004672 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800465c:	78fa      	ldrb	r2, [r7, #3]
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	4613      	mov	r3, r2
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	1a9b      	subs	r3, r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	440b      	add	r3, r1
 800466a:	3326      	adds	r3, #38	@ 0x26
 800466c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800466e:	2b02      	cmp	r3, #2
 8004670:	d129      	bne.n	80046c6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004672:	78fa      	ldrb	r2, [r7, #3]
 8004674:	6879      	ldr	r1, [r7, #4]
 8004676:	4613      	mov	r3, r2
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	1a9b      	subs	r3, r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	440b      	add	r3, r1
 8004680:	3344      	adds	r3, #68	@ 0x44
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	799b      	ldrb	r3, [r3, #6]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <HCD_HC_IN_IRQHandler+0xc2a>
 800468e:	78fa      	ldrb	r2, [r7, #3]
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	4613      	mov	r3, r2
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	1a9b      	subs	r3, r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	440b      	add	r3, r1
 800469c:	331b      	adds	r3, #27
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d110      	bne.n	80046c6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80046a4:	78fa      	ldrb	r2, [r7, #3]
 80046a6:	6879      	ldr	r1, [r7, #4]
 80046a8:	4613      	mov	r3, r2
 80046aa:	011b      	lsls	r3, r3, #4
 80046ac:	1a9b      	subs	r3, r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	440b      	add	r3, r1
 80046b2:	334d      	adds	r3, #77	@ 0x4d
 80046b4:	2204      	movs	r2, #4
 80046b6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	78fa      	ldrb	r2, [r7, #3]
 80046be:	4611      	mov	r1, r2
 80046c0:	4618      	mov	r0, r3
 80046c2:	f006 f922 	bl	800a90a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80046c6:	78fa      	ldrb	r2, [r7, #3]
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	4613      	mov	r3, r2
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	1a9b      	subs	r3, r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	440b      	add	r3, r1
 80046d4:	331b      	adds	r3, #27
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d129      	bne.n	8004730 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80046dc:	78fa      	ldrb	r2, [r7, #3]
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	4613      	mov	r3, r2
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	1a9b      	subs	r3, r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	331b      	adds	r3, #27
 80046ec:	2200      	movs	r2, #0
 80046ee:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80046f0:	78fb      	ldrb	r3, [r7, #3]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	78fa      	ldrb	r2, [r7, #3]
 8004700:	0151      	lsls	r1, r2, #5
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	440a      	add	r2, r1
 8004706:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800470a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800470e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004710:	78fb      	ldrb	r3, [r7, #3]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	4413      	add	r3, r2
 8004718:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	78fa      	ldrb	r2, [r7, #3]
 8004720:	0151      	lsls	r1, r2, #5
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	440a      	add	r2, r1
 8004726:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800472a:	f043 0320 	orr.w	r3, r3, #32
 800472e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004730:	78fb      	ldrb	r3, [r7, #3]
 8004732:	015a      	lsls	r2, r3, #5
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	4413      	add	r3, r2
 8004738:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800473c:	461a      	mov	r2, r3
 800473e:	2310      	movs	r3, #16
 8004740:	6093      	str	r3, [r2, #8]
 8004742:	e000      	b.n	8004746 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004744:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004746:	3718      	adds	r7, #24
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	460b      	mov	r3, r1
 8004756:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	78fa      	ldrb	r2, [r7, #3]
 8004768:	4611      	mov	r1, r2
 800476a:	4618      	mov	r0, r3
 800476c:	f005 fb29 	bl	8009dc2 <USB_ReadChInterrupts>
 8004770:	4603      	mov	r3, r0
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	2b04      	cmp	r3, #4
 8004778:	d11b      	bne.n	80047b2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800477a:	78fb      	ldrb	r3, [r7, #3]
 800477c:	015a      	lsls	r2, r3, #5
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	4413      	add	r3, r2
 8004782:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004786:	461a      	mov	r2, r3
 8004788:	2304      	movs	r3, #4
 800478a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800478c:	78fa      	ldrb	r2, [r7, #3]
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	4613      	mov	r3, r2
 8004792:	011b      	lsls	r3, r3, #4
 8004794:	1a9b      	subs	r3, r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	440b      	add	r3, r1
 800479a:	334d      	adds	r3, #77	@ 0x4d
 800479c:	2207      	movs	r2, #7
 800479e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	78fa      	ldrb	r2, [r7, #3]
 80047a6:	4611      	mov	r1, r2
 80047a8:	4618      	mov	r0, r3
 80047aa:	f006 f8ae 	bl	800a90a <USB_HC_Halt>
 80047ae:	f000 bc6f 	b.w	8005090 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	78fa      	ldrb	r2, [r7, #3]
 80047b8:	4611      	mov	r1, r2
 80047ba:	4618      	mov	r0, r3
 80047bc:	f005 fb01 	bl	8009dc2 <USB_ReadChInterrupts>
 80047c0:	4603      	mov	r3, r0
 80047c2:	f003 0320 	and.w	r3, r3, #32
 80047c6:	2b20      	cmp	r3, #32
 80047c8:	f040 8082 	bne.w	80048d0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80047cc:	78fb      	ldrb	r3, [r7, #3]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047d8:	461a      	mov	r2, r3
 80047da:	2320      	movs	r3, #32
 80047dc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80047de:	78fa      	ldrb	r2, [r7, #3]
 80047e0:	6879      	ldr	r1, [r7, #4]
 80047e2:	4613      	mov	r3, r2
 80047e4:	011b      	lsls	r3, r3, #4
 80047e6:	1a9b      	subs	r3, r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	440b      	add	r3, r1
 80047ec:	3319      	adds	r3, #25
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d124      	bne.n	800483e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80047f4:	78fa      	ldrb	r2, [r7, #3]
 80047f6:	6879      	ldr	r1, [r7, #4]
 80047f8:	4613      	mov	r3, r2
 80047fa:	011b      	lsls	r3, r3, #4
 80047fc:	1a9b      	subs	r3, r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	440b      	add	r3, r1
 8004802:	3319      	adds	r3, #25
 8004804:	2200      	movs	r2, #0
 8004806:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004808:	78fa      	ldrb	r2, [r7, #3]
 800480a:	6879      	ldr	r1, [r7, #4]
 800480c:	4613      	mov	r3, r2
 800480e:	011b      	lsls	r3, r3, #4
 8004810:	1a9b      	subs	r3, r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	440b      	add	r3, r1
 8004816:	334c      	adds	r3, #76	@ 0x4c
 8004818:	2202      	movs	r2, #2
 800481a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800481c:	78fa      	ldrb	r2, [r7, #3]
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	4613      	mov	r3, r2
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	1a9b      	subs	r3, r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	440b      	add	r3, r1
 800482a:	334d      	adds	r3, #77	@ 0x4d
 800482c:	2203      	movs	r2, #3
 800482e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	78fa      	ldrb	r2, [r7, #3]
 8004836:	4611      	mov	r1, r2
 8004838:	4618      	mov	r0, r3
 800483a:	f006 f866 	bl	800a90a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800483e:	78fa      	ldrb	r2, [r7, #3]
 8004840:	6879      	ldr	r1, [r7, #4]
 8004842:	4613      	mov	r3, r2
 8004844:	011b      	lsls	r3, r3, #4
 8004846:	1a9b      	subs	r3, r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	440b      	add	r3, r1
 800484c:	331a      	adds	r3, #26
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	2b01      	cmp	r3, #1
 8004852:	f040 841d 	bne.w	8005090 <HCD_HC_OUT_IRQHandler+0x944>
 8004856:	78fa      	ldrb	r2, [r7, #3]
 8004858:	6879      	ldr	r1, [r7, #4]
 800485a:	4613      	mov	r3, r2
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	1a9b      	subs	r3, r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	440b      	add	r3, r1
 8004864:	331b      	adds	r3, #27
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	f040 8411 	bne.w	8005090 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800486e:	78fa      	ldrb	r2, [r7, #3]
 8004870:	6879      	ldr	r1, [r7, #4]
 8004872:	4613      	mov	r3, r2
 8004874:	011b      	lsls	r3, r3, #4
 8004876:	1a9b      	subs	r3, r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	440b      	add	r3, r1
 800487c:	3326      	adds	r3, #38	@ 0x26
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d009      	beq.n	8004898 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004884:	78fa      	ldrb	r2, [r7, #3]
 8004886:	6879      	ldr	r1, [r7, #4]
 8004888:	4613      	mov	r3, r2
 800488a:	011b      	lsls	r3, r3, #4
 800488c:	1a9b      	subs	r3, r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	440b      	add	r3, r1
 8004892:	331b      	adds	r3, #27
 8004894:	2201      	movs	r2, #1
 8004896:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004898:	78fa      	ldrb	r2, [r7, #3]
 800489a:	6879      	ldr	r1, [r7, #4]
 800489c:	4613      	mov	r3, r2
 800489e:	011b      	lsls	r3, r3, #4
 80048a0:	1a9b      	subs	r3, r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	440b      	add	r3, r1
 80048a6:	334d      	adds	r3, #77	@ 0x4d
 80048a8:	2203      	movs	r2, #3
 80048aa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	78fa      	ldrb	r2, [r7, #3]
 80048b2:	4611      	mov	r1, r2
 80048b4:	4618      	mov	r0, r3
 80048b6:	f006 f828 	bl	800a90a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80048ba:	78fa      	ldrb	r2, [r7, #3]
 80048bc:	6879      	ldr	r1, [r7, #4]
 80048be:	4613      	mov	r3, r2
 80048c0:	011b      	lsls	r3, r3, #4
 80048c2:	1a9b      	subs	r3, r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	440b      	add	r3, r1
 80048c8:	3344      	adds	r3, #68	@ 0x44
 80048ca:	2200      	movs	r2, #0
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	e3df      	b.n	8005090 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	78fa      	ldrb	r2, [r7, #3]
 80048d6:	4611      	mov	r1, r2
 80048d8:	4618      	mov	r0, r3
 80048da:	f005 fa72 	bl	8009dc2 <USB_ReadChInterrupts>
 80048de:	4603      	mov	r3, r0
 80048e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048e8:	d111      	bne.n	800490e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80048ea:	78fb      	ldrb	r3, [r7, #3]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048f6:	461a      	mov	r2, r3
 80048f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80048fc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	78fa      	ldrb	r2, [r7, #3]
 8004904:	4611      	mov	r1, r2
 8004906:	4618      	mov	r0, r3
 8004908:	f005 ffff 	bl	800a90a <USB_HC_Halt>
 800490c:	e3c0      	b.n	8005090 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	78fa      	ldrb	r2, [r7, #3]
 8004914:	4611      	mov	r1, r2
 8004916:	4618      	mov	r0, r3
 8004918:	f005 fa53 	bl	8009dc2 <USB_ReadChInterrupts>
 800491c:	4603      	mov	r3, r0
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b01      	cmp	r3, #1
 8004924:	d168      	bne.n	80049f8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004926:	78fa      	ldrb	r2, [r7, #3]
 8004928:	6879      	ldr	r1, [r7, #4]
 800492a:	4613      	mov	r3, r2
 800492c:	011b      	lsls	r3, r3, #4
 800492e:	1a9b      	subs	r3, r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	440b      	add	r3, r1
 8004934:	3344      	adds	r3, #68	@ 0x44
 8004936:	2200      	movs	r2, #0
 8004938:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	78fa      	ldrb	r2, [r7, #3]
 8004940:	4611      	mov	r1, r2
 8004942:	4618      	mov	r0, r3
 8004944:	f005 fa3d 	bl	8009dc2 <USB_ReadChInterrupts>
 8004948:	4603      	mov	r3, r0
 800494a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800494e:	2b40      	cmp	r3, #64	@ 0x40
 8004950:	d112      	bne.n	8004978 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004952:	78fa      	ldrb	r2, [r7, #3]
 8004954:	6879      	ldr	r1, [r7, #4]
 8004956:	4613      	mov	r3, r2
 8004958:	011b      	lsls	r3, r3, #4
 800495a:	1a9b      	subs	r3, r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	440b      	add	r3, r1
 8004960:	3319      	adds	r3, #25
 8004962:	2201      	movs	r2, #1
 8004964:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004966:	78fb      	ldrb	r3, [r7, #3]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	4413      	add	r3, r2
 800496e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004972:	461a      	mov	r2, r3
 8004974:	2340      	movs	r3, #64	@ 0x40
 8004976:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004978:	78fa      	ldrb	r2, [r7, #3]
 800497a:	6879      	ldr	r1, [r7, #4]
 800497c:	4613      	mov	r3, r2
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	1a9b      	subs	r3, r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	440b      	add	r3, r1
 8004986:	331b      	adds	r3, #27
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d019      	beq.n	80049c2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800498e:	78fa      	ldrb	r2, [r7, #3]
 8004990:	6879      	ldr	r1, [r7, #4]
 8004992:	4613      	mov	r3, r2
 8004994:	011b      	lsls	r3, r3, #4
 8004996:	1a9b      	subs	r3, r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	440b      	add	r3, r1
 800499c:	331b      	adds	r3, #27
 800499e:	2200      	movs	r2, #0
 80049a0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80049a2:	78fb      	ldrb	r3, [r7, #3]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	78fa      	ldrb	r2, [r7, #3]
 80049b2:	0151      	lsls	r1, r2, #5
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	440a      	add	r2, r1
 80049b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80049bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049c0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80049c2:	78fb      	ldrb	r3, [r7, #3]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049ce:	461a      	mov	r2, r3
 80049d0:	2301      	movs	r3, #1
 80049d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80049d4:	78fa      	ldrb	r2, [r7, #3]
 80049d6:	6879      	ldr	r1, [r7, #4]
 80049d8:	4613      	mov	r3, r2
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	1a9b      	subs	r3, r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	440b      	add	r3, r1
 80049e2:	334d      	adds	r3, #77	@ 0x4d
 80049e4:	2201      	movs	r2, #1
 80049e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	78fa      	ldrb	r2, [r7, #3]
 80049ee:	4611      	mov	r1, r2
 80049f0:	4618      	mov	r0, r3
 80049f2:	f005 ff8a 	bl	800a90a <USB_HC_Halt>
 80049f6:	e34b      	b.n	8005090 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	78fa      	ldrb	r2, [r7, #3]
 80049fe:	4611      	mov	r1, r2
 8004a00:	4618      	mov	r0, r3
 8004a02:	f005 f9de 	bl	8009dc2 <USB_ReadChInterrupts>
 8004a06:	4603      	mov	r3, r0
 8004a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a0c:	2b40      	cmp	r3, #64	@ 0x40
 8004a0e:	d139      	bne.n	8004a84 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004a10:	78fa      	ldrb	r2, [r7, #3]
 8004a12:	6879      	ldr	r1, [r7, #4]
 8004a14:	4613      	mov	r3, r2
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	1a9b      	subs	r3, r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	440b      	add	r3, r1
 8004a1e:	334d      	adds	r3, #77	@ 0x4d
 8004a20:	2205      	movs	r2, #5
 8004a22:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004a24:	78fa      	ldrb	r2, [r7, #3]
 8004a26:	6879      	ldr	r1, [r7, #4]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	011b      	lsls	r3, r3, #4
 8004a2c:	1a9b      	subs	r3, r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	440b      	add	r3, r1
 8004a32:	331a      	adds	r3, #26
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d109      	bne.n	8004a4e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004a3a:	78fa      	ldrb	r2, [r7, #3]
 8004a3c:	6879      	ldr	r1, [r7, #4]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	011b      	lsls	r3, r3, #4
 8004a42:	1a9b      	subs	r3, r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	440b      	add	r3, r1
 8004a48:	3319      	adds	r3, #25
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004a4e:	78fa      	ldrb	r2, [r7, #3]
 8004a50:	6879      	ldr	r1, [r7, #4]
 8004a52:	4613      	mov	r3, r2
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	1a9b      	subs	r3, r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	440b      	add	r3, r1
 8004a5c:	3344      	adds	r3, #68	@ 0x44
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	78fa      	ldrb	r2, [r7, #3]
 8004a68:	4611      	mov	r1, r2
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f005 ff4d 	bl	800a90a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004a70:	78fb      	ldrb	r3, [r7, #3]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	2340      	movs	r3, #64	@ 0x40
 8004a80:	6093      	str	r3, [r2, #8]
 8004a82:	e305      	b.n	8005090 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	78fa      	ldrb	r2, [r7, #3]
 8004a8a:	4611      	mov	r1, r2
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f005 f998 	bl	8009dc2 <USB_ReadChInterrupts>
 8004a92:	4603      	mov	r3, r0
 8004a94:	f003 0308 	and.w	r3, r3, #8
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d11a      	bne.n	8004ad2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004a9c:	78fb      	ldrb	r3, [r7, #3]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	2308      	movs	r3, #8
 8004aac:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004aae:	78fa      	ldrb	r2, [r7, #3]
 8004ab0:	6879      	ldr	r1, [r7, #4]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	011b      	lsls	r3, r3, #4
 8004ab6:	1a9b      	subs	r3, r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	440b      	add	r3, r1
 8004abc:	334d      	adds	r3, #77	@ 0x4d
 8004abe:	2206      	movs	r2, #6
 8004ac0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	78fa      	ldrb	r2, [r7, #3]
 8004ac8:	4611      	mov	r1, r2
 8004aca:	4618      	mov	r0, r3
 8004acc:	f005 ff1d 	bl	800a90a <USB_HC_Halt>
 8004ad0:	e2de      	b.n	8005090 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	78fa      	ldrb	r2, [r7, #3]
 8004ad8:	4611      	mov	r1, r2
 8004ada:	4618      	mov	r0, r3
 8004adc:	f005 f971 	bl	8009dc2 <USB_ReadChInterrupts>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	f003 0310 	and.w	r3, r3, #16
 8004ae6:	2b10      	cmp	r3, #16
 8004ae8:	d144      	bne.n	8004b74 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004aea:	78fa      	ldrb	r2, [r7, #3]
 8004aec:	6879      	ldr	r1, [r7, #4]
 8004aee:	4613      	mov	r3, r2
 8004af0:	011b      	lsls	r3, r3, #4
 8004af2:	1a9b      	subs	r3, r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	440b      	add	r3, r1
 8004af8:	3344      	adds	r3, #68	@ 0x44
 8004afa:	2200      	movs	r2, #0
 8004afc:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004afe:	78fa      	ldrb	r2, [r7, #3]
 8004b00:	6879      	ldr	r1, [r7, #4]
 8004b02:	4613      	mov	r3, r2
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	1a9b      	subs	r3, r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	440b      	add	r3, r1
 8004b0c:	334d      	adds	r3, #77	@ 0x4d
 8004b0e:	2204      	movs	r2, #4
 8004b10:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004b12:	78fa      	ldrb	r2, [r7, #3]
 8004b14:	6879      	ldr	r1, [r7, #4]
 8004b16:	4613      	mov	r3, r2
 8004b18:	011b      	lsls	r3, r3, #4
 8004b1a:	1a9b      	subs	r3, r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	440b      	add	r3, r1
 8004b20:	3319      	adds	r3, #25
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d114      	bne.n	8004b52 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004b28:	78fa      	ldrb	r2, [r7, #3]
 8004b2a:	6879      	ldr	r1, [r7, #4]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	1a9b      	subs	r3, r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	440b      	add	r3, r1
 8004b36:	3318      	adds	r3, #24
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d109      	bne.n	8004b52 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004b3e:	78fa      	ldrb	r2, [r7, #3]
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	4613      	mov	r3, r2
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	1a9b      	subs	r3, r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	3319      	adds	r3, #25
 8004b4e:	2201      	movs	r2, #1
 8004b50:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	78fa      	ldrb	r2, [r7, #3]
 8004b58:	4611      	mov	r1, r2
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f005 fed5 	bl	800a90a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004b60:	78fb      	ldrb	r3, [r7, #3]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	2310      	movs	r3, #16
 8004b70:	6093      	str	r3, [r2, #8]
 8004b72:	e28d      	b.n	8005090 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	78fa      	ldrb	r2, [r7, #3]
 8004b7a:	4611      	mov	r1, r2
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f005 f920 	bl	8009dc2 <USB_ReadChInterrupts>
 8004b82:	4603      	mov	r3, r0
 8004b84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b88:	2b80      	cmp	r3, #128	@ 0x80
 8004b8a:	d169      	bne.n	8004c60 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	799b      	ldrb	r3, [r3, #6]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d111      	bne.n	8004bb8 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004b94:	78fa      	ldrb	r2, [r7, #3]
 8004b96:	6879      	ldr	r1, [r7, #4]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	1a9b      	subs	r3, r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	440b      	add	r3, r1
 8004ba2:	334d      	adds	r3, #77	@ 0x4d
 8004ba4:	2207      	movs	r2, #7
 8004ba6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	78fa      	ldrb	r2, [r7, #3]
 8004bae:	4611      	mov	r1, r2
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f005 feaa 	bl	800a90a <USB_HC_Halt>
 8004bb6:	e049      	b.n	8004c4c <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004bb8:	78fa      	ldrb	r2, [r7, #3]
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	011b      	lsls	r3, r3, #4
 8004bc0:	1a9b      	subs	r3, r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	3344      	adds	r3, #68	@ 0x44
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	1c59      	adds	r1, r3, #1
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	011b      	lsls	r3, r3, #4
 8004bd2:	1a9b      	subs	r3, r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4403      	add	r3, r0
 8004bd8:	3344      	adds	r3, #68	@ 0x44
 8004bda:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004bdc:	78fa      	ldrb	r2, [r7, #3]
 8004bde:	6879      	ldr	r1, [r7, #4]
 8004be0:	4613      	mov	r3, r2
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	1a9b      	subs	r3, r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	3344      	adds	r3, #68	@ 0x44
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d922      	bls.n	8004c38 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004bf2:	78fa      	ldrb	r2, [r7, #3]
 8004bf4:	6879      	ldr	r1, [r7, #4]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	011b      	lsls	r3, r3, #4
 8004bfa:	1a9b      	subs	r3, r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	440b      	add	r3, r1
 8004c00:	3344      	adds	r3, #68	@ 0x44
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004c06:	78fa      	ldrb	r2, [r7, #3]
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	011b      	lsls	r3, r3, #4
 8004c0e:	1a9b      	subs	r3, r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	440b      	add	r3, r1
 8004c14:	334c      	adds	r3, #76	@ 0x4c
 8004c16:	2204      	movs	r2, #4
 8004c18:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004c1a:	78fa      	ldrb	r2, [r7, #3]
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	011b      	lsls	r3, r3, #4
 8004c22:	1a9b      	subs	r3, r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	440b      	add	r3, r1
 8004c28:	334c      	adds	r3, #76	@ 0x4c
 8004c2a:	781a      	ldrb	r2, [r3, #0]
 8004c2c:	78fb      	ldrb	r3, [r7, #3]
 8004c2e:	4619      	mov	r1, r3
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f00b fe79 	bl	8010928 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004c36:	e009      	b.n	8004c4c <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004c38:	78fa      	ldrb	r2, [r7, #3]
 8004c3a:	6879      	ldr	r1, [r7, #4]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	1a9b      	subs	r3, r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	440b      	add	r3, r1
 8004c46:	334c      	adds	r3, #76	@ 0x4c
 8004c48:	2202      	movs	r2, #2
 8004c4a:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004c4c:	78fb      	ldrb	r3, [r7, #3]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c58:	461a      	mov	r2, r3
 8004c5a:	2380      	movs	r3, #128	@ 0x80
 8004c5c:	6093      	str	r3, [r2, #8]
 8004c5e:	e217      	b.n	8005090 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	78fa      	ldrb	r2, [r7, #3]
 8004c66:	4611      	mov	r1, r2
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f005 f8aa 	bl	8009dc2 <USB_ReadChInterrupts>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c78:	d11b      	bne.n	8004cb2 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004c7a:	78fa      	ldrb	r2, [r7, #3]
 8004c7c:	6879      	ldr	r1, [r7, #4]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	1a9b      	subs	r3, r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	440b      	add	r3, r1
 8004c88:	334d      	adds	r3, #77	@ 0x4d
 8004c8a:	2209      	movs	r2, #9
 8004c8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	78fa      	ldrb	r2, [r7, #3]
 8004c94:	4611      	mov	r1, r2
 8004c96:	4618      	mov	r0, r3
 8004c98:	f005 fe37 	bl	800a90a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004c9c:	78fb      	ldrb	r3, [r7, #3]
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ca8:	461a      	mov	r2, r3
 8004caa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004cae:	6093      	str	r3, [r2, #8]
 8004cb0:	e1ee      	b.n	8005090 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	78fa      	ldrb	r2, [r7, #3]
 8004cb8:	4611      	mov	r1, r2
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f005 f881 	bl	8009dc2 <USB_ReadChInterrupts>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	f040 81df 	bne.w	800508a <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004ccc:	78fb      	ldrb	r3, [r7, #3]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cd8:	461a      	mov	r2, r3
 8004cda:	2302      	movs	r3, #2
 8004cdc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004cde:	78fa      	ldrb	r2, [r7, #3]
 8004ce0:	6879      	ldr	r1, [r7, #4]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	011b      	lsls	r3, r3, #4
 8004ce6:	1a9b      	subs	r3, r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	440b      	add	r3, r1
 8004cec:	334d      	adds	r3, #77	@ 0x4d
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	f040 8093 	bne.w	8004e1c <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004cf6:	78fa      	ldrb	r2, [r7, #3]
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	011b      	lsls	r3, r3, #4
 8004cfe:	1a9b      	subs	r3, r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	440b      	add	r3, r1
 8004d04:	334d      	adds	r3, #77	@ 0x4d
 8004d06:	2202      	movs	r2, #2
 8004d08:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004d0a:	78fa      	ldrb	r2, [r7, #3]
 8004d0c:	6879      	ldr	r1, [r7, #4]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	011b      	lsls	r3, r3, #4
 8004d12:	1a9b      	subs	r3, r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	440b      	add	r3, r1
 8004d18:	334c      	adds	r3, #76	@ 0x4c
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004d1e:	78fa      	ldrb	r2, [r7, #3]
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	4613      	mov	r3, r2
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	3326      	adds	r3, #38	@ 0x26
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d00b      	beq.n	8004d4c <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004d34:	78fa      	ldrb	r2, [r7, #3]
 8004d36:	6879      	ldr	r1, [r7, #4]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	1a9b      	subs	r3, r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	440b      	add	r3, r1
 8004d42:	3326      	adds	r3, #38	@ 0x26
 8004d44:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	f040 8190 	bne.w	800506c <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	799b      	ldrb	r3, [r3, #6]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d115      	bne.n	8004d80 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004d54:	78fa      	ldrb	r2, [r7, #3]
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	011b      	lsls	r3, r3, #4
 8004d5c:	1a9b      	subs	r3, r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	440b      	add	r3, r1
 8004d62:	333d      	adds	r3, #61	@ 0x3d
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	78fa      	ldrb	r2, [r7, #3]
 8004d68:	f083 0301 	eor.w	r3, r3, #1
 8004d6c:	b2d8      	uxtb	r0, r3
 8004d6e:	6879      	ldr	r1, [r7, #4]
 8004d70:	4613      	mov	r3, r2
 8004d72:	011b      	lsls	r3, r3, #4
 8004d74:	1a9b      	subs	r3, r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	440b      	add	r3, r1
 8004d7a:	333d      	adds	r3, #61	@ 0x3d
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	799b      	ldrb	r3, [r3, #6]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	f040 8171 	bne.w	800506c <HCD_HC_OUT_IRQHandler+0x920>
 8004d8a:	78fa      	ldrb	r2, [r7, #3]
 8004d8c:	6879      	ldr	r1, [r7, #4]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	011b      	lsls	r3, r3, #4
 8004d92:	1a9b      	subs	r3, r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	440b      	add	r3, r1
 8004d98:	3334      	adds	r3, #52	@ 0x34
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 8165 	beq.w	800506c <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004da2:	78fa      	ldrb	r2, [r7, #3]
 8004da4:	6879      	ldr	r1, [r7, #4]
 8004da6:	4613      	mov	r3, r2
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	1a9b      	subs	r3, r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	440b      	add	r3, r1
 8004db0:	3334      	adds	r3, #52	@ 0x34
 8004db2:	6819      	ldr	r1, [r3, #0]
 8004db4:	78fa      	ldrb	r2, [r7, #3]
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	4613      	mov	r3, r2
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	1a9b      	subs	r3, r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4403      	add	r3, r0
 8004dc2:	3328      	adds	r3, #40	@ 0x28
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	440b      	add	r3, r1
 8004dc8:	1e59      	subs	r1, r3, #1
 8004dca:	78fa      	ldrb	r2, [r7, #3]
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	011b      	lsls	r3, r3, #4
 8004dd2:	1a9b      	subs	r3, r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4403      	add	r3, r0
 8004dd8:	3328      	adds	r3, #40	@ 0x28
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004de0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 813f 	beq.w	800506c <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004dee:	78fa      	ldrb	r2, [r7, #3]
 8004df0:	6879      	ldr	r1, [r7, #4]
 8004df2:	4613      	mov	r3, r2
 8004df4:	011b      	lsls	r3, r3, #4
 8004df6:	1a9b      	subs	r3, r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	440b      	add	r3, r1
 8004dfc:	333d      	adds	r3, #61	@ 0x3d
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	78fa      	ldrb	r2, [r7, #3]
 8004e02:	f083 0301 	eor.w	r3, r3, #1
 8004e06:	b2d8      	uxtb	r0, r3
 8004e08:	6879      	ldr	r1, [r7, #4]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	011b      	lsls	r3, r3, #4
 8004e0e:	1a9b      	subs	r3, r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	440b      	add	r3, r1
 8004e14:	333d      	adds	r3, #61	@ 0x3d
 8004e16:	4602      	mov	r2, r0
 8004e18:	701a      	strb	r2, [r3, #0]
 8004e1a:	e127      	b.n	800506c <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004e1c:	78fa      	ldrb	r2, [r7, #3]
 8004e1e:	6879      	ldr	r1, [r7, #4]
 8004e20:	4613      	mov	r3, r2
 8004e22:	011b      	lsls	r3, r3, #4
 8004e24:	1a9b      	subs	r3, r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	440b      	add	r3, r1
 8004e2a:	334d      	adds	r3, #77	@ 0x4d
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b03      	cmp	r3, #3
 8004e30:	d120      	bne.n	8004e74 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e32:	78fa      	ldrb	r2, [r7, #3]
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	4613      	mov	r3, r2
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	1a9b      	subs	r3, r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	440b      	add	r3, r1
 8004e40:	334d      	adds	r3, #77	@ 0x4d
 8004e42:	2202      	movs	r2, #2
 8004e44:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004e46:	78fa      	ldrb	r2, [r7, #3]
 8004e48:	6879      	ldr	r1, [r7, #4]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	011b      	lsls	r3, r3, #4
 8004e4e:	1a9b      	subs	r3, r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	440b      	add	r3, r1
 8004e54:	331b      	adds	r3, #27
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	f040 8107 	bne.w	800506c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004e5e:	78fa      	ldrb	r2, [r7, #3]
 8004e60:	6879      	ldr	r1, [r7, #4]
 8004e62:	4613      	mov	r3, r2
 8004e64:	011b      	lsls	r3, r3, #4
 8004e66:	1a9b      	subs	r3, r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	440b      	add	r3, r1
 8004e6c:	334c      	adds	r3, #76	@ 0x4c
 8004e6e:	2202      	movs	r2, #2
 8004e70:	701a      	strb	r2, [r3, #0]
 8004e72:	e0fb      	b.n	800506c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004e74:	78fa      	ldrb	r2, [r7, #3]
 8004e76:	6879      	ldr	r1, [r7, #4]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	1a9b      	subs	r3, r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	440b      	add	r3, r1
 8004e82:	334d      	adds	r3, #77	@ 0x4d
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d13a      	bne.n	8004f00 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e8a:	78fa      	ldrb	r2, [r7, #3]
 8004e8c:	6879      	ldr	r1, [r7, #4]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	011b      	lsls	r3, r3, #4
 8004e92:	1a9b      	subs	r3, r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	440b      	add	r3, r1
 8004e98:	334d      	adds	r3, #77	@ 0x4d
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004e9e:	78fa      	ldrb	r2, [r7, #3]
 8004ea0:	6879      	ldr	r1, [r7, #4]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	1a9b      	subs	r3, r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	440b      	add	r3, r1
 8004eac:	334c      	adds	r3, #76	@ 0x4c
 8004eae:	2202      	movs	r2, #2
 8004eb0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004eb2:	78fa      	ldrb	r2, [r7, #3]
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	1a9b      	subs	r3, r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	440b      	add	r3, r1
 8004ec0:	331b      	adds	r3, #27
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	f040 80d1 	bne.w	800506c <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004eca:	78fa      	ldrb	r2, [r7, #3]
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	1a9b      	subs	r3, r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	440b      	add	r3, r1
 8004ed8:	331b      	adds	r3, #27
 8004eda:	2200      	movs	r2, #0
 8004edc:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004ede:	78fb      	ldrb	r3, [r7, #3]
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	78fa      	ldrb	r2, [r7, #3]
 8004eee:	0151      	lsls	r1, r2, #5
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	440a      	add	r2, r1
 8004ef4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ef8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004efc:	6053      	str	r3, [r2, #4]
 8004efe:	e0b5      	b.n	800506c <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004f00:	78fa      	ldrb	r2, [r7, #3]
 8004f02:	6879      	ldr	r1, [r7, #4]
 8004f04:	4613      	mov	r3, r2
 8004f06:	011b      	lsls	r3, r3, #4
 8004f08:	1a9b      	subs	r3, r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	440b      	add	r3, r1
 8004f0e:	334d      	adds	r3, #77	@ 0x4d
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	2b05      	cmp	r3, #5
 8004f14:	d114      	bne.n	8004f40 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004f16:	78fa      	ldrb	r2, [r7, #3]
 8004f18:	6879      	ldr	r1, [r7, #4]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	011b      	lsls	r3, r3, #4
 8004f1e:	1a9b      	subs	r3, r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	440b      	add	r3, r1
 8004f24:	334d      	adds	r3, #77	@ 0x4d
 8004f26:	2202      	movs	r2, #2
 8004f28:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004f2a:	78fa      	ldrb	r2, [r7, #3]
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	1a9b      	subs	r3, r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	440b      	add	r3, r1
 8004f38:	334c      	adds	r3, #76	@ 0x4c
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	701a      	strb	r2, [r3, #0]
 8004f3e:	e095      	b.n	800506c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004f40:	78fa      	ldrb	r2, [r7, #3]
 8004f42:	6879      	ldr	r1, [r7, #4]
 8004f44:	4613      	mov	r3, r2
 8004f46:	011b      	lsls	r3, r3, #4
 8004f48:	1a9b      	subs	r3, r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	440b      	add	r3, r1
 8004f4e:	334d      	adds	r3, #77	@ 0x4d
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	2b06      	cmp	r3, #6
 8004f54:	d114      	bne.n	8004f80 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004f56:	78fa      	ldrb	r2, [r7, #3]
 8004f58:	6879      	ldr	r1, [r7, #4]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	011b      	lsls	r3, r3, #4
 8004f5e:	1a9b      	subs	r3, r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	440b      	add	r3, r1
 8004f64:	334d      	adds	r3, #77	@ 0x4d
 8004f66:	2202      	movs	r2, #2
 8004f68:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004f6a:	78fa      	ldrb	r2, [r7, #3]
 8004f6c:	6879      	ldr	r1, [r7, #4]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	011b      	lsls	r3, r3, #4
 8004f72:	1a9b      	subs	r3, r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	440b      	add	r3, r1
 8004f78:	334c      	adds	r3, #76	@ 0x4c
 8004f7a:	2205      	movs	r2, #5
 8004f7c:	701a      	strb	r2, [r3, #0]
 8004f7e:	e075      	b.n	800506c <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004f80:	78fa      	ldrb	r2, [r7, #3]
 8004f82:	6879      	ldr	r1, [r7, #4]
 8004f84:	4613      	mov	r3, r2
 8004f86:	011b      	lsls	r3, r3, #4
 8004f88:	1a9b      	subs	r3, r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	440b      	add	r3, r1
 8004f8e:	334d      	adds	r3, #77	@ 0x4d
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	2b07      	cmp	r3, #7
 8004f94:	d00a      	beq.n	8004fac <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004f96:	78fa      	ldrb	r2, [r7, #3]
 8004f98:	6879      	ldr	r1, [r7, #4]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	011b      	lsls	r3, r3, #4
 8004f9e:	1a9b      	subs	r3, r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	440b      	add	r3, r1
 8004fa4:	334d      	adds	r3, #77	@ 0x4d
 8004fa6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004fa8:	2b09      	cmp	r3, #9
 8004faa:	d170      	bne.n	800508e <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004fac:	78fa      	ldrb	r2, [r7, #3]
 8004fae:	6879      	ldr	r1, [r7, #4]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	1a9b      	subs	r3, r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	440b      	add	r3, r1
 8004fba:	334d      	adds	r3, #77	@ 0x4d
 8004fbc:	2202      	movs	r2, #2
 8004fbe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004fc0:	78fa      	ldrb	r2, [r7, #3]
 8004fc2:	6879      	ldr	r1, [r7, #4]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	011b      	lsls	r3, r3, #4
 8004fc8:	1a9b      	subs	r3, r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	440b      	add	r3, r1
 8004fce:	3344      	adds	r3, #68	@ 0x44
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	1c59      	adds	r1, r3, #1
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	011b      	lsls	r3, r3, #4
 8004fda:	1a9b      	subs	r3, r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4403      	add	r3, r0
 8004fe0:	3344      	adds	r3, #68	@ 0x44
 8004fe2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004fe4:	78fa      	ldrb	r2, [r7, #3]
 8004fe6:	6879      	ldr	r1, [r7, #4]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	011b      	lsls	r3, r3, #4
 8004fec:	1a9b      	subs	r3, r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	440b      	add	r3, r1
 8004ff2:	3344      	adds	r3, #68	@ 0x44
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d914      	bls.n	8005024 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004ffa:	78fa      	ldrb	r2, [r7, #3]
 8004ffc:	6879      	ldr	r1, [r7, #4]
 8004ffe:	4613      	mov	r3, r2
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	1a9b      	subs	r3, r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	440b      	add	r3, r1
 8005008:	3344      	adds	r3, #68	@ 0x44
 800500a:	2200      	movs	r2, #0
 800500c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800500e:	78fa      	ldrb	r2, [r7, #3]
 8005010:	6879      	ldr	r1, [r7, #4]
 8005012:	4613      	mov	r3, r2
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	1a9b      	subs	r3, r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	440b      	add	r3, r1
 800501c:	334c      	adds	r3, #76	@ 0x4c
 800501e:	2204      	movs	r2, #4
 8005020:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005022:	e022      	b.n	800506a <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005024:	78fa      	ldrb	r2, [r7, #3]
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	4613      	mov	r3, r2
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	1a9b      	subs	r3, r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	440b      	add	r3, r1
 8005032:	334c      	adds	r3, #76	@ 0x4c
 8005034:	2202      	movs	r2, #2
 8005036:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005038:	78fb      	ldrb	r3, [r7, #3]
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	4413      	add	r3, r2
 8005040:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800504e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005056:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005058:	78fb      	ldrb	r3, [r7, #3]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	4413      	add	r3, r2
 8005060:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005064:	461a      	mov	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800506a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800506c:	78fa      	ldrb	r2, [r7, #3]
 800506e:	6879      	ldr	r1, [r7, #4]
 8005070:	4613      	mov	r3, r2
 8005072:	011b      	lsls	r3, r3, #4
 8005074:	1a9b      	subs	r3, r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	440b      	add	r3, r1
 800507a:	334c      	adds	r3, #76	@ 0x4c
 800507c:	781a      	ldrb	r2, [r3, #0]
 800507e:	78fb      	ldrb	r3, [r7, #3]
 8005080:	4619      	mov	r1, r3
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f00b fc50 	bl	8010928 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005088:	e002      	b.n	8005090 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800508a:	bf00      	nop
 800508c:	e000      	b.n	8005090 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800508e:	bf00      	nop
  }
}
 8005090:	3718      	adds	r7, #24
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b08a      	sub	sp, #40	@ 0x28
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	0c5b      	lsrs	r3, r3, #17
 80050bc:	f003 030f 	and.w	r3, r3, #15
 80050c0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	091b      	lsrs	r3, r3, #4
 80050c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050ca:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d004      	beq.n	80050dc <HCD_RXQLVL_IRQHandler+0x46>
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	2b05      	cmp	r3, #5
 80050d6:	f000 80b6 	beq.w	8005246 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80050da:	e0b7      	b.n	800524c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f000 80b3 	beq.w	800524a <HCD_RXQLVL_IRQHandler+0x1b4>
 80050e4:	6879      	ldr	r1, [r7, #4]
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	4613      	mov	r3, r2
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	1a9b      	subs	r3, r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	440b      	add	r3, r1
 80050f2:	332c      	adds	r3, #44	@ 0x2c
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 80a7 	beq.w	800524a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80050fc:	6879      	ldr	r1, [r7, #4]
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	4613      	mov	r3, r2
 8005102:	011b      	lsls	r3, r3, #4
 8005104:	1a9b      	subs	r3, r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	440b      	add	r3, r1
 800510a:	3338      	adds	r3, #56	@ 0x38
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	18d1      	adds	r1, r2, r3
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	4613      	mov	r3, r2
 8005118:	011b      	lsls	r3, r3, #4
 800511a:	1a9b      	subs	r3, r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4403      	add	r3, r0
 8005120:	3334      	adds	r3, #52	@ 0x34
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4299      	cmp	r1, r3
 8005126:	f200 8083 	bhi.w	8005230 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6818      	ldr	r0, [r3, #0]
 800512e:	6879      	ldr	r1, [r7, #4]
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	4613      	mov	r3, r2
 8005134:	011b      	lsls	r3, r3, #4
 8005136:	1a9b      	subs	r3, r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	440b      	add	r3, r1
 800513c:	332c      	adds	r3, #44	@ 0x2c
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	b292      	uxth	r2, r2
 8005144:	4619      	mov	r1, r3
 8005146:	f004 fdd1 	bl	8009cec <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800514a:	6879      	ldr	r1, [r7, #4]
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	4613      	mov	r3, r2
 8005150:	011b      	lsls	r3, r3, #4
 8005152:	1a9b      	subs	r3, r3, r2
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	440b      	add	r3, r1
 8005158:	332c      	adds	r3, #44	@ 0x2c
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	18d1      	adds	r1, r2, r3
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	4613      	mov	r3, r2
 8005166:	011b      	lsls	r3, r3, #4
 8005168:	1a9b      	subs	r3, r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4403      	add	r3, r0
 800516e:	332c      	adds	r3, #44	@ 0x2c
 8005170:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005172:	6879      	ldr	r1, [r7, #4]
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	4613      	mov	r3, r2
 8005178:	011b      	lsls	r3, r3, #4
 800517a:	1a9b      	subs	r3, r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	440b      	add	r3, r1
 8005180:	3338      	adds	r3, #56	@ 0x38
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	18d1      	adds	r1, r2, r3
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	4613      	mov	r3, r2
 800518e:	011b      	lsls	r3, r3, #4
 8005190:	1a9b      	subs	r3, r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4403      	add	r3, r0
 8005196:	3338      	adds	r3, #56	@ 0x38
 8005198:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	0cdb      	lsrs	r3, r3, #19
 80051aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051ae:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80051b0:	6879      	ldr	r1, [r7, #4]
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	4613      	mov	r3, r2
 80051b6:	011b      	lsls	r3, r3, #4
 80051b8:	1a9b      	subs	r3, r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	440b      	add	r3, r1
 80051be:	3328      	adds	r3, #40	@ 0x28
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	461a      	mov	r2, r3
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d13f      	bne.n	800524a <HCD_RXQLVL_IRQHandler+0x1b4>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d03c      	beq.n	800524a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	6a3b      	ldr	r3, [r7, #32]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80051e6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80051ee:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051fc:	461a      	mov	r2, r3
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005202:	6879      	ldr	r1, [r7, #4]
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	4613      	mov	r3, r2
 8005208:	011b      	lsls	r3, r3, #4
 800520a:	1a9b      	subs	r3, r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	440b      	add	r3, r1
 8005210:	333c      	adds	r3, #60	@ 0x3c
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	f083 0301 	eor.w	r3, r3, #1
 8005218:	b2d8      	uxtb	r0, r3
 800521a:	6879      	ldr	r1, [r7, #4]
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	4613      	mov	r3, r2
 8005220:	011b      	lsls	r3, r3, #4
 8005222:	1a9b      	subs	r3, r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	440b      	add	r3, r1
 8005228:	333c      	adds	r3, #60	@ 0x3c
 800522a:	4602      	mov	r2, r0
 800522c:	701a      	strb	r2, [r3, #0]
      break;
 800522e:	e00c      	b.n	800524a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005230:	6879      	ldr	r1, [r7, #4]
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	4613      	mov	r3, r2
 8005236:	011b      	lsls	r3, r3, #4
 8005238:	1a9b      	subs	r3, r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	440b      	add	r3, r1
 800523e:	334c      	adds	r3, #76	@ 0x4c
 8005240:	2204      	movs	r2, #4
 8005242:	701a      	strb	r2, [r3, #0]
      break;
 8005244:	e001      	b.n	800524a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8005246:	bf00      	nop
 8005248:	e000      	b.n	800524c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800524a:	bf00      	nop
  }
}
 800524c:	bf00      	nop
 800524e:	3728      	adds	r7, #40	@ 0x28
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005280:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b02      	cmp	r3, #2
 800528a:	d10b      	bne.n	80052a4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b01      	cmp	r3, #1
 8005294:	d102      	bne.n	800529c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f00b fb2a 	bl	80108f0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f043 0302 	orr.w	r3, r3, #2
 80052a2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f003 0308 	and.w	r3, r3, #8
 80052aa:	2b08      	cmp	r3, #8
 80052ac:	d132      	bne.n	8005314 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	f043 0308 	orr.w	r3, r3, #8
 80052b4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f003 0304 	and.w	r3, r3, #4
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d126      	bne.n	800530e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	7a5b      	ldrb	r3, [r3, #9]
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d113      	bne.n	80052f0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80052ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80052d2:	d106      	bne.n	80052e2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2102      	movs	r1, #2
 80052da:	4618      	mov	r0, r3
 80052dc:	f004 fe96 	bl	800a00c <USB_InitFSLSPClkSel>
 80052e0:	e011      	b.n	8005306 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2101      	movs	r1, #1
 80052e8:	4618      	mov	r0, r3
 80052ea:	f004 fe8f 	bl	800a00c <USB_InitFSLSPClkSel>
 80052ee:	e00a      	b.n	8005306 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	79db      	ldrb	r3, [r3, #7]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d106      	bne.n	8005306 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80052fe:	461a      	mov	r2, r3
 8005300:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005304:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f00b fb1c 	bl	8010944 <HAL_HCD_PortEnabled_Callback>
 800530c:	e002      	b.n	8005314 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f00b fb26 	bl	8010960 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f003 0320 	and.w	r3, r3, #32
 800531a:	2b20      	cmp	r3, #32
 800531c:	d103      	bne.n	8005326 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	f043 0320 	orr.w	r3, r3, #32
 8005324:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800532c:	461a      	mov	r2, r3
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	6013      	str	r3, [r2, #0]
}
 8005332:	bf00      	nop
 8005334:	3718      	adds	r7, #24
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
	...

0800533c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d101      	bne.n	800534e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e12b      	b.n	80055a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d106      	bne.n	8005368 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7fc fbf4 	bl	8001b50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2224      	movs	r2, #36	@ 0x24
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0201 	bic.w	r2, r2, #1
 800537e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800538e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800539e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80053a0:	f002 fcd2 	bl	8007d48 <HAL_RCC_GetPCLK1Freq>
 80053a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	4a81      	ldr	r2, [pc, #516]	@ (80055b0 <HAL_I2C_Init+0x274>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d807      	bhi.n	80053c0 <HAL_I2C_Init+0x84>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	4a80      	ldr	r2, [pc, #512]	@ (80055b4 <HAL_I2C_Init+0x278>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	bf94      	ite	ls
 80053b8:	2301      	movls	r3, #1
 80053ba:	2300      	movhi	r3, #0
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	e006      	b.n	80053ce <HAL_I2C_Init+0x92>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4a7d      	ldr	r2, [pc, #500]	@ (80055b8 <HAL_I2C_Init+0x27c>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	bf94      	ite	ls
 80053c8:	2301      	movls	r3, #1
 80053ca:	2300      	movhi	r3, #0
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e0e7      	b.n	80055a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	4a78      	ldr	r2, [pc, #480]	@ (80055bc <HAL_I2C_Init+0x280>)
 80053da:	fba2 2303 	umull	r2, r3, r2, r3
 80053de:	0c9b      	lsrs	r3, r3, #18
 80053e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	4a6a      	ldr	r2, [pc, #424]	@ (80055b0 <HAL_I2C_Init+0x274>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d802      	bhi.n	8005410 <HAL_I2C_Init+0xd4>
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	3301      	adds	r3, #1
 800540e:	e009      	b.n	8005424 <HAL_I2C_Init+0xe8>
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005416:	fb02 f303 	mul.w	r3, r2, r3
 800541a:	4a69      	ldr	r2, [pc, #420]	@ (80055c0 <HAL_I2C_Init+0x284>)
 800541c:	fba2 2303 	umull	r2, r3, r2, r3
 8005420:	099b      	lsrs	r3, r3, #6
 8005422:	3301      	adds	r3, #1
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	6812      	ldr	r2, [r2, #0]
 8005428:	430b      	orrs	r3, r1
 800542a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005436:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	495c      	ldr	r1, [pc, #368]	@ (80055b0 <HAL_I2C_Init+0x274>)
 8005440:	428b      	cmp	r3, r1
 8005442:	d819      	bhi.n	8005478 <HAL_I2C_Init+0x13c>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	1e59      	subs	r1, r3, #1
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005452:	1c59      	adds	r1, r3, #1
 8005454:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005458:	400b      	ands	r3, r1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00a      	beq.n	8005474 <HAL_I2C_Init+0x138>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	1e59      	subs	r1, r3, #1
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	fbb1 f3f3 	udiv	r3, r1, r3
 800546c:	3301      	adds	r3, #1
 800546e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005472:	e051      	b.n	8005518 <HAL_I2C_Init+0x1dc>
 8005474:	2304      	movs	r3, #4
 8005476:	e04f      	b.n	8005518 <HAL_I2C_Init+0x1dc>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d111      	bne.n	80054a4 <HAL_I2C_Init+0x168>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	1e58      	subs	r0, r3, #1
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6859      	ldr	r1, [r3, #4]
 8005488:	460b      	mov	r3, r1
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	440b      	add	r3, r1
 800548e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005492:	3301      	adds	r3, #1
 8005494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005498:	2b00      	cmp	r3, #0
 800549a:	bf0c      	ite	eq
 800549c:	2301      	moveq	r3, #1
 800549e:	2300      	movne	r3, #0
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	e012      	b.n	80054ca <HAL_I2C_Init+0x18e>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	1e58      	subs	r0, r3, #1
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6859      	ldr	r1, [r3, #4]
 80054ac:	460b      	mov	r3, r1
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	440b      	add	r3, r1
 80054b2:	0099      	lsls	r1, r3, #2
 80054b4:	440b      	add	r3, r1
 80054b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80054ba:	3301      	adds	r3, #1
 80054bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	bf0c      	ite	eq
 80054c4:	2301      	moveq	r3, #1
 80054c6:	2300      	movne	r3, #0
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <HAL_I2C_Init+0x196>
 80054ce:	2301      	movs	r3, #1
 80054d0:	e022      	b.n	8005518 <HAL_I2C_Init+0x1dc>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10e      	bne.n	80054f8 <HAL_I2C_Init+0x1bc>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	1e58      	subs	r0, r3, #1
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6859      	ldr	r1, [r3, #4]
 80054e2:	460b      	mov	r3, r1
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	440b      	add	r3, r1
 80054e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80054ec:	3301      	adds	r3, #1
 80054ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054f6:	e00f      	b.n	8005518 <HAL_I2C_Init+0x1dc>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	1e58      	subs	r0, r3, #1
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6859      	ldr	r1, [r3, #4]
 8005500:	460b      	mov	r3, r1
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	440b      	add	r3, r1
 8005506:	0099      	lsls	r1, r3, #2
 8005508:	440b      	add	r3, r1
 800550a:	fbb0 f3f3 	udiv	r3, r0, r3
 800550e:	3301      	adds	r3, #1
 8005510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005514:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005518:	6879      	ldr	r1, [r7, #4]
 800551a:	6809      	ldr	r1, [r1, #0]
 800551c:	4313      	orrs	r3, r2
 800551e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	69da      	ldr	r2, [r3, #28]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	431a      	orrs	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005546:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	6911      	ldr	r1, [r2, #16]
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	68d2      	ldr	r2, [r2, #12]
 8005552:	4311      	orrs	r1, r2
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6812      	ldr	r2, [r2, #0]
 8005558:	430b      	orrs	r3, r1
 800555a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	695a      	ldr	r2, [r3, #20]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	431a      	orrs	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 0201 	orr.w	r2, r2, #1
 8005586:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2220      	movs	r2, #32
 8005592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	000186a0 	.word	0x000186a0
 80055b4:	001e847f 	.word	0x001e847f
 80055b8:	003d08ff 	.word	0x003d08ff
 80055bc:	431bde83 	.word	0x431bde83
 80055c0:	10624dd3 	.word	0x10624dd3

080055c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b088      	sub	sp, #32
 80055c8:	af02      	add	r7, sp, #8
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	607a      	str	r2, [r7, #4]
 80055ce:	461a      	mov	r2, r3
 80055d0:	460b      	mov	r3, r1
 80055d2:	817b      	strh	r3, [r7, #10]
 80055d4:	4613      	mov	r3, r2
 80055d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055d8:	f7fc fe84 	bl	80022e4 <HAL_GetTick>
 80055dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b20      	cmp	r3, #32
 80055e8:	f040 80e0 	bne.w	80057ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	9300      	str	r3, [sp, #0]
 80055f0:	2319      	movs	r3, #25
 80055f2:	2201      	movs	r2, #1
 80055f4:	4970      	ldr	r1, [pc, #448]	@ (80057b8 <HAL_I2C_Master_Transmit+0x1f4>)
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f000 fc64 	bl	8005ec4 <I2C_WaitOnFlagUntilTimeout>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005602:	2302      	movs	r3, #2
 8005604:	e0d3      	b.n	80057ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800560c:	2b01      	cmp	r3, #1
 800560e:	d101      	bne.n	8005614 <HAL_I2C_Master_Transmit+0x50>
 8005610:	2302      	movs	r3, #2
 8005612:	e0cc      	b.n	80057ae <HAL_I2C_Master_Transmit+0x1ea>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b01      	cmp	r3, #1
 8005628:	d007      	beq.n	800563a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f042 0201 	orr.w	r2, r2, #1
 8005638:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005648:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2221      	movs	r2, #33	@ 0x21
 800564e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2210      	movs	r2, #16
 8005656:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	893a      	ldrh	r2, [r7, #8]
 800566a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005670:	b29a      	uxth	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	4a50      	ldr	r2, [pc, #320]	@ (80057bc <HAL_I2C_Master_Transmit+0x1f8>)
 800567a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800567c:	8979      	ldrh	r1, [r7, #10]
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	6a3a      	ldr	r2, [r7, #32]
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f000 face 	bl	8005c24 <I2C_MasterRequestWrite>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e08d      	b.n	80057ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005692:	2300      	movs	r3, #0
 8005694:	613b      	str	r3, [r7, #16]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	613b      	str	r3, [r7, #16]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	613b      	str	r3, [r7, #16]
 80056a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80056a8:	e066      	b.n	8005778 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	6a39      	ldr	r1, [r7, #32]
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f000 fd22 	bl	80060f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00d      	beq.n	80056d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056be:	2b04      	cmp	r3, #4
 80056c0:	d107      	bne.n	80056d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e06b      	b.n	80057ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056da:	781a      	ldrb	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	3b01      	subs	r3, #1
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056fe:	3b01      	subs	r3, #1
 8005700:	b29a      	uxth	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b04      	cmp	r3, #4
 8005712:	d11b      	bne.n	800574c <HAL_I2C_Master_Transmit+0x188>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005718:	2b00      	cmp	r3, #0
 800571a:	d017      	beq.n	800574c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005720:	781a      	ldrb	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800572c:	1c5a      	adds	r2, r3, #1
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005736:	b29b      	uxth	r3, r3
 8005738:	3b01      	subs	r3, #1
 800573a:	b29a      	uxth	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005744:	3b01      	subs	r3, #1
 8005746:	b29a      	uxth	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	6a39      	ldr	r1, [r7, #32]
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 fd19 	bl	8006188 <I2C_WaitOnBTFFlagUntilTimeout>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00d      	beq.n	8005778 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005760:	2b04      	cmp	r3, #4
 8005762:	d107      	bne.n	8005774 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005772:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e01a      	b.n	80057ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800577c:	2b00      	cmp	r3, #0
 800577e:	d194      	bne.n	80056aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800578e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2220      	movs	r2, #32
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80057a8:	2300      	movs	r3, #0
 80057aa:	e000      	b.n	80057ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80057ac:	2302      	movs	r3, #2
  }
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3718      	adds	r7, #24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	00100002 	.word	0x00100002
 80057bc:	ffff0000 	.word	0xffff0000

080057c0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b08c      	sub	sp, #48	@ 0x30
 80057c4:	af02      	add	r7, sp, #8
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	607a      	str	r2, [r7, #4]
 80057ca:	461a      	mov	r2, r3
 80057cc:	460b      	mov	r3, r1
 80057ce:	817b      	strh	r3, [r7, #10]
 80057d0:	4613      	mov	r3, r2
 80057d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80057d4:	f7fc fd86 	bl	80022e4 <HAL_GetTick>
 80057d8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	f040 8217 	bne.w	8005c16 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	2319      	movs	r3, #25
 80057ee:	2201      	movs	r2, #1
 80057f0:	497c      	ldr	r1, [pc, #496]	@ (80059e4 <HAL_I2C_Master_Receive+0x224>)
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f000 fb66 	bl	8005ec4 <I2C_WaitOnFlagUntilTimeout>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80057fe:	2302      	movs	r3, #2
 8005800:	e20a      	b.n	8005c18 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005808:	2b01      	cmp	r3, #1
 800580a:	d101      	bne.n	8005810 <HAL_I2C_Master_Receive+0x50>
 800580c:	2302      	movs	r3, #2
 800580e:	e203      	b.n	8005c18 <HAL_I2C_Master_Receive+0x458>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b01      	cmp	r3, #1
 8005824:	d007      	beq.n	8005836 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f042 0201 	orr.w	r2, r2, #1
 8005834:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005844:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2222      	movs	r2, #34	@ 0x22
 800584a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2210      	movs	r2, #16
 8005852:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	893a      	ldrh	r2, [r7, #8]
 8005866:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800586c:	b29a      	uxth	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	4a5c      	ldr	r2, [pc, #368]	@ (80059e8 <HAL_I2C_Master_Receive+0x228>)
 8005876:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005878:	8979      	ldrh	r1, [r7, #10]
 800587a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	f000 fa52 	bl	8005d28 <I2C_MasterRequestRead>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e1c4      	b.n	8005c18 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005892:	2b00      	cmp	r3, #0
 8005894:	d113      	bne.n	80058be <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005896:	2300      	movs	r3, #0
 8005898:	623b      	str	r3, [r7, #32]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	623b      	str	r3, [r7, #32]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	623b      	str	r3, [r7, #32]
 80058aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	e198      	b.n	8005bf0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d11b      	bne.n	80058fe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058d6:	2300      	movs	r3, #0
 80058d8:	61fb      	str	r3, [r7, #28]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	61fb      	str	r3, [r7, #28]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	61fb      	str	r3, [r7, #28]
 80058ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058fa:	601a      	str	r2, [r3, #0]
 80058fc:	e178      	b.n	8005bf0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005902:	2b02      	cmp	r3, #2
 8005904:	d11b      	bne.n	800593e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005914:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005924:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005926:	2300      	movs	r3, #0
 8005928:	61bb      	str	r3, [r7, #24]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	61bb      	str	r3, [r7, #24]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	61bb      	str	r3, [r7, #24]
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	e158      	b.n	8005bf0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800594c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800594e:	2300      	movs	r3, #0
 8005950:	617b      	str	r3, [r7, #20]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	617b      	str	r3, [r7, #20]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	617b      	str	r3, [r7, #20]
 8005962:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005964:	e144      	b.n	8005bf0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800596a:	2b03      	cmp	r3, #3
 800596c:	f200 80f1 	bhi.w	8005b52 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005974:	2b01      	cmp	r3, #1
 8005976:	d123      	bne.n	80059c0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005978:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800597a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 fc4b 	bl	8006218 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e145      	b.n	8005c18 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	691a      	ldr	r2, [r3, #16]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005996:	b2d2      	uxtb	r2, r2
 8005998:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800599e:	1c5a      	adds	r2, r3, #1
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059a8:	3b01      	subs	r3, #1
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	3b01      	subs	r3, #1
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80059be:	e117      	b.n	8005bf0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d14e      	bne.n	8005a66 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ca:	9300      	str	r3, [sp, #0]
 80059cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ce:	2200      	movs	r2, #0
 80059d0:	4906      	ldr	r1, [pc, #24]	@ (80059ec <HAL_I2C_Master_Receive+0x22c>)
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f000 fa76 	bl	8005ec4 <I2C_WaitOnFlagUntilTimeout>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d008      	beq.n	80059f0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e11a      	b.n	8005c18 <HAL_I2C_Master_Receive+0x458>
 80059e2:	bf00      	nop
 80059e4:	00100002 	.word	0x00100002
 80059e8:	ffff0000 	.word	0xffff0000
 80059ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	691a      	ldr	r2, [r3, #16]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0a:	b2d2      	uxtb	r2, r2
 8005a0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a12:	1c5a      	adds	r2, r3, #1
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	691a      	ldr	r2, [r3, #16]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3c:	b2d2      	uxtb	r2, r2
 8005a3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a44:	1c5a      	adds	r2, r3, #1
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005a64:	e0c4      	b.n	8005bf0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	496c      	ldr	r1, [pc, #432]	@ (8005c20 <HAL_I2C_Master_Receive+0x460>)
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f000 fa27 	bl	8005ec4 <I2C_WaitOnFlagUntilTimeout>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d001      	beq.n	8005a80 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e0cb      	b.n	8005c18 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	691a      	ldr	r2, [r3, #16]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a9a:	b2d2      	uxtb	r2, r2
 8005a9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aac:	3b01      	subs	r3, #1
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	3b01      	subs	r3, #1
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac8:	2200      	movs	r2, #0
 8005aca:	4955      	ldr	r1, [pc, #340]	@ (8005c20 <HAL_I2C_Master_Receive+0x460>)
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f000 f9f9 	bl	8005ec4 <I2C_WaitOnFlagUntilTimeout>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d001      	beq.n	8005adc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e09d      	b.n	8005c18 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005aea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691a      	ldr	r2, [r3, #16]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af6:	b2d2      	uxtb	r2, r2
 8005af8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	3b01      	subs	r3, #1
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	691a      	ldr	r2, [r3, #16]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b28:	b2d2      	uxtb	r2, r2
 8005b2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b30:	1c5a      	adds	r2, r3, #1
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005b50:	e04e      	b.n	8005bf0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b54:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f000 fb5e 	bl	8006218 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d001      	beq.n	8005b66 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e058      	b.n	8005c18 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	691a      	ldr	r2, [r3, #16]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b70:	b2d2      	uxtb	r2, r2
 8005b72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b78:	1c5a      	adds	r2, r3, #1
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b82:	3b01      	subs	r3, #1
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	3b01      	subs	r3, #1
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	f003 0304 	and.w	r3, r3, #4
 8005ba2:	2b04      	cmp	r3, #4
 8005ba4:	d124      	bne.n	8005bf0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005baa:	2b03      	cmp	r3, #3
 8005bac:	d107      	bne.n	8005bbe <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bbc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	691a      	ldr	r2, [r3, #16]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc8:	b2d2      	uxtb	r2, r2
 8005bca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd0:	1c5a      	adds	r2, r3, #1
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	3b01      	subs	r3, #1
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f47f aeb6 	bne.w	8005966 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005c12:	2300      	movs	r3, #0
 8005c14:	e000      	b.n	8005c18 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005c16:	2302      	movs	r3, #2
  }
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3728      	adds	r7, #40	@ 0x28
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	00010004 	.word	0x00010004

08005c24 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b088      	sub	sp, #32
 8005c28:	af02      	add	r7, sp, #8
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	607a      	str	r2, [r7, #4]
 8005c2e:	603b      	str	r3, [r7, #0]
 8005c30:	460b      	mov	r3, r1
 8005c32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c38:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2b08      	cmp	r3, #8
 8005c3e:	d006      	beq.n	8005c4e <I2C_MasterRequestWrite+0x2a>
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d003      	beq.n	8005c4e <I2C_MasterRequestWrite+0x2a>
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005c4c:	d108      	bne.n	8005c60 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c5c:	601a      	str	r2, [r3, #0]
 8005c5e:	e00b      	b.n	8005c78 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c64:	2b12      	cmp	r3, #18
 8005c66:	d107      	bne.n	8005c78 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f000 f91d 	bl	8005ec4 <I2C_WaitOnFlagUntilTimeout>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00d      	beq.n	8005cac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c9e:	d103      	bne.n	8005ca8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ca6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e035      	b.n	8005d18 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005cb4:	d108      	bne.n	8005cc8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005cb6:	897b      	ldrh	r3, [r7, #10]
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	461a      	mov	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005cc4:	611a      	str	r2, [r3, #16]
 8005cc6:	e01b      	b.n	8005d00 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005cc8:	897b      	ldrh	r3, [r7, #10]
 8005cca:	11db      	asrs	r3, r3, #7
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	f003 0306 	and.w	r3, r3, #6
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	f063 030f 	orn	r3, r3, #15
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	490e      	ldr	r1, [pc, #56]	@ (8005d20 <I2C_MasterRequestWrite+0xfc>)
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 f966 	bl	8005fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e010      	b.n	8005d18 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005cf6:	897b      	ldrh	r3, [r7, #10]
 8005cf8:	b2da      	uxtb	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	4907      	ldr	r1, [pc, #28]	@ (8005d24 <I2C_MasterRequestWrite+0x100>)
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f000 f956 	bl	8005fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d001      	beq.n	8005d16 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e000      	b.n	8005d18 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3718      	adds	r7, #24
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	00010008 	.word	0x00010008
 8005d24:	00010002 	.word	0x00010002

08005d28 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b088      	sub	sp, #32
 8005d2c:	af02      	add	r7, sp, #8
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	607a      	str	r2, [r7, #4]
 8005d32:	603b      	str	r3, [r7, #0]
 8005d34:	460b      	mov	r3, r1
 8005d36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d3c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005d4c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	2b08      	cmp	r3, #8
 8005d52:	d006      	beq.n	8005d62 <I2C_MasterRequestRead+0x3a>
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d003      	beq.n	8005d62 <I2C_MasterRequestRead+0x3a>
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005d60:	d108      	bne.n	8005d74 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d70:	601a      	str	r2, [r3, #0]
 8005d72:	e00b      	b.n	8005d8c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d78:	2b11      	cmp	r3, #17
 8005d7a:	d107      	bne.n	8005d8c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	9300      	str	r3, [sp, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f000 f893 	bl	8005ec4 <I2C_WaitOnFlagUntilTimeout>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00d      	beq.n	8005dc0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005db2:	d103      	bne.n	8005dbc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e079      	b.n	8005eb4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005dc8:	d108      	bne.n	8005ddc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005dca:	897b      	ldrh	r3, [r7, #10]
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	f043 0301 	orr.w	r3, r3, #1
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	611a      	str	r2, [r3, #16]
 8005dda:	e05f      	b.n	8005e9c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ddc:	897b      	ldrh	r3, [r7, #10]
 8005dde:	11db      	asrs	r3, r3, #7
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	f003 0306 	and.w	r3, r3, #6
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	f063 030f 	orn	r3, r3, #15
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	4930      	ldr	r1, [pc, #192]	@ (8005ebc <I2C_MasterRequestRead+0x194>)
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f000 f8dc 	bl	8005fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e054      	b.n	8005eb4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005e0a:	897b      	ldrh	r3, [r7, #10]
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	4929      	ldr	r1, [pc, #164]	@ (8005ec0 <I2C_MasterRequestRead+0x198>)
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 f8cc 	bl	8005fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d001      	beq.n	8005e2a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e044      	b.n	8005eb4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	613b      	str	r3, [r7, #16]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	613b      	str	r3, [r7, #16]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	613b      	str	r3, [r7, #16]
 8005e3e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e4e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 f831 	bl	8005ec4 <I2C_WaitOnFlagUntilTimeout>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00d      	beq.n	8005e84 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e76:	d103      	bne.n	8005e80 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e7e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e017      	b.n	8005eb4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005e84:	897b      	ldrh	r3, [r7, #10]
 8005e86:	11db      	asrs	r3, r3, #7
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	f003 0306 	and.w	r3, r3, #6
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	f063 030e 	orn	r3, r3, #14
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	4907      	ldr	r1, [pc, #28]	@ (8005ec0 <I2C_MasterRequestRead+0x198>)
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	f000 f888 	bl	8005fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e000      	b.n	8005eb4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3718      	adds	r7, #24
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	00010008 	.word	0x00010008
 8005ec0:	00010002 	.word	0x00010002

08005ec4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	603b      	str	r3, [r7, #0]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ed4:	e048      	b.n	8005f68 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005edc:	d044      	beq.n	8005f68 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ede:	f7fc fa01 	bl	80022e4 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d302      	bcc.n	8005ef4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d139      	bne.n	8005f68 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	0c1b      	lsrs	r3, r3, #16
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d10d      	bne.n	8005f1a <I2C_WaitOnFlagUntilTimeout+0x56>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	695b      	ldr	r3, [r3, #20]
 8005f04:	43da      	mvns	r2, r3
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	4013      	ands	r3, r2
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	bf0c      	ite	eq
 8005f10:	2301      	moveq	r3, #1
 8005f12:	2300      	movne	r3, #0
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	461a      	mov	r2, r3
 8005f18:	e00c      	b.n	8005f34 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	43da      	mvns	r2, r3
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	4013      	ands	r3, r2
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	bf0c      	ite	eq
 8005f2c:	2301      	moveq	r3, #1
 8005f2e:	2300      	movne	r3, #0
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	461a      	mov	r2, r3
 8005f34:	79fb      	ldrb	r3, [r7, #7]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d116      	bne.n	8005f68 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2220      	movs	r2, #32
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f54:	f043 0220 	orr.w	r2, r3, #32
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e023      	b.n	8005fb0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	0c1b      	lsrs	r3, r3, #16
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d10d      	bne.n	8005f8e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	43da      	mvns	r2, r3
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	bf0c      	ite	eq
 8005f84:	2301      	moveq	r3, #1
 8005f86:	2300      	movne	r3, #0
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	e00c      	b.n	8005fa8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	43da      	mvns	r2, r3
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	4013      	ands	r3, r2
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	bf0c      	ite	eq
 8005fa0:	2301      	moveq	r3, #1
 8005fa2:	2300      	movne	r3, #0
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	79fb      	ldrb	r3, [r7, #7]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d093      	beq.n	8005ed6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
 8005fc4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005fc6:	e071      	b.n	80060ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fd6:	d123      	bne.n	8006020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fe6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005ff0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800600c:	f043 0204 	orr.w	r2, r3, #4
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e067      	b.n	80060f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006026:	d041      	beq.n	80060ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006028:	f7fc f95c 	bl	80022e4 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	429a      	cmp	r2, r3
 8006036:	d302      	bcc.n	800603e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d136      	bne.n	80060ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	0c1b      	lsrs	r3, r3, #16
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b01      	cmp	r3, #1
 8006046:	d10c      	bne.n	8006062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	43da      	mvns	r2, r3
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	4013      	ands	r3, r2
 8006054:	b29b      	uxth	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	bf14      	ite	ne
 800605a:	2301      	movne	r3, #1
 800605c:	2300      	moveq	r3, #0
 800605e:	b2db      	uxtb	r3, r3
 8006060:	e00b      	b.n	800607a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	699b      	ldr	r3, [r3, #24]
 8006068:	43da      	mvns	r2, r3
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	4013      	ands	r3, r2
 800606e:	b29b      	uxth	r3, r3
 8006070:	2b00      	cmp	r3, #0
 8006072:	bf14      	ite	ne
 8006074:	2301      	movne	r3, #1
 8006076:	2300      	moveq	r3, #0
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d016      	beq.n	80060ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2220      	movs	r2, #32
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006098:	f043 0220 	orr.w	r2, r3, #32
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e021      	b.n	80060f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	0c1b      	lsrs	r3, r3, #16
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d10c      	bne.n	80060d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	695b      	ldr	r3, [r3, #20]
 80060bc:	43da      	mvns	r2, r3
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	4013      	ands	r3, r2
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	bf14      	ite	ne
 80060c8:	2301      	movne	r3, #1
 80060ca:	2300      	moveq	r3, #0
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	e00b      	b.n	80060e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	43da      	mvns	r2, r3
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	4013      	ands	r3, r2
 80060dc:	b29b      	uxth	r3, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	bf14      	ite	ne
 80060e2:	2301      	movne	r3, #1
 80060e4:	2300      	moveq	r3, #0
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f47f af6d 	bne.w	8005fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006104:	e034      	b.n	8006170 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f000 f8e3 	bl	80062d2 <I2C_IsAcknowledgeFailed>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d001      	beq.n	8006116 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e034      	b.n	8006180 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611c:	d028      	beq.n	8006170 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800611e:	f7fc f8e1 	bl	80022e4 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	429a      	cmp	r2, r3
 800612c:	d302      	bcc.n	8006134 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d11d      	bne.n	8006170 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800613e:	2b80      	cmp	r3, #128	@ 0x80
 8006140:	d016      	beq.n	8006170 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2220      	movs	r2, #32
 800614c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800615c:	f043 0220 	orr.w	r2, r3, #32
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e007      	b.n	8006180 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800617a:	2b80      	cmp	r3, #128	@ 0x80
 800617c:	d1c3      	bne.n	8006106 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006194:	e034      	b.n	8006200 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f000 f89b 	bl	80062d2 <I2C_IsAcknowledgeFailed>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e034      	b.n	8006210 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ac:	d028      	beq.n	8006200 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ae:	f7fc f899 	bl	80022e4 <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d302      	bcc.n	80061c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d11d      	bne.n	8006200 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	f003 0304 	and.w	r3, r3, #4
 80061ce:	2b04      	cmp	r3, #4
 80061d0:	d016      	beq.n	8006200 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2220      	movs	r2, #32
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ec:	f043 0220 	orr.w	r2, r3, #32
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e007      	b.n	8006210 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	f003 0304 	and.w	r3, r3, #4
 800620a:	2b04      	cmp	r3, #4
 800620c:	d1c3      	bne.n	8006196 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006224:	e049      	b.n	80062ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	f003 0310 	and.w	r3, r3, #16
 8006230:	2b10      	cmp	r3, #16
 8006232:	d119      	bne.n	8006268 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f06f 0210 	mvn.w	r2, #16
 800623c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2220      	movs	r2, #32
 8006248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e030      	b.n	80062ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006268:	f7fc f83c 	bl	80022e4 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	429a      	cmp	r2, r3
 8006276:	d302      	bcc.n	800627e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d11d      	bne.n	80062ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006288:	2b40      	cmp	r3, #64	@ 0x40
 800628a:	d016      	beq.n	80062ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2220      	movs	r2, #32
 8006296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a6:	f043 0220 	orr.w	r2, r3, #32
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e007      	b.n	80062ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062c4:	2b40      	cmp	r3, #64	@ 0x40
 80062c6:	d1ae      	bne.n	8006226 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b083      	sub	sp, #12
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	695b      	ldr	r3, [r3, #20]
 80062e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062e8:	d11b      	bne.n	8006322 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80062f2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2220      	movs	r2, #32
 80062fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800630e:	f043 0204 	orr.w	r2, r3, #4
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e000      	b.n	8006324 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b088      	sub	sp, #32
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e128      	b.n	8006594 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d109      	bne.n	8006362 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a90      	ldr	r2, [pc, #576]	@ (800659c <HAL_I2S_Init+0x26c>)
 800635a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f7fb fc3f 	bl	8001be0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2202      	movs	r2, #2
 8006366:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	6812      	ldr	r2, [r2, #0]
 8006374:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006378:	f023 030f 	bic.w	r3, r3, #15
 800637c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2202      	movs	r2, #2
 8006384:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	2b02      	cmp	r3, #2
 800638c:	d060      	beq.n	8006450 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d102      	bne.n	800639c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006396:	2310      	movs	r3, #16
 8006398:	617b      	str	r3, [r7, #20]
 800639a:	e001      	b.n	80063a0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800639c:	2320      	movs	r3, #32
 800639e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	2b20      	cmp	r3, #32
 80063a6:	d802      	bhi.n	80063ae <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80063ae:	2001      	movs	r0, #1
 80063b0:	f001 fe00 	bl	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq>
 80063b4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063be:	d125      	bne.n	800640c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d010      	beq.n	80063ea <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80063d2:	4613      	mov	r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	005b      	lsls	r3, r3, #1
 80063da:	461a      	mov	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e4:	3305      	adds	r3, #5
 80063e6:	613b      	str	r3, [r7, #16]
 80063e8:	e01f      	b.n	800642a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	00db      	lsls	r3, r3, #3
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80063f4:	4613      	mov	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	005b      	lsls	r3, r3, #1
 80063fc:	461a      	mov	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	fbb2 f3f3 	udiv	r3, r2, r3
 8006406:	3305      	adds	r3, #5
 8006408:	613b      	str	r3, [r7, #16]
 800640a:	e00e      	b.n	800642a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	fbb2 f2f3 	udiv	r2, r2, r3
 8006414:	4613      	mov	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	005b      	lsls	r3, r3, #1
 800641c:	461a      	mov	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	fbb2 f3f3 	udiv	r3, r2, r3
 8006426:	3305      	adds	r3, #5
 8006428:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	4a5c      	ldr	r2, [pc, #368]	@ (80065a0 <HAL_I2S_Init+0x270>)
 800642e:	fba2 2303 	umull	r2, r3, r2, r3
 8006432:	08db      	lsrs	r3, r3, #3
 8006434:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	f003 0301 	and.w	r3, r3, #1
 800643c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	085b      	lsrs	r3, r3, #1
 8006446:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	021b      	lsls	r3, r3, #8
 800644c:	61bb      	str	r3, [r7, #24]
 800644e:	e003      	b.n	8006458 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006450:	2302      	movs	r3, #2
 8006452:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006454:	2300      	movs	r3, #0
 8006456:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d902      	bls.n	8006464 <HAL_I2S_Init+0x134>
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	2bff      	cmp	r3, #255	@ 0xff
 8006462:	d907      	bls.n	8006474 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006468:	f043 0210 	orr.w	r2, r3, #16
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e08f      	b.n	8006594 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	691a      	ldr	r2, [r3, #16]
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	ea42 0103 	orr.w	r1, r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	69fa      	ldr	r2, [r7, #28]
 8006484:	430a      	orrs	r2, r1
 8006486:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	69db      	ldr	r3, [r3, #28]
 800648e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006492:	f023 030f 	bic.w	r3, r3, #15
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	6851      	ldr	r1, [r2, #4]
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	6892      	ldr	r2, [r2, #8]
 800649e:	4311      	orrs	r1, r2
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	68d2      	ldr	r2, [r2, #12]
 80064a4:	4311      	orrs	r1, r2
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	6992      	ldr	r2, [r2, #24]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	431a      	orrs	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064b6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a1b      	ldr	r3, [r3, #32]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d161      	bne.n	8006584 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a38      	ldr	r2, [pc, #224]	@ (80065a4 <HAL_I2S_Init+0x274>)
 80064c4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a37      	ldr	r2, [pc, #220]	@ (80065a8 <HAL_I2S_Init+0x278>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d101      	bne.n	80064d4 <HAL_I2S_Init+0x1a4>
 80064d0:	4b36      	ldr	r3, [pc, #216]	@ (80065ac <HAL_I2S_Init+0x27c>)
 80064d2:	e001      	b.n	80064d8 <HAL_I2S_Init+0x1a8>
 80064d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80064d8:	69db      	ldr	r3, [r3, #28]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	6812      	ldr	r2, [r2, #0]
 80064de:	4932      	ldr	r1, [pc, #200]	@ (80065a8 <HAL_I2S_Init+0x278>)
 80064e0:	428a      	cmp	r2, r1
 80064e2:	d101      	bne.n	80064e8 <HAL_I2S_Init+0x1b8>
 80064e4:	4a31      	ldr	r2, [pc, #196]	@ (80065ac <HAL_I2S_Init+0x27c>)
 80064e6:	e001      	b.n	80064ec <HAL_I2S_Init+0x1bc>
 80064e8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80064ec:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80064f0:	f023 030f 	bic.w	r3, r3, #15
 80064f4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a2b      	ldr	r2, [pc, #172]	@ (80065a8 <HAL_I2S_Init+0x278>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d101      	bne.n	8006504 <HAL_I2S_Init+0x1d4>
 8006500:	4b2a      	ldr	r3, [pc, #168]	@ (80065ac <HAL_I2S_Init+0x27c>)
 8006502:	e001      	b.n	8006508 <HAL_I2S_Init+0x1d8>
 8006504:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006508:	2202      	movs	r2, #2
 800650a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a25      	ldr	r2, [pc, #148]	@ (80065a8 <HAL_I2S_Init+0x278>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d101      	bne.n	800651a <HAL_I2S_Init+0x1ea>
 8006516:	4b25      	ldr	r3, [pc, #148]	@ (80065ac <HAL_I2S_Init+0x27c>)
 8006518:	e001      	b.n	800651e <HAL_I2S_Init+0x1ee>
 800651a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800651e:	69db      	ldr	r3, [r3, #28]
 8006520:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800652a:	d003      	beq.n	8006534 <HAL_I2S_Init+0x204>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d103      	bne.n	800653c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006534:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006538:	613b      	str	r3, [r7, #16]
 800653a:	e001      	b.n	8006540 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800653c:	2300      	movs	r3, #0
 800653e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800654a:	4313      	orrs	r3, r2
 800654c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006554:	4313      	orrs	r3, r2
 8006556:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800655e:	4313      	orrs	r3, r2
 8006560:	b29a      	uxth	r2, r3
 8006562:	897b      	ldrh	r3, [r7, #10]
 8006564:	4313      	orrs	r3, r2
 8006566:	b29b      	uxth	r3, r3
 8006568:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800656c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a0d      	ldr	r2, [pc, #52]	@ (80065a8 <HAL_I2S_Init+0x278>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d101      	bne.n	800657c <HAL_I2S_Init+0x24c>
 8006578:	4b0c      	ldr	r3, [pc, #48]	@ (80065ac <HAL_I2S_Init+0x27c>)
 800657a:	e001      	b.n	8006580 <HAL_I2S_Init+0x250>
 800657c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006580:	897a      	ldrh	r2, [r7, #10]
 8006582:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3720      	adds	r7, #32
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	08006e2d 	.word	0x08006e2d
 80065a0:	cccccccd 	.word	0xcccccccd
 80065a4:	08006fb5 	.word	0x08006fb5
 80065a8:	40003800 	.word	0x40003800
 80065ac:	40003400 	.word	0x40003400

080065b0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	4613      	mov	r3, r2
 80065bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <HAL_I2S_Transmit_DMA+0x1a>
 80065c4:	88fb      	ldrh	r3, [r7, #6]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e08e      	b.n	80066ec <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d101      	bne.n	80065de <HAL_I2S_Transmit_DMA+0x2e>
 80065da:	2302      	movs	r3, #2
 80065dc:	e086      	b.n	80066ec <HAL_I2S_Transmit_DMA+0x13c>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d005      	beq.n	80065fe <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_BUSY;
 80065fa:	2302      	movs	r3, #2
 80065fc:	e076      	b.n	80066ec <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2203      	movs	r2, #3
 8006602:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	f003 0307 	and.w	r3, r3, #7
 800661c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	2b03      	cmp	r3, #3
 8006622:	d002      	beq.n	800662a <HAL_I2S_Transmit_DMA+0x7a>
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	2b05      	cmp	r3, #5
 8006628:	d10a      	bne.n	8006640 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 800662a:	88fb      	ldrh	r3, [r7, #6]
 800662c:	005b      	lsls	r3, r3, #1
 800662e:	b29a      	uxth	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8006634:	88fb      	ldrh	r3, [r7, #6]
 8006636:	005b      	lsls	r3, r3, #1
 8006638:	b29a      	uxth	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800663e:	e005      	b.n	800664c <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	88fa      	ldrh	r2, [r7, #6]
 8006644:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	88fa      	ldrh	r2, [r7, #6]
 800664a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006650:	4a28      	ldr	r2, [pc, #160]	@ (80066f4 <HAL_I2S_Transmit_DMA+0x144>)
 8006652:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006658:	4a27      	ldr	r2, [pc, #156]	@ (80066f8 <HAL_I2S_Transmit_DMA+0x148>)
 800665a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006660:	4a26      	ldr	r2, [pc, #152]	@ (80066fc <HAL_I2S_Transmit_DMA+0x14c>)
 8006662:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800666c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006674:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800667a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800667c:	f7fc f822 	bl	80026c4 <HAL_DMA_Start_IT>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00f      	beq.n	80066a6 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800668a:	f043 0208 	orr.w	r2, r3, #8
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e022      	b.n	80066ec <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	69db      	ldr	r3, [r3, #28]
 80066ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d107      	bne.n	80066c4 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	69da      	ldr	r2, [r3, #28]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80066c2:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f003 0302 	and.w	r3, r3, #2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d107      	bne.n	80066e2 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f042 0202 	orr.w	r2, r2, #2
 80066e0:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3718      	adds	r7, #24
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	08006d0b 	.word	0x08006d0b
 80066f8:	08006cc9 	.word	0x08006cc9
 80066fc:	08006d27 	.word	0x08006d27

08006700 <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b01      	cmp	r3, #1
 8006712:	d101      	bne.n	8006718 <HAL_I2S_DMAPause+0x18>
 8006714:	2302      	movs	r3, #2
 8006716:	e04a      	b.n	80067ae <HAL_I2S_DMAPause+0xae>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2b03      	cmp	r3, #3
 800672a:	d108      	bne.n	800673e <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f022 0202 	bic.w	r2, r2, #2
 800673a:	605a      	str	r2, [r3, #4]
 800673c:	e032      	b.n	80067a4 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b04      	cmp	r3, #4
 8006748:	d108      	bne.n	800675c <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f022 0201 	bic.w	r2, r2, #1
 8006758:	605a      	str	r2, [r3, #4]
 800675a:	e023      	b.n	80067a4 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006762:	b2db      	uxtb	r3, r3
 8006764:	2b05      	cmp	r3, #5
 8006766:	d11d      	bne.n	80067a4 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685a      	ldr	r2, [r3, #4]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f022 0203 	bic.w	r2, r2, #3
 8006776:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a0f      	ldr	r2, [pc, #60]	@ (80067bc <HAL_I2S_DMAPause+0xbc>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d101      	bne.n	8006786 <HAL_I2S_DMAPause+0x86>
 8006782:	4b0f      	ldr	r3, [pc, #60]	@ (80067c0 <HAL_I2S_DMAPause+0xc0>)
 8006784:	e001      	b.n	800678a <HAL_I2S_DMAPause+0x8a>
 8006786:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	490a      	ldr	r1, [pc, #40]	@ (80067bc <HAL_I2S_DMAPause+0xbc>)
 8006792:	428b      	cmp	r3, r1
 8006794:	d101      	bne.n	800679a <HAL_I2S_DMAPause+0x9a>
 8006796:	4b0a      	ldr	r3, [pc, #40]	@ (80067c0 <HAL_I2S_DMAPause+0xc0>)
 8006798:	e001      	b.n	800679e <HAL_I2S_DMAPause+0x9e>
 800679a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800679e:	f022 0203 	bic.w	r2, r2, #3
 80067a2:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	40003800 	.word	0x40003800
 80067c0:	40003400 	.word	0x40003400

080067c4 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d101      	bne.n	80067dc <HAL_I2S_DMAResume+0x18>
 80067d8:	2302      	movs	r3, #2
 80067da:	e07d      	b.n	80068d8 <HAL_I2S_DMAResume+0x114>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b03      	cmp	r3, #3
 80067ee:	d108      	bne.n	8006802 <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685a      	ldr	r2, [r3, #4]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f042 0202 	orr.w	r2, r2, #2
 80067fe:	605a      	str	r2, [r3, #4]
 8006800:	e056      	b.n	80068b0 <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b04      	cmp	r3, #4
 800680c:	d108      	bne.n	8006820 <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f042 0201 	orr.w	r2, r2, #1
 800681c:	605a      	str	r2, [r3, #4]
 800681e:	e047      	b.n	80068b0 <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b05      	cmp	r3, #5
 800682a:	d141      	bne.n	80068b0 <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f042 0203 	orr.w	r2, r2, #3
 800683a:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a28      	ldr	r2, [pc, #160]	@ (80068e4 <HAL_I2S_DMAResume+0x120>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d101      	bne.n	800684a <HAL_I2S_DMAResume+0x86>
 8006846:	4b28      	ldr	r3, [pc, #160]	@ (80068e8 <HAL_I2S_DMAResume+0x124>)
 8006848:	e001      	b.n	800684e <HAL_I2S_DMAResume+0x8a>
 800684a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4923      	ldr	r1, [pc, #140]	@ (80068e4 <HAL_I2S_DMAResume+0x120>)
 8006856:	428b      	cmp	r3, r1
 8006858:	d101      	bne.n	800685e <HAL_I2S_DMAResume+0x9a>
 800685a:	4b23      	ldr	r3, [pc, #140]	@ (80068e8 <HAL_I2S_DMAResume+0x124>)
 800685c:	e001      	b.n	8006862 <HAL_I2S_DMAResume+0x9e>
 800685e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006862:	f042 0203 	orr.w	r2, r2, #3
 8006866:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a1d      	ldr	r2, [pc, #116]	@ (80068e4 <HAL_I2S_DMAResume+0x120>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d101      	bne.n	8006876 <HAL_I2S_DMAResume+0xb2>
 8006872:	4b1d      	ldr	r3, [pc, #116]	@ (80068e8 <HAL_I2S_DMAResume+0x124>)
 8006874:	e001      	b.n	800687a <HAL_I2S_DMAResume+0xb6>
 8006876:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800687a:	69db      	ldr	r3, [r3, #28]
 800687c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006880:	2b00      	cmp	r3, #0
 8006882:	d115      	bne.n	80068b0 <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a16      	ldr	r2, [pc, #88]	@ (80068e4 <HAL_I2S_DMAResume+0x120>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d101      	bne.n	8006892 <HAL_I2S_DMAResume+0xce>
 800688e:	4b16      	ldr	r3, [pc, #88]	@ (80068e8 <HAL_I2S_DMAResume+0x124>)
 8006890:	e001      	b.n	8006896 <HAL_I2S_DMAResume+0xd2>
 8006892:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006896:	69da      	ldr	r2, [r3, #28]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4911      	ldr	r1, [pc, #68]	@ (80068e4 <HAL_I2S_DMAResume+0x120>)
 800689e:	428b      	cmp	r3, r1
 80068a0:	d101      	bne.n	80068a6 <HAL_I2S_DMAResume+0xe2>
 80068a2:	4b11      	ldr	r3, [pc, #68]	@ (80068e8 <HAL_I2S_DMAResume+0x124>)
 80068a4:	e001      	b.n	80068aa <HAL_I2S_DMAResume+0xe6>
 80068a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80068aa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80068ae:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d107      	bne.n	80068ce <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	69da      	ldr	r2, [r3, #28]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80068cc:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr
 80068e4:	40003800 	.word	0x40003800
 80068e8:	40003400 	.word	0x40003400

080068ec <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b088      	sub	sp, #32
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80068f4:	2300      	movs	r3, #0
 80068f6:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006900:	d004      	beq.n	800690c <HAL_I2S_DMAStop+0x20>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	f040 80d1 	bne.w	8006aae <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00f      	beq.n	8006934 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006918:	4618      	mov	r0, r3
 800691a:	f7fb ff2b 	bl	8002774 <HAL_DMA_Abort>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d007      	beq.n	8006934 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006928:	f043 0208 	orr.w	r2, r3, #8
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8006934:	2364      	movs	r3, #100	@ 0x64
 8006936:	2201      	movs	r2, #1
 8006938:	2102      	movs	r1, #2
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 fb00 	bl	8006f40 <I2S_WaitFlagStateUntilTimeout>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00b      	beq.n	800695e <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800694a:	f043 0201 	orr.w	r2, r3, #1
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800695e:	2364      	movs	r3, #100	@ 0x64
 8006960:	2200      	movs	r2, #0
 8006962:	2180      	movs	r1, #128	@ 0x80
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 faeb 	bl	8006f40 <I2S_WaitFlagStateUntilTimeout>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00b      	beq.n	8006988 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006974:	f043 0201 	orr.w	r2, r3, #1
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode   = HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	69da      	ldr	r2, [r3, #28]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006996:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006998:	2300      	movs	r3, #0
 800699a:	617b      	str	r3, [r7, #20]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	617b      	str	r3, [r7, #20]
 80069a4:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f022 0202 	bic.w	r2, r2, #2
 80069b4:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b05      	cmp	r3, #5
 80069c0:	f040 8165 	bne.w	8006c8e <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00f      	beq.n	80069ec <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fb fecf 	bl	8002774 <HAL_DMA_Abort>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d007      	beq.n	80069ec <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069e0:	f043 0208 	orr.w	r2, r3, #8
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a8a      	ldr	r2, [pc, #552]	@ (8006c1c <HAL_I2S_DMAStop+0x330>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d101      	bne.n	80069fa <HAL_I2S_DMAStop+0x10e>
 80069f6:	4b8a      	ldr	r3, [pc, #552]	@ (8006c20 <HAL_I2S_DMAStop+0x334>)
 80069f8:	e001      	b.n	80069fe <HAL_I2S_DMAStop+0x112>
 80069fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80069fe:	69da      	ldr	r2, [r3, #28]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4985      	ldr	r1, [pc, #532]	@ (8006c1c <HAL_I2S_DMAStop+0x330>)
 8006a06:	428b      	cmp	r3, r1
 8006a08:	d101      	bne.n	8006a0e <HAL_I2S_DMAStop+0x122>
 8006a0a:	4b85      	ldr	r3, [pc, #532]	@ (8006c20 <HAL_I2S_DMAStop+0x334>)
 8006a0c:	e001      	b.n	8006a12 <HAL_I2S_DMAStop+0x126>
 8006a0e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006a12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a16:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8006a18:	2300      	movs	r3, #0
 8006a1a:	613b      	str	r3, [r7, #16]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a7e      	ldr	r2, [pc, #504]	@ (8006c1c <HAL_I2S_DMAStop+0x330>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d101      	bne.n	8006a2a <HAL_I2S_DMAStop+0x13e>
 8006a26:	4b7e      	ldr	r3, [pc, #504]	@ (8006c20 <HAL_I2S_DMAStop+0x334>)
 8006a28:	e001      	b.n	8006a2e <HAL_I2S_DMAStop+0x142>
 8006a2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	613b      	str	r3, [r7, #16]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a79      	ldr	r2, [pc, #484]	@ (8006c1c <HAL_I2S_DMAStop+0x330>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d101      	bne.n	8006a40 <HAL_I2S_DMAStop+0x154>
 8006a3c:	4b78      	ldr	r3, [pc, #480]	@ (8006c20 <HAL_I2S_DMAStop+0x334>)
 8006a3e:	e001      	b.n	8006a44 <HAL_I2S_DMAStop+0x158>
 8006a40:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	613b      	str	r3, [r7, #16]
 8006a48:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a73      	ldr	r2, [pc, #460]	@ (8006c1c <HAL_I2S_DMAStop+0x330>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d101      	bne.n	8006a58 <HAL_I2S_DMAStop+0x16c>
 8006a54:	4b72      	ldr	r3, [pc, #456]	@ (8006c20 <HAL_I2S_DMAStop+0x334>)
 8006a56:	e001      	b.n	8006a5c <HAL_I2S_DMAStop+0x170>
 8006a58:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	496e      	ldr	r1, [pc, #440]	@ (8006c1c <HAL_I2S_DMAStop+0x330>)
 8006a64:	428b      	cmp	r3, r1
 8006a66:	d101      	bne.n	8006a6c <HAL_I2S_DMAStop+0x180>
 8006a68:	4b6d      	ldr	r3, [pc, #436]	@ (8006c20 <HAL_I2S_DMAStop+0x334>)
 8006a6a:	e001      	b.n	8006a70 <HAL_I2S_DMAStop+0x184>
 8006a6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006a70:	f022 0201 	bic.w	r2, r2, #1
 8006a74:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10c      	bne.n	8006a98 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a82:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        errorcode = HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006a96:	e0fa      	b.n	8006c8e <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a5f      	ldr	r2, [pc, #380]	@ (8006c1c <HAL_I2S_DMAStop+0x330>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d101      	bne.n	8006aa6 <HAL_I2S_DMAStop+0x1ba>
 8006aa2:	4b5f      	ldr	r3, [pc, #380]	@ (8006c20 <HAL_I2S_DMAStop+0x334>)
 8006aa4:	e001      	b.n	8006aaa <HAL_I2S_DMAStop+0x1be>
 8006aa6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006aaa:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006aac:	e0ef      	b.n	8006c8e <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ab6:	d005      	beq.n	8006ac4 <HAL_I2S_DMAStop+0x1d8>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ac0:	f040 80e5 	bne.w	8006c8e <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00f      	beq.n	8006aec <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7fb fe4f 	bl	8002774 <HAL_DMA_Abort>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d007      	beq.n	8006aec <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ae0:	f043 0208 	orr.w	r2, r3, #8
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	645a      	str	r2, [r3, #68]	@ 0x44
        errorcode = HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b05      	cmp	r3, #5
 8006af6:	f040 809a 	bne.w	8006c2e <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00f      	beq.n	8006b22 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7fb fe34 	bl	8002774 <HAL_DMA_Abort>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d007      	beq.n	8006b22 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b16:	f043 0208 	orr.w	r2, r3, #8
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	645a      	str	r2, [r3, #68]	@ 0x44
          errorcode = HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8006b22:	f7fb fbdf 	bl	80022e4 <HAL_GetTick>
 8006b26:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006b28:	e012      	b.n	8006b50 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8006b2a:	f7fb fbdb 	bl	80022e4 <HAL_GetTick>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	2b64      	cmp	r3, #100	@ 0x64
 8006b36:	d90b      	bls.n	8006b50 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b3c:	f043 0201 	orr.w	r2, r3, #1
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a31      	ldr	r2, [pc, #196]	@ (8006c1c <HAL_I2S_DMAStop+0x330>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d101      	bne.n	8006b5e <HAL_I2S_DMAStop+0x272>
 8006b5a:	4b31      	ldr	r3, [pc, #196]	@ (8006c20 <HAL_I2S_DMAStop+0x334>)
 8006b5c:	e001      	b.n	8006b62 <HAL_I2S_DMAStop+0x276>
 8006b5e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f003 0302 	and.w	r3, r3, #2
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d1de      	bne.n	8006b2a <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006b6c:	e012      	b.n	8006b94 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8006b6e:	f7fb fbb9 	bl	80022e4 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	2b64      	cmp	r3, #100	@ 0x64
 8006b7a:	d90b      	bls.n	8006b94 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b80:	f043 0201 	orr.w	r2, r3, #1
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          errorcode   = HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a20      	ldr	r2, [pc, #128]	@ (8006c1c <HAL_I2S_DMAStop+0x330>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d101      	bne.n	8006ba2 <HAL_I2S_DMAStop+0x2b6>
 8006b9e:	4b20      	ldr	r3, [pc, #128]	@ (8006c20 <HAL_I2S_DMAStop+0x334>)
 8006ba0:	e001      	b.n	8006ba6 <HAL_I2S_DMAStop+0x2ba>
 8006ba2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bac:	2b80      	cmp	r3, #128	@ 0x80
 8006bae:	d0de      	beq.n	8006b6e <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a19      	ldr	r2, [pc, #100]	@ (8006c1c <HAL_I2S_DMAStop+0x330>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d101      	bne.n	8006bbe <HAL_I2S_DMAStop+0x2d2>
 8006bba:	4b19      	ldr	r3, [pc, #100]	@ (8006c20 <HAL_I2S_DMAStop+0x334>)
 8006bbc:	e001      	b.n	8006bc2 <HAL_I2S_DMAStop+0x2d6>
 8006bbe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006bc2:	69da      	ldr	r2, [r3, #28]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4914      	ldr	r1, [pc, #80]	@ (8006c1c <HAL_I2S_DMAStop+0x330>)
 8006bca:	428b      	cmp	r3, r1
 8006bcc:	d101      	bne.n	8006bd2 <HAL_I2S_DMAStop+0x2e6>
 8006bce:	4b14      	ldr	r3, [pc, #80]	@ (8006c20 <HAL_I2S_DMAStop+0x334>)
 8006bd0:	e001      	b.n	8006bd6 <HAL_I2S_DMAStop+0x2ea>
 8006bd2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006bd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bda:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8006bdc:	2300      	movs	r3, #0
 8006bde:	60fb      	str	r3, [r7, #12]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a0d      	ldr	r2, [pc, #52]	@ (8006c1c <HAL_I2S_DMAStop+0x330>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d101      	bne.n	8006bee <HAL_I2S_DMAStop+0x302>
 8006bea:	4b0d      	ldr	r3, [pc, #52]	@ (8006c20 <HAL_I2S_DMAStop+0x334>)
 8006bec:	e001      	b.n	8006bf2 <HAL_I2S_DMAStop+0x306>
 8006bee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	60fb      	str	r3, [r7, #12]
 8006bf6:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a07      	ldr	r2, [pc, #28]	@ (8006c1c <HAL_I2S_DMAStop+0x330>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d101      	bne.n	8006c06 <HAL_I2S_DMAStop+0x31a>
 8006c02:	4b07      	ldr	r3, [pc, #28]	@ (8006c20 <HAL_I2S_DMAStop+0x334>)
 8006c04:	e001      	b.n	8006c0a <HAL_I2S_DMAStop+0x31e>
 8006c06:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4902      	ldr	r1, [pc, #8]	@ (8006c1c <HAL_I2S_DMAStop+0x330>)
 8006c12:	428b      	cmp	r3, r1
 8006c14:	d106      	bne.n	8006c24 <HAL_I2S_DMAStop+0x338>
 8006c16:	4b02      	ldr	r3, [pc, #8]	@ (8006c20 <HAL_I2S_DMAStop+0x334>)
 8006c18:	e006      	b.n	8006c28 <HAL_I2S_DMAStop+0x33c>
 8006c1a:	bf00      	nop
 8006c1c:	40003800 	.word	0x40003800
 8006c20:	40003400 	.word	0x40003400
 8006c24:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c28:	f022 0202 	bic.w	r2, r2, #2
 8006c2c:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	69da      	ldr	r2, [r3, #28]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c3c:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006c3e:	2300      	movs	r3, #0
 8006c40:	60bb      	str	r3, [r7, #8]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	60bb      	str	r3, [r7, #8]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	60bb      	str	r3, [r7, #8]
 8006c52:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f022 0201 	bic.w	r2, r2, #1
 8006c62:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c6c:	d10c      	bne.n	8006c88 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c72:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      errorcode = HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	77fb      	strb	r3, [r7, #31]
 8006c86:	e002      	b.n	8006c8e <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return errorcode;
 8006c96:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3720      	adds	r7, #32
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10e      	bne.n	8006cfc <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	685a      	ldr	r2, [r3, #4]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f022 0202 	bic.w	r2, r2, #2
 8006cec:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f7fa f95d 	bl	8000fbc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006d02:	bf00      	nop
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b084      	sub	sp, #16
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d16:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f7fa f961 	bl	8000fe0 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006d1e:	bf00      	nop
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b084      	sub	sp, #16
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d32:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	685a      	ldr	r2, [r3, #4]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f022 0203 	bic.w	r2, r2, #3
 8006d42:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d5c:	f043 0208 	orr.w	r2, r3, #8
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f7ff ffa5 	bl	8006cb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006d6a:	bf00      	nop
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b082      	sub	sp, #8
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d7e:	881a      	ldrh	r2, [r3, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d8a:	1c9a      	adds	r2, r3, #2
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	3b01      	subs	r3, #1
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10e      	bne.n	8006dc6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006db6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7fa f8fb 	bl	8000fbc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006dc6:	bf00      	nop
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b082      	sub	sp, #8
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68da      	ldr	r2, [r3, #12]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de0:	b292      	uxth	r2, r2
 8006de2:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de8:	1c9a      	adds	r2, r3, #2
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	3b01      	subs	r3, #1
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d10e      	bne.n	8006e24 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006e14:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f7ff ff3e 	bl	8006ca0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006e24:	bf00      	nop
 8006e26:	3708      	adds	r7, #8
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	2b04      	cmp	r3, #4
 8006e46:	d13a      	bne.n	8006ebe <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d109      	bne.n	8006e66 <I2S_IRQHandler+0x3a>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e5c:	2b40      	cmp	r3, #64	@ 0x40
 8006e5e:	d102      	bne.n	8006e66 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f7ff ffb4 	bl	8006dce <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e6c:	2b40      	cmp	r3, #64	@ 0x40
 8006e6e:	d126      	bne.n	8006ebe <I2S_IRQHandler+0x92>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f003 0320 	and.w	r3, r3, #32
 8006e7a:	2b20      	cmp	r3, #32
 8006e7c:	d11f      	bne.n	8006ebe <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	685a      	ldr	r2, [r3, #4]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006e8c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006e8e:	2300      	movs	r3, #0
 8006e90:	613b      	str	r3, [r7, #16]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	613b      	str	r3, [r7, #16]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	613b      	str	r3, [r7, #16]
 8006ea2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eb0:	f043 0202 	orr.w	r2, r3, #2
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f7ff fefb 	bl	8006cb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b03      	cmp	r3, #3
 8006ec8:	d136      	bne.n	8006f38 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f003 0302 	and.w	r3, r3, #2
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d109      	bne.n	8006ee8 <I2S_IRQHandler+0xbc>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ede:	2b80      	cmp	r3, #128	@ 0x80
 8006ee0:	d102      	bne.n	8006ee8 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f7ff ff45 	bl	8006d72 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	f003 0308 	and.w	r3, r3, #8
 8006eee:	2b08      	cmp	r3, #8
 8006ef0:	d122      	bne.n	8006f38 <I2S_IRQHandler+0x10c>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	f003 0320 	and.w	r3, r3, #32
 8006efc:	2b20      	cmp	r3, #32
 8006efe:	d11b      	bne.n	8006f38 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	685a      	ldr	r2, [r3, #4]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006f0e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006f10:	2300      	movs	r3, #0
 8006f12:	60fb      	str	r3, [r7, #12]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	60fb      	str	r3, [r7, #12]
 8006f1c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f2a:	f043 0204 	orr.w	r2, r3, #4
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7ff febe 	bl	8006cb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006f38:	bf00      	nop
 8006f3a:	3718      	adds	r7, #24
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	603b      	str	r3, [r7, #0]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f50:	f7fb f9c8 	bl	80022e4 <HAL_GetTick>
 8006f54:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006f56:	e018      	b.n	8006f8a <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f5e:	d014      	beq.n	8006f8a <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8006f60:	f7fb f9c0 	bl	80022e4 <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d902      	bls.n	8006f76 <I2S_WaitFlagStateUntilTimeout+0x36>
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d109      	bne.n	8006f8a <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e00f      	b.n	8006faa <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	689a      	ldr	r2, [r3, #8]
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	4013      	ands	r3, r2
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	bf0c      	ite	eq
 8006f9a:	2301      	moveq	r3, #1
 8006f9c:	2300      	movne	r3, #0
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	79fb      	ldrb	r3, [r7, #7]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d1d7      	bne.n	8006f58 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3718      	adds	r7, #24
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
	...

08006fb4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b088      	sub	sp, #32
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a92      	ldr	r2, [pc, #584]	@ (8007214 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d101      	bne.n	8006fd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006fce:	4b92      	ldr	r3, [pc, #584]	@ (8007218 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006fd0:	e001      	b.n	8006fd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006fd2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a8b      	ldr	r2, [pc, #556]	@ (8007214 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d101      	bne.n	8006ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006fec:	4b8a      	ldr	r3, [pc, #552]	@ (8007218 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006fee:	e001      	b.n	8006ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006ff0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007000:	d004      	beq.n	800700c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	f040 8099 	bne.w	800713e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	f003 0302 	and.w	r3, r3, #2
 8007012:	2b02      	cmp	r3, #2
 8007014:	d107      	bne.n	8007026 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800701c:	2b00      	cmp	r3, #0
 800701e:	d002      	beq.n	8007026 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 f925 	bl	8007270 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	2b01      	cmp	r3, #1
 800702e:	d107      	bne.n	8007040 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007036:	2b00      	cmp	r3, #0
 8007038:	d002      	beq.n	8007040 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f9c8 	bl	80073d0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007046:	2b40      	cmp	r3, #64	@ 0x40
 8007048:	d13a      	bne.n	80070c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	f003 0320 	and.w	r3, r3, #32
 8007050:	2b00      	cmp	r3, #0
 8007052:	d035      	beq.n	80070c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a6e      	ldr	r2, [pc, #440]	@ (8007214 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d101      	bne.n	8007062 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800705e:	4b6e      	ldr	r3, [pc, #440]	@ (8007218 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007060:	e001      	b.n	8007066 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8007062:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4969      	ldr	r1, [pc, #420]	@ (8007214 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800706e:	428b      	cmp	r3, r1
 8007070:	d101      	bne.n	8007076 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8007072:	4b69      	ldr	r3, [pc, #420]	@ (8007218 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007074:	e001      	b.n	800707a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8007076:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800707a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800707e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	685a      	ldr	r2, [r3, #4]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800708e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007090:	2300      	movs	r3, #0
 8007092:	60fb      	str	r3, [r7, #12]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	60fb      	str	r3, [r7, #12]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	60fb      	str	r3, [r7, #12]
 80070a4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070b2:	f043 0202 	orr.w	r2, r3, #2
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f7ff fdfa 	bl	8006cb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	f003 0308 	and.w	r3, r3, #8
 80070c6:	2b08      	cmp	r3, #8
 80070c8:	f040 80c3 	bne.w	8007252 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	f003 0320 	and.w	r3, r3, #32
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f000 80bd 	beq.w	8007252 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	685a      	ldr	r2, [r3, #4]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80070e6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a49      	ldr	r2, [pc, #292]	@ (8007214 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d101      	bne.n	80070f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80070f2:	4b49      	ldr	r3, [pc, #292]	@ (8007218 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80070f4:	e001      	b.n	80070fa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80070f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80070fa:	685a      	ldr	r2, [r3, #4]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4944      	ldr	r1, [pc, #272]	@ (8007214 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007102:	428b      	cmp	r3, r1
 8007104:	d101      	bne.n	800710a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8007106:	4b44      	ldr	r3, [pc, #272]	@ (8007218 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007108:	e001      	b.n	800710e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800710a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800710e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007112:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007114:	2300      	movs	r3, #0
 8007116:	60bb      	str	r3, [r7, #8]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	60bb      	str	r3, [r7, #8]
 8007120:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800712e:	f043 0204 	orr.w	r2, r3, #4
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7ff fdbc 	bl	8006cb4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800713c:	e089      	b.n	8007252 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	f003 0302 	and.w	r3, r3, #2
 8007144:	2b02      	cmp	r3, #2
 8007146:	d107      	bne.n	8007158 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800714e:	2b00      	cmp	r3, #0
 8007150:	d002      	beq.n	8007158 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f8be 	bl	80072d4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	2b01      	cmp	r3, #1
 8007160:	d107      	bne.n	8007172 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007168:	2b00      	cmp	r3, #0
 800716a:	d002      	beq.n	8007172 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f8fd 	bl	800736c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007178:	2b40      	cmp	r3, #64	@ 0x40
 800717a:	d12f      	bne.n	80071dc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f003 0320 	and.w	r3, r3, #32
 8007182:	2b00      	cmp	r3, #0
 8007184:	d02a      	beq.n	80071dc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007194:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a1e      	ldr	r2, [pc, #120]	@ (8007214 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d101      	bne.n	80071a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80071a0:	4b1d      	ldr	r3, [pc, #116]	@ (8007218 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80071a2:	e001      	b.n	80071a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80071a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80071a8:	685a      	ldr	r2, [r3, #4]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4919      	ldr	r1, [pc, #100]	@ (8007214 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80071b0:	428b      	cmp	r3, r1
 80071b2:	d101      	bne.n	80071b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80071b4:	4b18      	ldr	r3, [pc, #96]	@ (8007218 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80071b6:	e001      	b.n	80071bc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80071b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80071bc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80071c0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ce:	f043 0202 	orr.w	r2, r3, #2
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f7ff fd6c 	bl	8006cb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	f003 0308 	and.w	r3, r3, #8
 80071e2:	2b08      	cmp	r3, #8
 80071e4:	d136      	bne.n	8007254 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	f003 0320 	and.w	r3, r3, #32
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d031      	beq.n	8007254 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a07      	ldr	r2, [pc, #28]	@ (8007214 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d101      	bne.n	80071fe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80071fa:	4b07      	ldr	r3, [pc, #28]	@ (8007218 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80071fc:	e001      	b.n	8007202 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80071fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4902      	ldr	r1, [pc, #8]	@ (8007214 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800720a:	428b      	cmp	r3, r1
 800720c:	d106      	bne.n	800721c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800720e:	4b02      	ldr	r3, [pc, #8]	@ (8007218 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007210:	e006      	b.n	8007220 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8007212:	bf00      	nop
 8007214:	40003800 	.word	0x40003800
 8007218:	40003400 	.word	0x40003400
 800721c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007220:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007224:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	685a      	ldr	r2, [r3, #4]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007234:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007242:	f043 0204 	orr.w	r2, r3, #4
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7ff fd32 	bl	8006cb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007250:	e000      	b.n	8007254 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007252:	bf00      	nop
}
 8007254:	bf00      	nop
 8007256:	3720      	adds	r7, #32
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800727c:	1c99      	adds	r1, r3, #2
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	6251      	str	r1, [r2, #36]	@ 0x24
 8007282:	881a      	ldrh	r2, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800728e:	b29b      	uxth	r3, r3
 8007290:	3b01      	subs	r3, #1
 8007292:	b29a      	uxth	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800729c:	b29b      	uxth	r3, r3
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d113      	bne.n	80072ca <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	685a      	ldr	r2, [r3, #4]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80072b0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d106      	bne.n	80072ca <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f7ff ffc9 	bl	800725c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80072ca:	bf00      	nop
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
	...

080072d4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e0:	1c99      	adds	r1, r3, #2
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	6251      	str	r1, [r2, #36]	@ 0x24
 80072e6:	8819      	ldrh	r1, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a1d      	ldr	r2, [pc, #116]	@ (8007364 <I2SEx_TxISR_I2SExt+0x90>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d101      	bne.n	80072f6 <I2SEx_TxISR_I2SExt+0x22>
 80072f2:	4b1d      	ldr	r3, [pc, #116]	@ (8007368 <I2SEx_TxISR_I2SExt+0x94>)
 80072f4:	e001      	b.n	80072fa <I2SEx_TxISR_I2SExt+0x26>
 80072f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80072fa:	460a      	mov	r2, r1
 80072fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007302:	b29b      	uxth	r3, r3
 8007304:	3b01      	subs	r3, #1
 8007306:	b29a      	uxth	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007310:	b29b      	uxth	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d121      	bne.n	800735a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a12      	ldr	r2, [pc, #72]	@ (8007364 <I2SEx_TxISR_I2SExt+0x90>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d101      	bne.n	8007324 <I2SEx_TxISR_I2SExt+0x50>
 8007320:	4b11      	ldr	r3, [pc, #68]	@ (8007368 <I2SEx_TxISR_I2SExt+0x94>)
 8007322:	e001      	b.n	8007328 <I2SEx_TxISR_I2SExt+0x54>
 8007324:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007328:	685a      	ldr	r2, [r3, #4]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	490d      	ldr	r1, [pc, #52]	@ (8007364 <I2SEx_TxISR_I2SExt+0x90>)
 8007330:	428b      	cmp	r3, r1
 8007332:	d101      	bne.n	8007338 <I2SEx_TxISR_I2SExt+0x64>
 8007334:	4b0c      	ldr	r3, [pc, #48]	@ (8007368 <I2SEx_TxISR_I2SExt+0x94>)
 8007336:	e001      	b.n	800733c <I2SEx_TxISR_I2SExt+0x68>
 8007338:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800733c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007340:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007346:	b29b      	uxth	r3, r3
 8007348:	2b00      	cmp	r3, #0
 800734a:	d106      	bne.n	800735a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f7ff ff81 	bl	800725c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800735a:	bf00      	nop
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	40003800 	.word	0x40003800
 8007368:	40003400 	.word	0x40003400

0800736c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68d8      	ldr	r0, [r3, #12]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800737e:	1c99      	adds	r1, r3, #2
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8007384:	b282      	uxth	r2, r0
 8007386:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800738c:	b29b      	uxth	r3, r3
 800738e:	3b01      	subs	r3, #1
 8007390:	b29a      	uxth	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800739a:	b29b      	uxth	r3, r3
 800739c:	2b00      	cmp	r3, #0
 800739e:	d113      	bne.n	80073c8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	685a      	ldr	r2, [r3, #4]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80073ae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d106      	bne.n	80073c8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2201      	movs	r2, #1
 80073be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f7ff ff4a 	bl	800725c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80073c8:	bf00      	nop
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a20      	ldr	r2, [pc, #128]	@ (8007460 <I2SEx_RxISR_I2SExt+0x90>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d101      	bne.n	80073e6 <I2SEx_RxISR_I2SExt+0x16>
 80073e2:	4b20      	ldr	r3, [pc, #128]	@ (8007464 <I2SEx_RxISR_I2SExt+0x94>)
 80073e4:	e001      	b.n	80073ea <I2SEx_RxISR_I2SExt+0x1a>
 80073e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80073ea:	68d8      	ldr	r0, [r3, #12]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f0:	1c99      	adds	r1, r3, #2
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80073f6:	b282      	uxth	r2, r0
 80073f8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80073fe:	b29b      	uxth	r3, r3
 8007400:	3b01      	subs	r3, #1
 8007402:	b29a      	uxth	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800740c:	b29b      	uxth	r3, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d121      	bne.n	8007456 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a12      	ldr	r2, [pc, #72]	@ (8007460 <I2SEx_RxISR_I2SExt+0x90>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d101      	bne.n	8007420 <I2SEx_RxISR_I2SExt+0x50>
 800741c:	4b11      	ldr	r3, [pc, #68]	@ (8007464 <I2SEx_RxISR_I2SExt+0x94>)
 800741e:	e001      	b.n	8007424 <I2SEx_RxISR_I2SExt+0x54>
 8007420:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007424:	685a      	ldr	r2, [r3, #4]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	490d      	ldr	r1, [pc, #52]	@ (8007460 <I2SEx_RxISR_I2SExt+0x90>)
 800742c:	428b      	cmp	r3, r1
 800742e:	d101      	bne.n	8007434 <I2SEx_RxISR_I2SExt+0x64>
 8007430:	4b0c      	ldr	r3, [pc, #48]	@ (8007464 <I2SEx_RxISR_I2SExt+0x94>)
 8007432:	e001      	b.n	8007438 <I2SEx_RxISR_I2SExt+0x68>
 8007434:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007438:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800743c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007442:	b29b      	uxth	r3, r3
 8007444:	2b00      	cmp	r3, #0
 8007446:	d106      	bne.n	8007456 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f7ff ff03 	bl	800725c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007456:	bf00      	nop
 8007458:	3708      	adds	r7, #8
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	40003800 	.word	0x40003800
 8007464:	40003400 	.word	0x40003400

08007468 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e267      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0301 	and.w	r3, r3, #1
 8007482:	2b00      	cmp	r3, #0
 8007484:	d075      	beq.n	8007572 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007486:	4b88      	ldr	r3, [pc, #544]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	f003 030c 	and.w	r3, r3, #12
 800748e:	2b04      	cmp	r3, #4
 8007490:	d00c      	beq.n	80074ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007492:	4b85      	ldr	r3, [pc, #532]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800749a:	2b08      	cmp	r3, #8
 800749c:	d112      	bne.n	80074c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800749e:	4b82      	ldr	r3, [pc, #520]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80074aa:	d10b      	bne.n	80074c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074ac:	4b7e      	ldr	r3, [pc, #504]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d05b      	beq.n	8007570 <HAL_RCC_OscConfig+0x108>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d157      	bne.n	8007570 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e242      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074cc:	d106      	bne.n	80074dc <HAL_RCC_OscConfig+0x74>
 80074ce:	4b76      	ldr	r3, [pc, #472]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a75      	ldr	r2, [pc, #468]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 80074d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074d8:	6013      	str	r3, [r2, #0]
 80074da:	e01d      	b.n	8007518 <HAL_RCC_OscConfig+0xb0>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074e4:	d10c      	bne.n	8007500 <HAL_RCC_OscConfig+0x98>
 80074e6:	4b70      	ldr	r3, [pc, #448]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a6f      	ldr	r2, [pc, #444]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 80074ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80074f0:	6013      	str	r3, [r2, #0]
 80074f2:	4b6d      	ldr	r3, [pc, #436]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a6c      	ldr	r2, [pc, #432]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 80074f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074fc:	6013      	str	r3, [r2, #0]
 80074fe:	e00b      	b.n	8007518 <HAL_RCC_OscConfig+0xb0>
 8007500:	4b69      	ldr	r3, [pc, #420]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a68      	ldr	r2, [pc, #416]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 8007506:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800750a:	6013      	str	r3, [r2, #0]
 800750c:	4b66      	ldr	r3, [pc, #408]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a65      	ldr	r2, [pc, #404]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 8007512:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d013      	beq.n	8007548 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007520:	f7fa fee0 	bl	80022e4 <HAL_GetTick>
 8007524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007526:	e008      	b.n	800753a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007528:	f7fa fedc 	bl	80022e4 <HAL_GetTick>
 800752c:	4602      	mov	r2, r0
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	2b64      	cmp	r3, #100	@ 0x64
 8007534:	d901      	bls.n	800753a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e207      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800753a:	4b5b      	ldr	r3, [pc, #364]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d0f0      	beq.n	8007528 <HAL_RCC_OscConfig+0xc0>
 8007546:	e014      	b.n	8007572 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007548:	f7fa fecc 	bl	80022e4 <HAL_GetTick>
 800754c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800754e:	e008      	b.n	8007562 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007550:	f7fa fec8 	bl	80022e4 <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	2b64      	cmp	r3, #100	@ 0x64
 800755c:	d901      	bls.n	8007562 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e1f3      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007562:	4b51      	ldr	r3, [pc, #324]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1f0      	bne.n	8007550 <HAL_RCC_OscConfig+0xe8>
 800756e:	e000      	b.n	8007572 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 0302 	and.w	r3, r3, #2
 800757a:	2b00      	cmp	r3, #0
 800757c:	d063      	beq.n	8007646 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800757e:	4b4a      	ldr	r3, [pc, #296]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f003 030c 	and.w	r3, r3, #12
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00b      	beq.n	80075a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800758a:	4b47      	ldr	r3, [pc, #284]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007592:	2b08      	cmp	r3, #8
 8007594:	d11c      	bne.n	80075d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007596:	4b44      	ldr	r3, [pc, #272]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d116      	bne.n	80075d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075a2:	4b41      	ldr	r3, [pc, #260]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0302 	and.w	r3, r3, #2
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d005      	beq.n	80075ba <HAL_RCC_OscConfig+0x152>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d001      	beq.n	80075ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e1c7      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075ba:	4b3b      	ldr	r3, [pc, #236]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	00db      	lsls	r3, r3, #3
 80075c8:	4937      	ldr	r1, [pc, #220]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 80075ca:	4313      	orrs	r3, r2
 80075cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075ce:	e03a      	b.n	8007646 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d020      	beq.n	800761a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80075d8:	4b34      	ldr	r3, [pc, #208]	@ (80076ac <HAL_RCC_OscConfig+0x244>)
 80075da:	2201      	movs	r2, #1
 80075dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075de:	f7fa fe81 	bl	80022e4 <HAL_GetTick>
 80075e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075e4:	e008      	b.n	80075f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80075e6:	f7fa fe7d 	bl	80022e4 <HAL_GetTick>
 80075ea:	4602      	mov	r2, r0
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	1ad3      	subs	r3, r2, r3
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d901      	bls.n	80075f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e1a8      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075f8:	4b2b      	ldr	r3, [pc, #172]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0302 	and.w	r3, r3, #2
 8007600:	2b00      	cmp	r3, #0
 8007602:	d0f0      	beq.n	80075e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007604:	4b28      	ldr	r3, [pc, #160]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	00db      	lsls	r3, r3, #3
 8007612:	4925      	ldr	r1, [pc, #148]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 8007614:	4313      	orrs	r3, r2
 8007616:	600b      	str	r3, [r1, #0]
 8007618:	e015      	b.n	8007646 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800761a:	4b24      	ldr	r3, [pc, #144]	@ (80076ac <HAL_RCC_OscConfig+0x244>)
 800761c:	2200      	movs	r2, #0
 800761e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007620:	f7fa fe60 	bl	80022e4 <HAL_GetTick>
 8007624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007626:	e008      	b.n	800763a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007628:	f7fa fe5c 	bl	80022e4 <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	2b02      	cmp	r3, #2
 8007634:	d901      	bls.n	800763a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e187      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800763a:	4b1b      	ldr	r3, [pc, #108]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0302 	and.w	r3, r3, #2
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1f0      	bne.n	8007628 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 0308 	and.w	r3, r3, #8
 800764e:	2b00      	cmp	r3, #0
 8007650:	d036      	beq.n	80076c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d016      	beq.n	8007688 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800765a:	4b15      	ldr	r3, [pc, #84]	@ (80076b0 <HAL_RCC_OscConfig+0x248>)
 800765c:	2201      	movs	r2, #1
 800765e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007660:	f7fa fe40 	bl	80022e4 <HAL_GetTick>
 8007664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007666:	e008      	b.n	800767a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007668:	f7fa fe3c 	bl	80022e4 <HAL_GetTick>
 800766c:	4602      	mov	r2, r0
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	2b02      	cmp	r3, #2
 8007674:	d901      	bls.n	800767a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	e167      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800767a:	4b0b      	ldr	r3, [pc, #44]	@ (80076a8 <HAL_RCC_OscConfig+0x240>)
 800767c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800767e:	f003 0302 	and.w	r3, r3, #2
 8007682:	2b00      	cmp	r3, #0
 8007684:	d0f0      	beq.n	8007668 <HAL_RCC_OscConfig+0x200>
 8007686:	e01b      	b.n	80076c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007688:	4b09      	ldr	r3, [pc, #36]	@ (80076b0 <HAL_RCC_OscConfig+0x248>)
 800768a:	2200      	movs	r2, #0
 800768c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800768e:	f7fa fe29 	bl	80022e4 <HAL_GetTick>
 8007692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007694:	e00e      	b.n	80076b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007696:	f7fa fe25 	bl	80022e4 <HAL_GetTick>
 800769a:	4602      	mov	r2, r0
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d907      	bls.n	80076b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e150      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
 80076a8:	40023800 	.word	0x40023800
 80076ac:	42470000 	.word	0x42470000
 80076b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076b4:	4b88      	ldr	r3, [pc, #544]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 80076b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076b8:	f003 0302 	and.w	r3, r3, #2
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1ea      	bne.n	8007696 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 0304 	and.w	r3, r3, #4
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f000 8097 	beq.w	80077fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076ce:	2300      	movs	r3, #0
 80076d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076d2:	4b81      	ldr	r3, [pc, #516]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 80076d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10f      	bne.n	80076fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076de:	2300      	movs	r3, #0
 80076e0:	60bb      	str	r3, [r7, #8]
 80076e2:	4b7d      	ldr	r3, [pc, #500]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 80076e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076e6:	4a7c      	ldr	r2, [pc, #496]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 80076e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80076ee:	4b7a      	ldr	r3, [pc, #488]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 80076f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076f6:	60bb      	str	r3, [r7, #8]
 80076f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076fa:	2301      	movs	r3, #1
 80076fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076fe:	4b77      	ldr	r3, [pc, #476]	@ (80078dc <HAL_RCC_OscConfig+0x474>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007706:	2b00      	cmp	r3, #0
 8007708:	d118      	bne.n	800773c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800770a:	4b74      	ldr	r3, [pc, #464]	@ (80078dc <HAL_RCC_OscConfig+0x474>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a73      	ldr	r2, [pc, #460]	@ (80078dc <HAL_RCC_OscConfig+0x474>)
 8007710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007716:	f7fa fde5 	bl	80022e4 <HAL_GetTick>
 800771a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800771c:	e008      	b.n	8007730 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800771e:	f7fa fde1 	bl	80022e4 <HAL_GetTick>
 8007722:	4602      	mov	r2, r0
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	2b02      	cmp	r3, #2
 800772a:	d901      	bls.n	8007730 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800772c:	2303      	movs	r3, #3
 800772e:	e10c      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007730:	4b6a      	ldr	r3, [pc, #424]	@ (80078dc <HAL_RCC_OscConfig+0x474>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007738:	2b00      	cmp	r3, #0
 800773a:	d0f0      	beq.n	800771e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d106      	bne.n	8007752 <HAL_RCC_OscConfig+0x2ea>
 8007744:	4b64      	ldr	r3, [pc, #400]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 8007746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007748:	4a63      	ldr	r2, [pc, #396]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 800774a:	f043 0301 	orr.w	r3, r3, #1
 800774e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007750:	e01c      	b.n	800778c <HAL_RCC_OscConfig+0x324>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	2b05      	cmp	r3, #5
 8007758:	d10c      	bne.n	8007774 <HAL_RCC_OscConfig+0x30c>
 800775a:	4b5f      	ldr	r3, [pc, #380]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 800775c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800775e:	4a5e      	ldr	r2, [pc, #376]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 8007760:	f043 0304 	orr.w	r3, r3, #4
 8007764:	6713      	str	r3, [r2, #112]	@ 0x70
 8007766:	4b5c      	ldr	r3, [pc, #368]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 8007768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800776a:	4a5b      	ldr	r2, [pc, #364]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 800776c:	f043 0301 	orr.w	r3, r3, #1
 8007770:	6713      	str	r3, [r2, #112]	@ 0x70
 8007772:	e00b      	b.n	800778c <HAL_RCC_OscConfig+0x324>
 8007774:	4b58      	ldr	r3, [pc, #352]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 8007776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007778:	4a57      	ldr	r2, [pc, #348]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 800777a:	f023 0301 	bic.w	r3, r3, #1
 800777e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007780:	4b55      	ldr	r3, [pc, #340]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 8007782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007784:	4a54      	ldr	r2, [pc, #336]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 8007786:	f023 0304 	bic.w	r3, r3, #4
 800778a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d015      	beq.n	80077c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007794:	f7fa fda6 	bl	80022e4 <HAL_GetTick>
 8007798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800779a:	e00a      	b.n	80077b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800779c:	f7fa fda2 	bl	80022e4 <HAL_GetTick>
 80077a0:	4602      	mov	r2, r0
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	1ad3      	subs	r3, r2, r3
 80077a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d901      	bls.n	80077b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e0cb      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077b2:	4b49      	ldr	r3, [pc, #292]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 80077b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077b6:	f003 0302 	and.w	r3, r3, #2
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d0ee      	beq.n	800779c <HAL_RCC_OscConfig+0x334>
 80077be:	e014      	b.n	80077ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077c0:	f7fa fd90 	bl	80022e4 <HAL_GetTick>
 80077c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077c6:	e00a      	b.n	80077de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077c8:	f7fa fd8c 	bl	80022e4 <HAL_GetTick>
 80077cc:	4602      	mov	r2, r0
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d901      	bls.n	80077de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e0b5      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077de:	4b3e      	ldr	r3, [pc, #248]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 80077e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077e2:	f003 0302 	and.w	r3, r3, #2
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1ee      	bne.n	80077c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80077ea:	7dfb      	ldrb	r3, [r7, #23]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d105      	bne.n	80077fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077f0:	4b39      	ldr	r3, [pc, #228]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 80077f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077f4:	4a38      	ldr	r2, [pc, #224]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 80077f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	2b00      	cmp	r3, #0
 8007802:	f000 80a1 	beq.w	8007948 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007806:	4b34      	ldr	r3, [pc, #208]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f003 030c 	and.w	r3, r3, #12
 800780e:	2b08      	cmp	r3, #8
 8007810:	d05c      	beq.n	80078cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	699b      	ldr	r3, [r3, #24]
 8007816:	2b02      	cmp	r3, #2
 8007818:	d141      	bne.n	800789e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800781a:	4b31      	ldr	r3, [pc, #196]	@ (80078e0 <HAL_RCC_OscConfig+0x478>)
 800781c:	2200      	movs	r2, #0
 800781e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007820:	f7fa fd60 	bl	80022e4 <HAL_GetTick>
 8007824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007826:	e008      	b.n	800783a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007828:	f7fa fd5c 	bl	80022e4 <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	2b02      	cmp	r3, #2
 8007834:	d901      	bls.n	800783a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e087      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800783a:	4b27      	ldr	r3, [pc, #156]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1f0      	bne.n	8007828 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	69da      	ldr	r2, [r3, #28]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	431a      	orrs	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007854:	019b      	lsls	r3, r3, #6
 8007856:	431a      	orrs	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800785c:	085b      	lsrs	r3, r3, #1
 800785e:	3b01      	subs	r3, #1
 8007860:	041b      	lsls	r3, r3, #16
 8007862:	431a      	orrs	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007868:	061b      	lsls	r3, r3, #24
 800786a:	491b      	ldr	r1, [pc, #108]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 800786c:	4313      	orrs	r3, r2
 800786e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007870:	4b1b      	ldr	r3, [pc, #108]	@ (80078e0 <HAL_RCC_OscConfig+0x478>)
 8007872:	2201      	movs	r2, #1
 8007874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007876:	f7fa fd35 	bl	80022e4 <HAL_GetTick>
 800787a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800787c:	e008      	b.n	8007890 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800787e:	f7fa fd31 	bl	80022e4 <HAL_GetTick>
 8007882:	4602      	mov	r2, r0
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	1ad3      	subs	r3, r2, r3
 8007888:	2b02      	cmp	r3, #2
 800788a:	d901      	bls.n	8007890 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	e05c      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007890:	4b11      	ldr	r3, [pc, #68]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007898:	2b00      	cmp	r3, #0
 800789a:	d0f0      	beq.n	800787e <HAL_RCC_OscConfig+0x416>
 800789c:	e054      	b.n	8007948 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800789e:	4b10      	ldr	r3, [pc, #64]	@ (80078e0 <HAL_RCC_OscConfig+0x478>)
 80078a0:	2200      	movs	r2, #0
 80078a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078a4:	f7fa fd1e 	bl	80022e4 <HAL_GetTick>
 80078a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078aa:	e008      	b.n	80078be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078ac:	f7fa fd1a 	bl	80022e4 <HAL_GetTick>
 80078b0:	4602      	mov	r2, r0
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d901      	bls.n	80078be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80078ba:	2303      	movs	r3, #3
 80078bc:	e045      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078be:	4b06      	ldr	r3, [pc, #24]	@ (80078d8 <HAL_RCC_OscConfig+0x470>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1f0      	bne.n	80078ac <HAL_RCC_OscConfig+0x444>
 80078ca:	e03d      	b.n	8007948 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d107      	bne.n	80078e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e038      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
 80078d8:	40023800 	.word	0x40023800
 80078dc:	40007000 	.word	0x40007000
 80078e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80078e4:	4b1b      	ldr	r3, [pc, #108]	@ (8007954 <HAL_RCC_OscConfig+0x4ec>)
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d028      	beq.n	8007944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d121      	bne.n	8007944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800790a:	429a      	cmp	r2, r3
 800790c:	d11a      	bne.n	8007944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007914:	4013      	ands	r3, r2
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800791a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800791c:	4293      	cmp	r3, r2
 800791e:	d111      	bne.n	8007944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800792a:	085b      	lsrs	r3, r3, #1
 800792c:	3b01      	subs	r3, #1
 800792e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007930:	429a      	cmp	r2, r3
 8007932:	d107      	bne.n	8007944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800793e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007940:	429a      	cmp	r2, r3
 8007942:	d001      	beq.n	8007948 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	e000      	b.n	800794a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3718      	adds	r7, #24
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	40023800 	.word	0x40023800

08007958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d101      	bne.n	800796c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	e0cc      	b.n	8007b06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800796c:	4b68      	ldr	r3, [pc, #416]	@ (8007b10 <HAL_RCC_ClockConfig+0x1b8>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 0307 	and.w	r3, r3, #7
 8007974:	683a      	ldr	r2, [r7, #0]
 8007976:	429a      	cmp	r2, r3
 8007978:	d90c      	bls.n	8007994 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800797a:	4b65      	ldr	r3, [pc, #404]	@ (8007b10 <HAL_RCC_ClockConfig+0x1b8>)
 800797c:	683a      	ldr	r2, [r7, #0]
 800797e:	b2d2      	uxtb	r2, r2
 8007980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007982:	4b63      	ldr	r3, [pc, #396]	@ (8007b10 <HAL_RCC_ClockConfig+0x1b8>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 0307 	and.w	r3, r3, #7
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	429a      	cmp	r2, r3
 800798e:	d001      	beq.n	8007994 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e0b8      	b.n	8007b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 0302 	and.w	r3, r3, #2
 800799c:	2b00      	cmp	r3, #0
 800799e:	d020      	beq.n	80079e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 0304 	and.w	r3, r3, #4
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d005      	beq.n	80079b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80079ac:	4b59      	ldr	r3, [pc, #356]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	4a58      	ldr	r2, [pc, #352]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 80079b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80079b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0308 	and.w	r3, r3, #8
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d005      	beq.n	80079d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80079c4:	4b53      	ldr	r3, [pc, #332]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	4a52      	ldr	r2, [pc, #328]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 80079ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80079ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079d0:	4b50      	ldr	r3, [pc, #320]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	494d      	ldr	r1, [pc, #308]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 80079de:	4313      	orrs	r3, r2
 80079e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d044      	beq.n	8007a78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d107      	bne.n	8007a06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079f6:	4b47      	ldr	r3, [pc, #284]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d119      	bne.n	8007a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e07f      	b.n	8007b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	d003      	beq.n	8007a16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a12:	2b03      	cmp	r3, #3
 8007a14:	d107      	bne.n	8007a26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a16:	4b3f      	ldr	r3, [pc, #252]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d109      	bne.n	8007a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e06f      	b.n	8007b06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a26:	4b3b      	ldr	r3, [pc, #236]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 0302 	and.w	r3, r3, #2
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d101      	bne.n	8007a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e067      	b.n	8007b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a36:	4b37      	ldr	r3, [pc, #220]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	f023 0203 	bic.w	r2, r3, #3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	4934      	ldr	r1, [pc, #208]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007a44:	4313      	orrs	r3, r2
 8007a46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a48:	f7fa fc4c 	bl	80022e4 <HAL_GetTick>
 8007a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a4e:	e00a      	b.n	8007a66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a50:	f7fa fc48 	bl	80022e4 <HAL_GetTick>
 8007a54:	4602      	mov	r2, r0
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	1ad3      	subs	r3, r2, r3
 8007a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d901      	bls.n	8007a66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e04f      	b.n	8007b06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a66:	4b2b      	ldr	r3, [pc, #172]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	f003 020c 	and.w	r2, r3, #12
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d1eb      	bne.n	8007a50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007a78:	4b25      	ldr	r3, [pc, #148]	@ (8007b10 <HAL_RCC_ClockConfig+0x1b8>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 0307 	and.w	r3, r3, #7
 8007a80:	683a      	ldr	r2, [r7, #0]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d20c      	bcs.n	8007aa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a86:	4b22      	ldr	r3, [pc, #136]	@ (8007b10 <HAL_RCC_ClockConfig+0x1b8>)
 8007a88:	683a      	ldr	r2, [r7, #0]
 8007a8a:	b2d2      	uxtb	r2, r2
 8007a8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a8e:	4b20      	ldr	r3, [pc, #128]	@ (8007b10 <HAL_RCC_ClockConfig+0x1b8>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0307 	and.w	r3, r3, #7
 8007a96:	683a      	ldr	r2, [r7, #0]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d001      	beq.n	8007aa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e032      	b.n	8007b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0304 	and.w	r3, r3, #4
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d008      	beq.n	8007abe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007aac:	4b19      	ldr	r3, [pc, #100]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	4916      	ldr	r1, [pc, #88]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007aba:	4313      	orrs	r3, r2
 8007abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 0308 	and.w	r3, r3, #8
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d009      	beq.n	8007ade <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007aca:	4b12      	ldr	r3, [pc, #72]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	00db      	lsls	r3, r3, #3
 8007ad8:	490e      	ldr	r1, [pc, #56]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007ada:	4313      	orrs	r3, r2
 8007adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007ade:	f000 f821 	bl	8007b24 <HAL_RCC_GetSysClockFreq>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8007b14 <HAL_RCC_ClockConfig+0x1bc>)
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	091b      	lsrs	r3, r3, #4
 8007aea:	f003 030f 	and.w	r3, r3, #15
 8007aee:	490a      	ldr	r1, [pc, #40]	@ (8007b18 <HAL_RCC_ClockConfig+0x1c0>)
 8007af0:	5ccb      	ldrb	r3, [r1, r3]
 8007af2:	fa22 f303 	lsr.w	r3, r2, r3
 8007af6:	4a09      	ldr	r2, [pc, #36]	@ (8007b1c <HAL_RCC_ClockConfig+0x1c4>)
 8007af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007afa:	4b09      	ldr	r3, [pc, #36]	@ (8007b20 <HAL_RCC_ClockConfig+0x1c8>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7fa fbac 	bl	800225c <HAL_InitTick>

  return HAL_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	40023c00 	.word	0x40023c00
 8007b14:	40023800 	.word	0x40023800
 8007b18:	080118e8 	.word	0x080118e8
 8007b1c:	20000004 	.word	0x20000004
 8007b20:	20000008 	.word	0x20000008

08007b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b28:	b094      	sub	sp, #80	@ 0x50
 8007b2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b30:	2300      	movs	r3, #0
 8007b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b34:	2300      	movs	r3, #0
 8007b36:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b3c:	4b79      	ldr	r3, [pc, #484]	@ (8007d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	f003 030c 	and.w	r3, r3, #12
 8007b44:	2b08      	cmp	r3, #8
 8007b46:	d00d      	beq.n	8007b64 <HAL_RCC_GetSysClockFreq+0x40>
 8007b48:	2b08      	cmp	r3, #8
 8007b4a:	f200 80e1 	bhi.w	8007d10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d002      	beq.n	8007b58 <HAL_RCC_GetSysClockFreq+0x34>
 8007b52:	2b04      	cmp	r3, #4
 8007b54:	d003      	beq.n	8007b5e <HAL_RCC_GetSysClockFreq+0x3a>
 8007b56:	e0db      	b.n	8007d10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007b58:	4b73      	ldr	r3, [pc, #460]	@ (8007d28 <HAL_RCC_GetSysClockFreq+0x204>)
 8007b5a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8007b5c:	e0db      	b.n	8007d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007b5e:	4b73      	ldr	r3, [pc, #460]	@ (8007d2c <HAL_RCC_GetSysClockFreq+0x208>)
 8007b60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007b62:	e0d8      	b.n	8007d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007b64:	4b6f      	ldr	r3, [pc, #444]	@ (8007d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b6c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007b6e:	4b6d      	ldr	r3, [pc, #436]	@ (8007d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d063      	beq.n	8007c42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b7a:	4b6a      	ldr	r3, [pc, #424]	@ (8007d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	099b      	lsrs	r3, r3, #6
 8007b80:	2200      	movs	r2, #0
 8007b82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b84:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b8e:	2300      	movs	r3, #0
 8007b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007b96:	4622      	mov	r2, r4
 8007b98:	462b      	mov	r3, r5
 8007b9a:	f04f 0000 	mov.w	r0, #0
 8007b9e:	f04f 0100 	mov.w	r1, #0
 8007ba2:	0159      	lsls	r1, r3, #5
 8007ba4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ba8:	0150      	lsls	r0, r2, #5
 8007baa:	4602      	mov	r2, r0
 8007bac:	460b      	mov	r3, r1
 8007bae:	4621      	mov	r1, r4
 8007bb0:	1a51      	subs	r1, r2, r1
 8007bb2:	6139      	str	r1, [r7, #16]
 8007bb4:	4629      	mov	r1, r5
 8007bb6:	eb63 0301 	sbc.w	r3, r3, r1
 8007bba:	617b      	str	r3, [r7, #20]
 8007bbc:	f04f 0200 	mov.w	r2, #0
 8007bc0:	f04f 0300 	mov.w	r3, #0
 8007bc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007bc8:	4659      	mov	r1, fp
 8007bca:	018b      	lsls	r3, r1, #6
 8007bcc:	4651      	mov	r1, sl
 8007bce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007bd2:	4651      	mov	r1, sl
 8007bd4:	018a      	lsls	r2, r1, #6
 8007bd6:	4651      	mov	r1, sl
 8007bd8:	ebb2 0801 	subs.w	r8, r2, r1
 8007bdc:	4659      	mov	r1, fp
 8007bde:	eb63 0901 	sbc.w	r9, r3, r1
 8007be2:	f04f 0200 	mov.w	r2, #0
 8007be6:	f04f 0300 	mov.w	r3, #0
 8007bea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007bee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007bf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007bf6:	4690      	mov	r8, r2
 8007bf8:	4699      	mov	r9, r3
 8007bfa:	4623      	mov	r3, r4
 8007bfc:	eb18 0303 	adds.w	r3, r8, r3
 8007c00:	60bb      	str	r3, [r7, #8]
 8007c02:	462b      	mov	r3, r5
 8007c04:	eb49 0303 	adc.w	r3, r9, r3
 8007c08:	60fb      	str	r3, [r7, #12]
 8007c0a:	f04f 0200 	mov.w	r2, #0
 8007c0e:	f04f 0300 	mov.w	r3, #0
 8007c12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007c16:	4629      	mov	r1, r5
 8007c18:	024b      	lsls	r3, r1, #9
 8007c1a:	4621      	mov	r1, r4
 8007c1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007c20:	4621      	mov	r1, r4
 8007c22:	024a      	lsls	r2, r1, #9
 8007c24:	4610      	mov	r0, r2
 8007c26:	4619      	mov	r1, r3
 8007c28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007c34:	f7f8 fb24 	bl	8000280 <__aeabi_uldivmod>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c40:	e058      	b.n	8007cf4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c42:	4b38      	ldr	r3, [pc, #224]	@ (8007d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	099b      	lsrs	r3, r3, #6
 8007c48:	2200      	movs	r2, #0
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	4611      	mov	r1, r2
 8007c4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007c52:	623b      	str	r3, [r7, #32]
 8007c54:	2300      	movs	r3, #0
 8007c56:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007c5c:	4642      	mov	r2, r8
 8007c5e:	464b      	mov	r3, r9
 8007c60:	f04f 0000 	mov.w	r0, #0
 8007c64:	f04f 0100 	mov.w	r1, #0
 8007c68:	0159      	lsls	r1, r3, #5
 8007c6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c6e:	0150      	lsls	r0, r2, #5
 8007c70:	4602      	mov	r2, r0
 8007c72:	460b      	mov	r3, r1
 8007c74:	4641      	mov	r1, r8
 8007c76:	ebb2 0a01 	subs.w	sl, r2, r1
 8007c7a:	4649      	mov	r1, r9
 8007c7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007c80:	f04f 0200 	mov.w	r2, #0
 8007c84:	f04f 0300 	mov.w	r3, #0
 8007c88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007c8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007c90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007c94:	ebb2 040a 	subs.w	r4, r2, sl
 8007c98:	eb63 050b 	sbc.w	r5, r3, fp
 8007c9c:	f04f 0200 	mov.w	r2, #0
 8007ca0:	f04f 0300 	mov.w	r3, #0
 8007ca4:	00eb      	lsls	r3, r5, #3
 8007ca6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007caa:	00e2      	lsls	r2, r4, #3
 8007cac:	4614      	mov	r4, r2
 8007cae:	461d      	mov	r5, r3
 8007cb0:	4643      	mov	r3, r8
 8007cb2:	18e3      	adds	r3, r4, r3
 8007cb4:	603b      	str	r3, [r7, #0]
 8007cb6:	464b      	mov	r3, r9
 8007cb8:	eb45 0303 	adc.w	r3, r5, r3
 8007cbc:	607b      	str	r3, [r7, #4]
 8007cbe:	f04f 0200 	mov.w	r2, #0
 8007cc2:	f04f 0300 	mov.w	r3, #0
 8007cc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007cca:	4629      	mov	r1, r5
 8007ccc:	028b      	lsls	r3, r1, #10
 8007cce:	4621      	mov	r1, r4
 8007cd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007cd4:	4621      	mov	r1, r4
 8007cd6:	028a      	lsls	r2, r1, #10
 8007cd8:	4610      	mov	r0, r2
 8007cda:	4619      	mov	r1, r3
 8007cdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cde:	2200      	movs	r2, #0
 8007ce0:	61bb      	str	r3, [r7, #24]
 8007ce2:	61fa      	str	r2, [r7, #28]
 8007ce4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ce8:	f7f8 faca 	bl	8000280 <__aeabi_uldivmod>
 8007cec:	4602      	mov	r2, r0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8007d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	0c1b      	lsrs	r3, r3, #16
 8007cfa:	f003 0303 	and.w	r3, r3, #3
 8007cfe:	3301      	adds	r3, #1
 8007d00:	005b      	lsls	r3, r3, #1
 8007d02:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8007d04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007d06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007d0e:	e002      	b.n	8007d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007d10:	4b05      	ldr	r3, [pc, #20]	@ (8007d28 <HAL_RCC_GetSysClockFreq+0x204>)
 8007d12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007d14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3750      	adds	r7, #80	@ 0x50
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d22:	bf00      	nop
 8007d24:	40023800 	.word	0x40023800
 8007d28:	00f42400 	.word	0x00f42400
 8007d2c:	007a1200 	.word	0x007a1200

08007d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d30:	b480      	push	{r7}
 8007d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d34:	4b03      	ldr	r3, [pc, #12]	@ (8007d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8007d36:	681b      	ldr	r3, [r3, #0]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	20000004 	.word	0x20000004

08007d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007d4c:	f7ff fff0 	bl	8007d30 <HAL_RCC_GetHCLKFreq>
 8007d50:	4602      	mov	r2, r0
 8007d52:	4b05      	ldr	r3, [pc, #20]	@ (8007d68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	0a9b      	lsrs	r3, r3, #10
 8007d58:	f003 0307 	and.w	r3, r3, #7
 8007d5c:	4903      	ldr	r1, [pc, #12]	@ (8007d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d5e:	5ccb      	ldrb	r3, [r1, r3]
 8007d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	40023800 	.word	0x40023800
 8007d6c:	080118f8 	.word	0x080118f8

08007d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007d74:	f7ff ffdc 	bl	8007d30 <HAL_RCC_GetHCLKFreq>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	4b05      	ldr	r3, [pc, #20]	@ (8007d90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	0b5b      	lsrs	r3, r3, #13
 8007d80:	f003 0307 	and.w	r3, r3, #7
 8007d84:	4903      	ldr	r1, [pc, #12]	@ (8007d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d86:	5ccb      	ldrb	r3, [r1, r3]
 8007d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	40023800 	.word	0x40023800
 8007d94:	080118f8 	.word	0x080118f8

08007d98 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b086      	sub	sp, #24
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007da0:	2300      	movs	r3, #0
 8007da2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007da4:	2300      	movs	r3, #0
 8007da6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 0301 	and.w	r3, r3, #1
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d105      	bne.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d035      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007dc0:	4b62      	ldr	r3, [pc, #392]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007dc6:	f7fa fa8d 	bl	80022e4 <HAL_GetTick>
 8007dca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007dcc:	e008      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007dce:	f7fa fa89 	bl	80022e4 <HAL_GetTick>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	2b02      	cmp	r3, #2
 8007dda:	d901      	bls.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	e0b0      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007de0:	4b5b      	ldr	r3, [pc, #364]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1f0      	bne.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	019a      	lsls	r2, r3, #6
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	071b      	lsls	r3, r3, #28
 8007df8:	4955      	ldr	r1, [pc, #340]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007e00:	4b52      	ldr	r3, [pc, #328]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007e02:	2201      	movs	r2, #1
 8007e04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007e06:	f7fa fa6d 	bl	80022e4 <HAL_GetTick>
 8007e0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e0c:	e008      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007e0e:	f7fa fa69 	bl	80022e4 <HAL_GetTick>
 8007e12:	4602      	mov	r2, r0
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	1ad3      	subs	r3, r2, r3
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d901      	bls.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	e090      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e20:	4b4b      	ldr	r3, [pc, #300]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d0f0      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 0302 	and.w	r3, r3, #2
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f000 8083 	beq.w	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	60fb      	str	r3, [r7, #12]
 8007e3e:	4b44      	ldr	r3, [pc, #272]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e42:	4a43      	ldr	r2, [pc, #268]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e48:	6413      	str	r3, [r2, #64]	@ 0x40
 8007e4a:	4b41      	ldr	r3, [pc, #260]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e52:	60fb      	str	r3, [r7, #12]
 8007e54:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007e56:	4b3f      	ldr	r3, [pc, #252]	@ (8007f54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a3e      	ldr	r2, [pc, #248]	@ (8007f54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007e5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e60:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007e62:	f7fa fa3f 	bl	80022e4 <HAL_GetTick>
 8007e66:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007e68:	e008      	b.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007e6a:	f7fa fa3b 	bl	80022e4 <HAL_GetTick>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	d901      	bls.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e062      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007e7c:	4b35      	ldr	r3, [pc, #212]	@ (8007f54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d0f0      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007e88:	4b31      	ldr	r3, [pc, #196]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007e8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e90:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d02f      	beq.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d028      	beq.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007ea6:	4b2a      	ldr	r3, [pc, #168]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007eae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007eb0:	4b29      	ldr	r3, [pc, #164]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007eb6:	4b28      	ldr	r3, [pc, #160]	@ (8007f58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007eb8:	2200      	movs	r2, #0
 8007eba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007ebc:	4a24      	ldr	r2, [pc, #144]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007ec2:	4b23      	ldr	r3, [pc, #140]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ec6:	f003 0301 	and.w	r3, r3, #1
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d114      	bne.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007ece:	f7fa fa09 	bl	80022e4 <HAL_GetTick>
 8007ed2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ed4:	e00a      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ed6:	f7fa fa05 	bl	80022e4 <HAL_GetTick>
 8007eda:	4602      	mov	r2, r0
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d901      	bls.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e02a      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007eec:	4b18      	ldr	r3, [pc, #96]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ef0:	f003 0302 	and.w	r3, r3, #2
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d0ee      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f04:	d10d      	bne.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007f06:	4b12      	ldr	r3, [pc, #72]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007f16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f1a:	490d      	ldr	r1, [pc, #52]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	608b      	str	r3, [r1, #8]
 8007f20:	e005      	b.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007f22:	4b0b      	ldr	r3, [pc, #44]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	4a0a      	ldr	r2, [pc, #40]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f28:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007f2c:	6093      	str	r3, [r2, #8]
 8007f2e:	4b08      	ldr	r3, [pc, #32]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f30:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f3a:	4905      	ldr	r1, [pc, #20]	@ (8007f50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3718      	adds	r7, #24
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	42470068 	.word	0x42470068
 8007f50:	40023800 	.word	0x40023800
 8007f54:	40007000 	.word	0x40007000
 8007f58:	42470e40 	.word	0x42470e40

08007f5c <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2203      	movs	r2, #3
 8007f68:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8007f6a:	4b11      	ldr	r3, [pc, #68]	@ (8007fb0 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007f6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f70:	099b      	lsrs	r3, r3, #6
 8007f72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007fb0 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f80:	0f1b      	lsrs	r3, r3, #28
 8007f82:	f003 0207 	and.w	r2, r3, #7
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8007f8a:	4b09      	ldr	r3, [pc, #36]	@ (8007fb0 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007f92:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8007f94:	4b06      	ldr	r3, [pc, #24]	@ (8007fb0 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8007f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f98:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	431a      	orrs	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8007fa4:	bf00      	nop
 8007fa6:	3714      	adds	r7, #20
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr
 8007fb0:	40023800 	.word	0x40023800

08007fb4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b087      	sub	sp, #28
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d13f      	bne.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007fd2:	4b24      	ldr	r3, [pc, #144]	@ (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007fda:	60fb      	str	r3, [r7, #12]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d006      	beq.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007fe8:	d12f      	bne.n	800804a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007fea:	4b1f      	ldr	r3, [pc, #124]	@ (8008068 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007fec:	617b      	str	r3, [r7, #20]
          break;
 8007fee:	e02f      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007ff0:	4b1c      	ldr	r3, [pc, #112]	@ (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ff8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ffc:	d108      	bne.n	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007ffe:	4b19      	ldr	r3, [pc, #100]	@ (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008006:	4a19      	ldr	r2, [pc, #100]	@ (800806c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8008008:	fbb2 f3f3 	udiv	r3, r2, r3
 800800c:	613b      	str	r3, [r7, #16]
 800800e:	e007      	b.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008010:	4b14      	ldr	r3, [pc, #80]	@ (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008018:	4a15      	ldr	r2, [pc, #84]	@ (8008070 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800801a:	fbb2 f3f3 	udiv	r3, r2, r3
 800801e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008020:	4b10      	ldr	r3, [pc, #64]	@ (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008022:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008026:	099b      	lsrs	r3, r3, #6
 8008028:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	fb02 f303 	mul.w	r3, r2, r3
 8008032:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008034:	4b0b      	ldr	r3, [pc, #44]	@ (8008064 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008036:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800803a:	0f1b      	lsrs	r3, r3, #28
 800803c:	f003 0307 	and.w	r3, r3, #7
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	fbb2 f3f3 	udiv	r3, r2, r3
 8008046:	617b      	str	r3, [r7, #20]
          break;
 8008048:	e002      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800804a:	2300      	movs	r3, #0
 800804c:	617b      	str	r3, [r7, #20]
          break;
 800804e:	bf00      	nop
        }
      }
      break;
 8008050:	e000      	b.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8008052:	bf00      	nop
    }
  }
  return frequency;
 8008054:	697b      	ldr	r3, [r7, #20]
}
 8008056:	4618      	mov	r0, r3
 8008058:	371c      	adds	r7, #28
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	40023800 	.word	0x40023800
 8008068:	00bb8000 	.word	0x00bb8000
 800806c:	007a1200 	.word	0x007a1200
 8008070:	00f42400 	.word	0x00f42400

08008074 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d101      	bne.n	8008086 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	e041      	b.n	800810a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800808c:	b2db      	uxtb	r3, r3
 800808e:	2b00      	cmp	r3, #0
 8008090:	d106      	bne.n	80080a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f7f9 fe5e 	bl	8001d5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2202      	movs	r2, #2
 80080a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	3304      	adds	r3, #4
 80080b0:	4619      	mov	r1, r3
 80080b2:	4610      	mov	r0, r2
 80080b4:	f000 fa7e 	bl	80085b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008108:	2300      	movs	r3, #0
}
 800810a:	4618      	mov	r0, r3
 800810c:	3708      	adds	r7, #8
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
	...

08008114 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008122:	b2db      	uxtb	r3, r3
 8008124:	2b01      	cmp	r3, #1
 8008126:	d001      	beq.n	800812c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	e04e      	b.n	80081ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2202      	movs	r2, #2
 8008130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68da      	ldr	r2, [r3, #12]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f042 0201 	orr.w	r2, r2, #1
 8008142:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a23      	ldr	r2, [pc, #140]	@ (80081d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d022      	beq.n	8008194 <HAL_TIM_Base_Start_IT+0x80>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008156:	d01d      	beq.n	8008194 <HAL_TIM_Base_Start_IT+0x80>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a1f      	ldr	r2, [pc, #124]	@ (80081dc <HAL_TIM_Base_Start_IT+0xc8>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d018      	beq.n	8008194 <HAL_TIM_Base_Start_IT+0x80>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a1e      	ldr	r2, [pc, #120]	@ (80081e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d013      	beq.n	8008194 <HAL_TIM_Base_Start_IT+0x80>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a1c      	ldr	r2, [pc, #112]	@ (80081e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d00e      	beq.n	8008194 <HAL_TIM_Base_Start_IT+0x80>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a1b      	ldr	r2, [pc, #108]	@ (80081e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d009      	beq.n	8008194 <HAL_TIM_Base_Start_IT+0x80>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a19      	ldr	r2, [pc, #100]	@ (80081ec <HAL_TIM_Base_Start_IT+0xd8>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d004      	beq.n	8008194 <HAL_TIM_Base_Start_IT+0x80>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a18      	ldr	r2, [pc, #96]	@ (80081f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d111      	bne.n	80081b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	f003 0307 	and.w	r3, r3, #7
 800819e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2b06      	cmp	r3, #6
 80081a4:	d010      	beq.n	80081c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f042 0201 	orr.w	r2, r2, #1
 80081b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081b6:	e007      	b.n	80081c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f042 0201 	orr.w	r2, r2, #1
 80081c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3714      	adds	r7, #20
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr
 80081d6:	bf00      	nop
 80081d8:	40010000 	.word	0x40010000
 80081dc:	40000400 	.word	0x40000400
 80081e0:	40000800 	.word	0x40000800
 80081e4:	40000c00 	.word	0x40000c00
 80081e8:	40010400 	.word	0x40010400
 80081ec:	40014000 	.word	0x40014000
 80081f0:	40001800 	.word	0x40001800

080081f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	f003 0302 	and.w	r3, r3, #2
 8008212:	2b00      	cmp	r3, #0
 8008214:	d020      	beq.n	8008258 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f003 0302 	and.w	r3, r3, #2
 800821c:	2b00      	cmp	r3, #0
 800821e:	d01b      	beq.n	8008258 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f06f 0202 	mvn.w	r2, #2
 8008228:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2201      	movs	r2, #1
 800822e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	f003 0303 	and.w	r3, r3, #3
 800823a:	2b00      	cmp	r3, #0
 800823c:	d003      	beq.n	8008246 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f999 	bl	8008576 <HAL_TIM_IC_CaptureCallback>
 8008244:	e005      	b.n	8008252 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 f98b 	bl	8008562 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 f99c 	bl	800858a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	f003 0304 	and.w	r3, r3, #4
 800825e:	2b00      	cmp	r3, #0
 8008260:	d020      	beq.n	80082a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f003 0304 	and.w	r3, r3, #4
 8008268:	2b00      	cmp	r3, #0
 800826a:	d01b      	beq.n	80082a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f06f 0204 	mvn.w	r2, #4
 8008274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2202      	movs	r2, #2
 800827a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008286:	2b00      	cmp	r3, #0
 8008288:	d003      	beq.n	8008292 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f973 	bl	8008576 <HAL_TIM_IC_CaptureCallback>
 8008290:	e005      	b.n	800829e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 f965 	bl	8008562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 f976 	bl	800858a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	f003 0308 	and.w	r3, r3, #8
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d020      	beq.n	80082f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f003 0308 	and.w	r3, r3, #8
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d01b      	beq.n	80082f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f06f 0208 	mvn.w	r2, #8
 80082c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2204      	movs	r2, #4
 80082c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	69db      	ldr	r3, [r3, #28]
 80082ce:	f003 0303 	and.w	r3, r3, #3
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d003      	beq.n	80082de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 f94d 	bl	8008576 <HAL_TIM_IC_CaptureCallback>
 80082dc:	e005      	b.n	80082ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 f93f 	bl	8008562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 f950 	bl	800858a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	f003 0310 	and.w	r3, r3, #16
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d020      	beq.n	800833c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f003 0310 	and.w	r3, r3, #16
 8008300:	2b00      	cmp	r3, #0
 8008302:	d01b      	beq.n	800833c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f06f 0210 	mvn.w	r2, #16
 800830c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2208      	movs	r2, #8
 8008312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	69db      	ldr	r3, [r3, #28]
 800831a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800831e:	2b00      	cmp	r3, #0
 8008320:	d003      	beq.n	800832a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 f927 	bl	8008576 <HAL_TIM_IC_CaptureCallback>
 8008328:	e005      	b.n	8008336 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 f919 	bl	8008562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 f92a 	bl	800858a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	f003 0301 	and.w	r3, r3, #1
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00c      	beq.n	8008360 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f003 0301 	and.w	r3, r3, #1
 800834c:	2b00      	cmp	r3, #0
 800834e:	d007      	beq.n	8008360 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f06f 0201 	mvn.w	r2, #1
 8008358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7f8 fe60 	bl	8001020 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00c      	beq.n	8008384 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008370:	2b00      	cmp	r3, #0
 8008372:	d007      	beq.n	8008384 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800837c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fae4 	bl	800894c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800838a:	2b00      	cmp	r3, #0
 800838c:	d00c      	beq.n	80083a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008394:	2b00      	cmp	r3, #0
 8008396:	d007      	beq.n	80083a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80083a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 f8fb 	bl	800859e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	f003 0320 	and.w	r3, r3, #32
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d00c      	beq.n	80083cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f003 0320 	and.w	r3, r3, #32
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d007      	beq.n	80083cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f06f 0220 	mvn.w	r2, #32
 80083c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fab6 	bl	8008938 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80083cc:	bf00      	nop
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083de:	2300      	movs	r3, #0
 80083e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d101      	bne.n	80083f0 <HAL_TIM_ConfigClockSource+0x1c>
 80083ec:	2302      	movs	r3, #2
 80083ee:	e0b4      	b.n	800855a <HAL_TIM_ConfigClockSource+0x186>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2202      	movs	r2, #2
 80083fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800840e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008416:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008428:	d03e      	beq.n	80084a8 <HAL_TIM_ConfigClockSource+0xd4>
 800842a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800842e:	f200 8087 	bhi.w	8008540 <HAL_TIM_ConfigClockSource+0x16c>
 8008432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008436:	f000 8086 	beq.w	8008546 <HAL_TIM_ConfigClockSource+0x172>
 800843a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800843e:	d87f      	bhi.n	8008540 <HAL_TIM_ConfigClockSource+0x16c>
 8008440:	2b70      	cmp	r3, #112	@ 0x70
 8008442:	d01a      	beq.n	800847a <HAL_TIM_ConfigClockSource+0xa6>
 8008444:	2b70      	cmp	r3, #112	@ 0x70
 8008446:	d87b      	bhi.n	8008540 <HAL_TIM_ConfigClockSource+0x16c>
 8008448:	2b60      	cmp	r3, #96	@ 0x60
 800844a:	d050      	beq.n	80084ee <HAL_TIM_ConfigClockSource+0x11a>
 800844c:	2b60      	cmp	r3, #96	@ 0x60
 800844e:	d877      	bhi.n	8008540 <HAL_TIM_ConfigClockSource+0x16c>
 8008450:	2b50      	cmp	r3, #80	@ 0x50
 8008452:	d03c      	beq.n	80084ce <HAL_TIM_ConfigClockSource+0xfa>
 8008454:	2b50      	cmp	r3, #80	@ 0x50
 8008456:	d873      	bhi.n	8008540 <HAL_TIM_ConfigClockSource+0x16c>
 8008458:	2b40      	cmp	r3, #64	@ 0x40
 800845a:	d058      	beq.n	800850e <HAL_TIM_ConfigClockSource+0x13a>
 800845c:	2b40      	cmp	r3, #64	@ 0x40
 800845e:	d86f      	bhi.n	8008540 <HAL_TIM_ConfigClockSource+0x16c>
 8008460:	2b30      	cmp	r3, #48	@ 0x30
 8008462:	d064      	beq.n	800852e <HAL_TIM_ConfigClockSource+0x15a>
 8008464:	2b30      	cmp	r3, #48	@ 0x30
 8008466:	d86b      	bhi.n	8008540 <HAL_TIM_ConfigClockSource+0x16c>
 8008468:	2b20      	cmp	r3, #32
 800846a:	d060      	beq.n	800852e <HAL_TIM_ConfigClockSource+0x15a>
 800846c:	2b20      	cmp	r3, #32
 800846e:	d867      	bhi.n	8008540 <HAL_TIM_ConfigClockSource+0x16c>
 8008470:	2b00      	cmp	r3, #0
 8008472:	d05c      	beq.n	800852e <HAL_TIM_ConfigClockSource+0x15a>
 8008474:	2b10      	cmp	r3, #16
 8008476:	d05a      	beq.n	800852e <HAL_TIM_ConfigClockSource+0x15a>
 8008478:	e062      	b.n	8008540 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800848a:	f000 f9b9 	bl	8008800 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800849c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68ba      	ldr	r2, [r7, #8]
 80084a4:	609a      	str	r2, [r3, #8]
      break;
 80084a6:	e04f      	b.n	8008548 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80084b8:	f000 f9a2 	bl	8008800 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	689a      	ldr	r2, [r3, #8]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80084ca:	609a      	str	r2, [r3, #8]
      break;
 80084cc:	e03c      	b.n	8008548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084da:	461a      	mov	r2, r3
 80084dc:	f000 f916 	bl	800870c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2150      	movs	r1, #80	@ 0x50
 80084e6:	4618      	mov	r0, r3
 80084e8:	f000 f96f 	bl	80087ca <TIM_ITRx_SetConfig>
      break;
 80084ec:	e02c      	b.n	8008548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80084fa:	461a      	mov	r2, r3
 80084fc:	f000 f935 	bl	800876a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2160      	movs	r1, #96	@ 0x60
 8008506:	4618      	mov	r0, r3
 8008508:	f000 f95f 	bl	80087ca <TIM_ITRx_SetConfig>
      break;
 800850c:	e01c      	b.n	8008548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800851a:	461a      	mov	r2, r3
 800851c:	f000 f8f6 	bl	800870c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2140      	movs	r1, #64	@ 0x40
 8008526:	4618      	mov	r0, r3
 8008528:	f000 f94f 	bl	80087ca <TIM_ITRx_SetConfig>
      break;
 800852c:	e00c      	b.n	8008548 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4619      	mov	r1, r3
 8008538:	4610      	mov	r0, r2
 800853a:	f000 f946 	bl	80087ca <TIM_ITRx_SetConfig>
      break;
 800853e:	e003      	b.n	8008548 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	73fb      	strb	r3, [r7, #15]
      break;
 8008544:	e000      	b.n	8008548 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008546:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008558:	7bfb      	ldrb	r3, [r7, #15]
}
 800855a:	4618      	mov	r0, r3
 800855c:	3710      	adds	r7, #16
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008562:	b480      	push	{r7}
 8008564:	b083      	sub	sp, #12
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800856a:	bf00      	nop
 800856c:	370c      	adds	r7, #12
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr

08008576 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008576:	b480      	push	{r7}
 8008578:	b083      	sub	sp, #12
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800857e:	bf00      	nop
 8008580:	370c      	adds	r7, #12
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800858a:	b480      	push	{r7}
 800858c:	b083      	sub	sp, #12
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008592:	bf00      	nop
 8008594:	370c      	adds	r7, #12
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr

0800859e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800859e:	b480      	push	{r7}
 80085a0:	b083      	sub	sp, #12
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085a6:	bf00      	nop
 80085a8:	370c      	adds	r7, #12
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr
	...

080085b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b085      	sub	sp, #20
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a46      	ldr	r2, [pc, #280]	@ (80086e0 <TIM_Base_SetConfig+0x12c>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d013      	beq.n	80085f4 <TIM_Base_SetConfig+0x40>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085d2:	d00f      	beq.n	80085f4 <TIM_Base_SetConfig+0x40>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a43      	ldr	r2, [pc, #268]	@ (80086e4 <TIM_Base_SetConfig+0x130>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d00b      	beq.n	80085f4 <TIM_Base_SetConfig+0x40>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a42      	ldr	r2, [pc, #264]	@ (80086e8 <TIM_Base_SetConfig+0x134>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d007      	beq.n	80085f4 <TIM_Base_SetConfig+0x40>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a41      	ldr	r2, [pc, #260]	@ (80086ec <TIM_Base_SetConfig+0x138>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d003      	beq.n	80085f4 <TIM_Base_SetConfig+0x40>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4a40      	ldr	r2, [pc, #256]	@ (80086f0 <TIM_Base_SetConfig+0x13c>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d108      	bne.n	8008606 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	4313      	orrs	r3, r2
 8008604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4a35      	ldr	r2, [pc, #212]	@ (80086e0 <TIM_Base_SetConfig+0x12c>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d02b      	beq.n	8008666 <TIM_Base_SetConfig+0xb2>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008614:	d027      	beq.n	8008666 <TIM_Base_SetConfig+0xb2>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a32      	ldr	r2, [pc, #200]	@ (80086e4 <TIM_Base_SetConfig+0x130>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d023      	beq.n	8008666 <TIM_Base_SetConfig+0xb2>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4a31      	ldr	r2, [pc, #196]	@ (80086e8 <TIM_Base_SetConfig+0x134>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d01f      	beq.n	8008666 <TIM_Base_SetConfig+0xb2>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a30      	ldr	r2, [pc, #192]	@ (80086ec <TIM_Base_SetConfig+0x138>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d01b      	beq.n	8008666 <TIM_Base_SetConfig+0xb2>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4a2f      	ldr	r2, [pc, #188]	@ (80086f0 <TIM_Base_SetConfig+0x13c>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d017      	beq.n	8008666 <TIM_Base_SetConfig+0xb2>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a2e      	ldr	r2, [pc, #184]	@ (80086f4 <TIM_Base_SetConfig+0x140>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d013      	beq.n	8008666 <TIM_Base_SetConfig+0xb2>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a2d      	ldr	r2, [pc, #180]	@ (80086f8 <TIM_Base_SetConfig+0x144>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d00f      	beq.n	8008666 <TIM_Base_SetConfig+0xb2>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a2c      	ldr	r2, [pc, #176]	@ (80086fc <TIM_Base_SetConfig+0x148>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d00b      	beq.n	8008666 <TIM_Base_SetConfig+0xb2>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a2b      	ldr	r2, [pc, #172]	@ (8008700 <TIM_Base_SetConfig+0x14c>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d007      	beq.n	8008666 <TIM_Base_SetConfig+0xb2>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a2a      	ldr	r2, [pc, #168]	@ (8008704 <TIM_Base_SetConfig+0x150>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d003      	beq.n	8008666 <TIM_Base_SetConfig+0xb2>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a29      	ldr	r2, [pc, #164]	@ (8008708 <TIM_Base_SetConfig+0x154>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d108      	bne.n	8008678 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800866c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	4313      	orrs	r3, r2
 8008676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	695b      	ldr	r3, [r3, #20]
 8008682:	4313      	orrs	r3, r2
 8008684:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	689a      	ldr	r2, [r3, #8]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4a10      	ldr	r2, [pc, #64]	@ (80086e0 <TIM_Base_SetConfig+0x12c>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d003      	beq.n	80086ac <TIM_Base_SetConfig+0xf8>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a12      	ldr	r2, [pc, #72]	@ (80086f0 <TIM_Base_SetConfig+0x13c>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d103      	bne.n	80086b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	691a      	ldr	r2, [r3, #16]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	f003 0301 	and.w	r3, r3, #1
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d105      	bne.n	80086d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	f023 0201 	bic.w	r2, r3, #1
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	611a      	str	r2, [r3, #16]
  }
}
 80086d2:	bf00      	nop
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	40010000 	.word	0x40010000
 80086e4:	40000400 	.word	0x40000400
 80086e8:	40000800 	.word	0x40000800
 80086ec:	40000c00 	.word	0x40000c00
 80086f0:	40010400 	.word	0x40010400
 80086f4:	40014000 	.word	0x40014000
 80086f8:	40014400 	.word	0x40014400
 80086fc:	40014800 	.word	0x40014800
 8008700:	40001800 	.word	0x40001800
 8008704:	40001c00 	.word	0x40001c00
 8008708:	40002000 	.word	0x40002000

0800870c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800870c:	b480      	push	{r7}
 800870e:	b087      	sub	sp, #28
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6a1b      	ldr	r3, [r3, #32]
 800871c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6a1b      	ldr	r3, [r3, #32]
 8008722:	f023 0201 	bic.w	r2, r3, #1
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	699b      	ldr	r3, [r3, #24]
 800872e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008736:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	011b      	lsls	r3, r3, #4
 800873c:	693a      	ldr	r2, [r7, #16]
 800873e:	4313      	orrs	r3, r2
 8008740:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	f023 030a 	bic.w	r3, r3, #10
 8008748:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800874a:	697a      	ldr	r2, [r7, #20]
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	4313      	orrs	r3, r2
 8008750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	693a      	ldr	r2, [r7, #16]
 8008756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	697a      	ldr	r2, [r7, #20]
 800875c:	621a      	str	r2, [r3, #32]
}
 800875e:	bf00      	nop
 8008760:	371c      	adds	r7, #28
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr

0800876a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800876a:	b480      	push	{r7}
 800876c:	b087      	sub	sp, #28
 800876e:	af00      	add	r7, sp, #0
 8008770:	60f8      	str	r0, [r7, #12]
 8008772:	60b9      	str	r1, [r7, #8]
 8008774:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	6a1b      	ldr	r3, [r3, #32]
 800877a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6a1b      	ldr	r3, [r3, #32]
 8008780:	f023 0210 	bic.w	r2, r3, #16
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	699b      	ldr	r3, [r3, #24]
 800878c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008794:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	031b      	lsls	r3, r3, #12
 800879a:	693a      	ldr	r2, [r7, #16]
 800879c:	4313      	orrs	r3, r2
 800879e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80087a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	011b      	lsls	r3, r3, #4
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	693a      	ldr	r2, [r7, #16]
 80087b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	697a      	ldr	r2, [r7, #20]
 80087bc:	621a      	str	r2, [r3, #32]
}
 80087be:	bf00      	nop
 80087c0:	371c      	adds	r7, #28
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr

080087ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80087ca:	b480      	push	{r7}
 80087cc:	b085      	sub	sp, #20
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
 80087d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80087e2:	683a      	ldr	r2, [r7, #0]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	f043 0307 	orr.w	r3, r3, #7
 80087ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	609a      	str	r2, [r3, #8]
}
 80087f4:	bf00      	nop
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008800:	b480      	push	{r7}
 8008802:	b087      	sub	sp, #28
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
 800880c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800881a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	021a      	lsls	r2, r3, #8
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	431a      	orrs	r2, r3
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	4313      	orrs	r3, r2
 8008828:	697a      	ldr	r2, [r7, #20]
 800882a:	4313      	orrs	r3, r2
 800882c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	697a      	ldr	r2, [r7, #20]
 8008832:	609a      	str	r2, [r3, #8]
}
 8008834:	bf00      	nop
 8008836:	371c      	adds	r7, #28
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008840:	b480      	push	{r7}
 8008842:	b085      	sub	sp, #20
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008850:	2b01      	cmp	r3, #1
 8008852:	d101      	bne.n	8008858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008854:	2302      	movs	r3, #2
 8008856:	e05a      	b.n	800890e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2202      	movs	r2, #2
 8008864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800887e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	4313      	orrs	r3, r2
 8008888:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a21      	ldr	r2, [pc, #132]	@ (800891c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d022      	beq.n	80088e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088a4:	d01d      	beq.n	80088e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a1d      	ldr	r2, [pc, #116]	@ (8008920 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d018      	beq.n	80088e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a1b      	ldr	r2, [pc, #108]	@ (8008924 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d013      	beq.n	80088e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a1a      	ldr	r2, [pc, #104]	@ (8008928 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d00e      	beq.n	80088e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a18      	ldr	r2, [pc, #96]	@ (800892c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d009      	beq.n	80088e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a17      	ldr	r2, [pc, #92]	@ (8008930 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d004      	beq.n	80088e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a15      	ldr	r2, [pc, #84]	@ (8008934 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d10c      	bne.n	80088fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	68ba      	ldr	r2, [r7, #8]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	68ba      	ldr	r2, [r7, #8]
 80088fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3714      	adds	r7, #20
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	40010000 	.word	0x40010000
 8008920:	40000400 	.word	0x40000400
 8008924:	40000800 	.word	0x40000800
 8008928:	40000c00 	.word	0x40000c00
 800892c:	40010400 	.word	0x40010400
 8008930:	40014000 	.word	0x40014000
 8008934:	40001800 	.word	0x40001800

08008938 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008954:	bf00      	nop
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d101      	bne.n	8008972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	e042      	b.n	80089f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008978:	b2db      	uxtb	r3, r3
 800897a:	2b00      	cmp	r3, #0
 800897c:	d106      	bne.n	800898c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f7f9 fa10 	bl	8001dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2224      	movs	r2, #36	@ 0x24
 8008990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68da      	ldr	r2, [r3, #12]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80089a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fdbd 	bl	8009524 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	691a      	ldr	r2, [r3, #16]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80089b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	695a      	ldr	r2, [r3, #20]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80089c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	68da      	ldr	r2, [r3, #12]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80089d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2220      	movs	r2, #32
 80089e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2220      	movs	r2, #32
 80089ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3708      	adds	r7, #8
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b08a      	sub	sp, #40	@ 0x28
 8008a04:	af02      	add	r7, sp, #8
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	603b      	str	r3, [r7, #0]
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008a10:	2300      	movs	r3, #0
 8008a12:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	2b20      	cmp	r3, #32
 8008a1e:	d175      	bne.n	8008b0c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d002      	beq.n	8008a2c <HAL_UART_Transmit+0x2c>
 8008a26:	88fb      	ldrh	r3, [r7, #6]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d101      	bne.n	8008a30 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e06e      	b.n	8008b0e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2200      	movs	r2, #0
 8008a34:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2221      	movs	r2, #33	@ 0x21
 8008a3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a3e:	f7f9 fc51 	bl	80022e4 <HAL_GetTick>
 8008a42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	88fa      	ldrh	r2, [r7, #6]
 8008a48:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	88fa      	ldrh	r2, [r7, #6]
 8008a4e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a58:	d108      	bne.n	8008a6c <HAL_UART_Transmit+0x6c>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d104      	bne.n	8008a6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008a62:	2300      	movs	r3, #0
 8008a64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	61bb      	str	r3, [r7, #24]
 8008a6a:	e003      	b.n	8008a74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a70:	2300      	movs	r3, #0
 8008a72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a74:	e02e      	b.n	8008ad4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	9300      	str	r3, [sp, #0]
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	2180      	movs	r1, #128	@ 0x80
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f000 fb1f 	bl	80090c4 <UART_WaitOnFlagUntilTimeout>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d005      	beq.n	8008a98 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2220      	movs	r2, #32
 8008a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008a94:	2303      	movs	r3, #3
 8008a96:	e03a      	b.n	8008b0e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10b      	bne.n	8008ab6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	881b      	ldrh	r3, [r3, #0]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008aac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	3302      	adds	r3, #2
 8008ab2:	61bb      	str	r3, [r7, #24]
 8008ab4:	e007      	b.n	8008ac6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	781a      	ldrb	r2, [r3, #0]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	3b01      	subs	r3, #1
 8008ace:	b29a      	uxth	r2, r3
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1cb      	bne.n	8008a76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	2140      	movs	r1, #64	@ 0x40
 8008ae8:	68f8      	ldr	r0, [r7, #12]
 8008aea:	f000 faeb 	bl	80090c4 <UART_WaitOnFlagUntilTimeout>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d005      	beq.n	8008b00 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2220      	movs	r2, #32
 8008af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008afc:	2303      	movs	r3, #3
 8008afe:	e006      	b.n	8008b0e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2220      	movs	r2, #32
 8008b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	e000      	b.n	8008b0e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008b0c:	2302      	movs	r3, #2
  }
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3720      	adds	r7, #32
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b084      	sub	sp, #16
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	60f8      	str	r0, [r7, #12]
 8008b1e:	60b9      	str	r1, [r7, #8]
 8008b20:	4613      	mov	r3, r2
 8008b22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	2b20      	cmp	r3, #32
 8008b2e:	d112      	bne.n	8008b56 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d002      	beq.n	8008b3c <HAL_UART_Receive_IT+0x26>
 8008b36:	88fb      	ldrh	r3, [r7, #6]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d101      	bne.n	8008b40 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e00b      	b.n	8008b58 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2200      	movs	r2, #0
 8008b44:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008b46:	88fb      	ldrh	r3, [r7, #6]
 8008b48:	461a      	mov	r2, r3
 8008b4a:	68b9      	ldr	r1, [r7, #8]
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	f000 fb12 	bl	8009176 <UART_Start_Receive_IT>
 8008b52:	4603      	mov	r3, r0
 8008b54:	e000      	b.n	8008b58 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008b56:	2302      	movs	r3, #2
  }
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3710      	adds	r7, #16
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b0ba      	sub	sp, #232	@ 0xe8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	695b      	ldr	r3, [r3, #20]
 8008b82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008b86:	2300      	movs	r3, #0
 8008b88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b96:	f003 030f 	and.w	r3, r3, #15
 8008b9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008b9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d10f      	bne.n	8008bc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008baa:	f003 0320 	and.w	r3, r3, #32
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d009      	beq.n	8008bc6 <HAL_UART_IRQHandler+0x66>
 8008bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bb6:	f003 0320 	and.w	r3, r3, #32
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d003      	beq.n	8008bc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 fbf2 	bl	80093a8 <UART_Receive_IT>
      return;
 8008bc4:	e25b      	b.n	800907e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008bc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	f000 80de 	beq.w	8008d8c <HAL_UART_IRQHandler+0x22c>
 8008bd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bd4:	f003 0301 	and.w	r3, r3, #1
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d106      	bne.n	8008bea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008be0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f000 80d1 	beq.w	8008d8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bee:	f003 0301 	and.w	r3, r3, #1
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00b      	beq.n	8008c0e <HAL_UART_IRQHandler+0xae>
 8008bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d005      	beq.n	8008c0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c06:	f043 0201 	orr.w	r2, r3, #1
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c12:	f003 0304 	and.w	r3, r3, #4
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00b      	beq.n	8008c32 <HAL_UART_IRQHandler+0xd2>
 8008c1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c1e:	f003 0301 	and.w	r3, r3, #1
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d005      	beq.n	8008c32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c2a:	f043 0202 	orr.w	r2, r3, #2
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c36:	f003 0302 	and.w	r3, r3, #2
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00b      	beq.n	8008c56 <HAL_UART_IRQHandler+0xf6>
 8008c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c42:	f003 0301 	and.w	r3, r3, #1
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d005      	beq.n	8008c56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c4e:	f043 0204 	orr.w	r2, r3, #4
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c5a:	f003 0308 	and.w	r3, r3, #8
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d011      	beq.n	8008c86 <HAL_UART_IRQHandler+0x126>
 8008c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c66:	f003 0320 	and.w	r3, r3, #32
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d105      	bne.n	8008c7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c72:	f003 0301 	and.w	r3, r3, #1
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d005      	beq.n	8008c86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c7e:	f043 0208 	orr.w	r2, r3, #8
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f000 81f2 	beq.w	8009074 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c94:	f003 0320 	and.w	r3, r3, #32
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d008      	beq.n	8008cae <HAL_UART_IRQHandler+0x14e>
 8008c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ca0:	f003 0320 	and.w	r3, r3, #32
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d002      	beq.n	8008cae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fb7d 	bl	80093a8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	695b      	ldr	r3, [r3, #20]
 8008cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cb8:	2b40      	cmp	r3, #64	@ 0x40
 8008cba:	bf0c      	ite	eq
 8008cbc:	2301      	moveq	r3, #1
 8008cbe:	2300      	movne	r3, #0
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cca:	f003 0308 	and.w	r3, r3, #8
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d103      	bne.n	8008cda <HAL_UART_IRQHandler+0x17a>
 8008cd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d04f      	beq.n	8008d7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 fa85 	bl	80091ea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	695b      	ldr	r3, [r3, #20]
 8008ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cea:	2b40      	cmp	r3, #64	@ 0x40
 8008cec:	d141      	bne.n	8008d72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	3314      	adds	r3, #20
 8008cf4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008cfc:	e853 3f00 	ldrex	r3, [r3]
 8008d00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008d04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008d08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	3314      	adds	r3, #20
 8008d16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008d1a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008d1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008d26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008d2a:	e841 2300 	strex	r3, r2, [r1]
 8008d2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008d32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d1d9      	bne.n	8008cee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d013      	beq.n	8008d6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d46:	4a7e      	ldr	r2, [pc, #504]	@ (8008f40 <HAL_UART_IRQHandler+0x3e0>)
 8008d48:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7f9 fd80 	bl	8002854 <HAL_DMA_Abort_IT>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d016      	beq.n	8008d88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008d64:	4610      	mov	r0, r2
 8008d66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d68:	e00e      	b.n	8008d88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 f994 	bl	8009098 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d70:	e00a      	b.n	8008d88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 f990 	bl	8009098 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d78:	e006      	b.n	8008d88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f98c 	bl	8009098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008d86:	e175      	b.n	8009074 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d88:	bf00      	nop
    return;
 8008d8a:	e173      	b.n	8009074 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	f040 814f 	bne.w	8009034 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d9a:	f003 0310 	and.w	r3, r3, #16
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	f000 8148 	beq.w	8009034 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008da8:	f003 0310 	and.w	r3, r3, #16
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	f000 8141 	beq.w	8009034 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008db2:	2300      	movs	r3, #0
 8008db4:	60bb      	str	r3, [r7, #8]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	60bb      	str	r3, [r7, #8]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	60bb      	str	r3, [r7, #8]
 8008dc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	695b      	ldr	r3, [r3, #20]
 8008dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dd2:	2b40      	cmp	r3, #64	@ 0x40
 8008dd4:	f040 80b6 	bne.w	8008f44 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008de4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f000 8145 	beq.w	8009078 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008df2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008df6:	429a      	cmp	r2, r3
 8008df8:	f080 813e 	bcs.w	8009078 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e02:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e08:	69db      	ldr	r3, [r3, #28]
 8008e0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e0e:	f000 8088 	beq.w	8008f22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	330c      	adds	r3, #12
 8008e18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008e20:	e853 3f00 	ldrex	r3, [r3]
 8008e24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008e28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008e2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	330c      	adds	r3, #12
 8008e3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008e3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008e42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e46:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008e4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008e4e:	e841 2300 	strex	r3, r2, [r1]
 8008e52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008e56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d1d9      	bne.n	8008e12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	3314      	adds	r3, #20
 8008e64:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e68:	e853 3f00 	ldrex	r3, [r3]
 8008e6c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008e6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e70:	f023 0301 	bic.w	r3, r3, #1
 8008e74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	3314      	adds	r3, #20
 8008e7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008e82:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008e86:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e88:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008e8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008e8e:	e841 2300 	strex	r3, r2, [r1]
 8008e92:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008e94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d1e1      	bne.n	8008e5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	3314      	adds	r3, #20
 8008ea0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ea4:	e853 3f00 	ldrex	r3, [r3]
 8008ea8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008eaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008eac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008eb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	3314      	adds	r3, #20
 8008eba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008ebe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008ec0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008ec4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008ec6:	e841 2300 	strex	r3, r2, [r1]
 8008eca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008ecc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1e3      	bne.n	8008e9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2220      	movs	r2, #32
 8008ed6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	330c      	adds	r3, #12
 8008ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008eea:	e853 3f00 	ldrex	r3, [r3]
 8008eee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008ef0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ef2:	f023 0310 	bic.w	r3, r3, #16
 8008ef6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	330c      	adds	r3, #12
 8008f00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008f04:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008f06:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f0c:	e841 2300 	strex	r3, r2, [r1]
 8008f10:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008f12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1e3      	bne.n	8008ee0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f7f9 fc29 	bl	8002774 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2202      	movs	r2, #2
 8008f26:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	1ad3      	subs	r3, r2, r3
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	4619      	mov	r1, r3
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 f8b7 	bl	80090ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008f3e:	e09b      	b.n	8009078 <HAL_UART_IRQHandler+0x518>
 8008f40:	080092b1 	.word	0x080092b1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	1ad3      	subs	r3, r2, r3
 8008f50:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	f000 808e 	beq.w	800907c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008f60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	f000 8089 	beq.w	800907c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	330c      	adds	r3, #12
 8008f70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f74:	e853 3f00 	ldrex	r3, [r3]
 8008f78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	330c      	adds	r3, #12
 8008f8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008f8e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008f90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f96:	e841 2300 	strex	r3, r2, [r1]
 8008f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1e3      	bne.n	8008f6a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	3314      	adds	r3, #20
 8008fa8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fac:	e853 3f00 	ldrex	r3, [r3]
 8008fb0:	623b      	str	r3, [r7, #32]
   return(result);
 8008fb2:	6a3b      	ldr	r3, [r7, #32]
 8008fb4:	f023 0301 	bic.w	r3, r3, #1
 8008fb8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	3314      	adds	r3, #20
 8008fc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008fc6:	633a      	str	r2, [r7, #48]	@ 0x30
 8008fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008fcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fce:	e841 2300 	strex	r3, r2, [r1]
 8008fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d1e3      	bne.n	8008fa2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2220      	movs	r2, #32
 8008fde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	330c      	adds	r3, #12
 8008fee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	e853 3f00 	ldrex	r3, [r3]
 8008ff6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f023 0310 	bic.w	r3, r3, #16
 8008ffe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	330c      	adds	r3, #12
 8009008:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800900c:	61fa      	str	r2, [r7, #28]
 800900e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009010:	69b9      	ldr	r1, [r7, #24]
 8009012:	69fa      	ldr	r2, [r7, #28]
 8009014:	e841 2300 	strex	r3, r2, [r1]
 8009018:	617b      	str	r3, [r7, #20]
   return(result);
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d1e3      	bne.n	8008fe8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2202      	movs	r2, #2
 8009024:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009026:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800902a:	4619      	mov	r1, r3
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 f83d 	bl	80090ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009032:	e023      	b.n	800907c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009038:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800903c:	2b00      	cmp	r3, #0
 800903e:	d009      	beq.n	8009054 <HAL_UART_IRQHandler+0x4f4>
 8009040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009044:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009048:	2b00      	cmp	r3, #0
 800904a:	d003      	beq.n	8009054 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 f943 	bl	80092d8 <UART_Transmit_IT>
    return;
 8009052:	e014      	b.n	800907e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800905c:	2b00      	cmp	r3, #0
 800905e:	d00e      	beq.n	800907e <HAL_UART_IRQHandler+0x51e>
 8009060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009068:	2b00      	cmp	r3, #0
 800906a:	d008      	beq.n	800907e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 f983 	bl	8009378 <UART_EndTransmit_IT>
    return;
 8009072:	e004      	b.n	800907e <HAL_UART_IRQHandler+0x51e>
    return;
 8009074:	bf00      	nop
 8009076:	e002      	b.n	800907e <HAL_UART_IRQHandler+0x51e>
      return;
 8009078:	bf00      	nop
 800907a:	e000      	b.n	800907e <HAL_UART_IRQHandler+0x51e>
      return;
 800907c:	bf00      	nop
  }
}
 800907e:	37e8      	adds	r7, #232	@ 0xe8
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800908c:	bf00      	nop
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	460b      	mov	r3, r1
 80090b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80090b8:	bf00      	nop
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b086      	sub	sp, #24
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	603b      	str	r3, [r7, #0]
 80090d0:	4613      	mov	r3, r2
 80090d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090d4:	e03b      	b.n	800914e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090d6:	6a3b      	ldr	r3, [r7, #32]
 80090d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090dc:	d037      	beq.n	800914e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090de:	f7f9 f901 	bl	80022e4 <HAL_GetTick>
 80090e2:	4602      	mov	r2, r0
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	1ad3      	subs	r3, r2, r3
 80090e8:	6a3a      	ldr	r2, [r7, #32]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d302      	bcc.n	80090f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80090ee:	6a3b      	ldr	r3, [r7, #32]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d101      	bne.n	80090f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80090f4:	2303      	movs	r3, #3
 80090f6:	e03a      	b.n	800916e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	f003 0304 	and.w	r3, r3, #4
 8009102:	2b00      	cmp	r3, #0
 8009104:	d023      	beq.n	800914e <UART_WaitOnFlagUntilTimeout+0x8a>
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	2b80      	cmp	r3, #128	@ 0x80
 800910a:	d020      	beq.n	800914e <UART_WaitOnFlagUntilTimeout+0x8a>
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	2b40      	cmp	r3, #64	@ 0x40
 8009110:	d01d      	beq.n	800914e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f003 0308 	and.w	r3, r3, #8
 800911c:	2b08      	cmp	r3, #8
 800911e:	d116      	bne.n	800914e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009120:	2300      	movs	r3, #0
 8009122:	617b      	str	r3, [r7, #20]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	617b      	str	r3, [r7, #20]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	617b      	str	r3, [r7, #20]
 8009134:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009136:	68f8      	ldr	r0, [r7, #12]
 8009138:	f000 f857 	bl	80091ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2208      	movs	r2, #8
 8009140:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2200      	movs	r2, #0
 8009146:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800914a:	2301      	movs	r3, #1
 800914c:	e00f      	b.n	800916e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	4013      	ands	r3, r2
 8009158:	68ba      	ldr	r2, [r7, #8]
 800915a:	429a      	cmp	r2, r3
 800915c:	bf0c      	ite	eq
 800915e:	2301      	moveq	r3, #1
 8009160:	2300      	movne	r3, #0
 8009162:	b2db      	uxtb	r3, r3
 8009164:	461a      	mov	r2, r3
 8009166:	79fb      	ldrb	r3, [r7, #7]
 8009168:	429a      	cmp	r2, r3
 800916a:	d0b4      	beq.n	80090d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	3718      	adds	r7, #24
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009176:	b480      	push	{r7}
 8009178:	b085      	sub	sp, #20
 800917a:	af00      	add	r7, sp, #0
 800917c:	60f8      	str	r0, [r7, #12]
 800917e:	60b9      	str	r1, [r7, #8]
 8009180:	4613      	mov	r3, r2
 8009182:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	68ba      	ldr	r2, [r7, #8]
 8009188:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	88fa      	ldrh	r2, [r7, #6]
 800918e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	88fa      	ldrh	r2, [r7, #6]
 8009194:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2200      	movs	r2, #0
 800919a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2222      	movs	r2, #34	@ 0x22
 80091a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	691b      	ldr	r3, [r3, #16]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d007      	beq.n	80091bc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	68da      	ldr	r2, [r3, #12]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80091ba:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	695a      	ldr	r2, [r3, #20]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f042 0201 	orr.w	r2, r2, #1
 80091ca:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68da      	ldr	r2, [r3, #12]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f042 0220 	orr.w	r2, r2, #32
 80091da:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3714      	adds	r7, #20
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr

080091ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091ea:	b480      	push	{r7}
 80091ec:	b095      	sub	sp, #84	@ 0x54
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	330c      	adds	r3, #12
 80091f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091fc:	e853 3f00 	ldrex	r3, [r3]
 8009200:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009204:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009208:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	330c      	adds	r3, #12
 8009210:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009212:	643a      	str	r2, [r7, #64]	@ 0x40
 8009214:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009216:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009218:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800921a:	e841 2300 	strex	r3, r2, [r1]
 800921e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009222:	2b00      	cmp	r3, #0
 8009224:	d1e5      	bne.n	80091f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	3314      	adds	r3, #20
 800922c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922e:	6a3b      	ldr	r3, [r7, #32]
 8009230:	e853 3f00 	ldrex	r3, [r3]
 8009234:	61fb      	str	r3, [r7, #28]
   return(result);
 8009236:	69fb      	ldr	r3, [r7, #28]
 8009238:	f023 0301 	bic.w	r3, r3, #1
 800923c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	3314      	adds	r3, #20
 8009244:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009246:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009248:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800924c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800924e:	e841 2300 	strex	r3, r2, [r1]
 8009252:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009256:	2b00      	cmp	r3, #0
 8009258:	d1e5      	bne.n	8009226 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800925e:	2b01      	cmp	r3, #1
 8009260:	d119      	bne.n	8009296 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	330c      	adds	r3, #12
 8009268:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	e853 3f00 	ldrex	r3, [r3]
 8009270:	60bb      	str	r3, [r7, #8]
   return(result);
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	f023 0310 	bic.w	r3, r3, #16
 8009278:	647b      	str	r3, [r7, #68]	@ 0x44
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	330c      	adds	r3, #12
 8009280:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009282:	61ba      	str	r2, [r7, #24]
 8009284:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009286:	6979      	ldr	r1, [r7, #20]
 8009288:	69ba      	ldr	r2, [r7, #24]
 800928a:	e841 2300 	strex	r3, r2, [r1]
 800928e:	613b      	str	r3, [r7, #16]
   return(result);
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d1e5      	bne.n	8009262 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2220      	movs	r2, #32
 800929a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80092a4:	bf00      	nop
 80092a6:	3754      	adds	r7, #84	@ 0x54
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2200      	movs	r2, #0
 80092c2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2200      	movs	r2, #0
 80092c8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092ca:	68f8      	ldr	r0, [r7, #12]
 80092cc:	f7ff fee4 	bl	8009098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092d0:	bf00      	nop
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80092d8:	b480      	push	{r7}
 80092da:	b085      	sub	sp, #20
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	2b21      	cmp	r3, #33	@ 0x21
 80092ea:	d13e      	bne.n	800936a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092f4:	d114      	bne.n	8009320 <UART_Transmit_IT+0x48>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d110      	bne.n	8009320 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6a1b      	ldr	r3, [r3, #32]
 8009302:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	881b      	ldrh	r3, [r3, #0]
 8009308:	461a      	mov	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009312:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6a1b      	ldr	r3, [r3, #32]
 8009318:	1c9a      	adds	r2, r3, #2
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	621a      	str	r2, [r3, #32]
 800931e:	e008      	b.n	8009332 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6a1b      	ldr	r3, [r3, #32]
 8009324:	1c59      	adds	r1, r3, #1
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	6211      	str	r1, [r2, #32]
 800932a:	781a      	ldrb	r2, [r3, #0]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009336:	b29b      	uxth	r3, r3
 8009338:	3b01      	subs	r3, #1
 800933a:	b29b      	uxth	r3, r3
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	4619      	mov	r1, r3
 8009340:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009342:	2b00      	cmp	r3, #0
 8009344:	d10f      	bne.n	8009366 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68da      	ldr	r2, [r3, #12]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009354:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	68da      	ldr	r2, [r3, #12]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009364:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009366:	2300      	movs	r3, #0
 8009368:	e000      	b.n	800936c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800936a:	2302      	movs	r3, #2
  }
}
 800936c:	4618      	mov	r0, r3
 800936e:	3714      	adds	r7, #20
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	68da      	ldr	r2, [r3, #12]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800938e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2220      	movs	r2, #32
 8009394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f7ff fe73 	bl	8009084 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800939e:	2300      	movs	r3, #0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3708      	adds	r7, #8
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b08c      	sub	sp, #48	@ 0x30
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	2b22      	cmp	r3, #34	@ 0x22
 80093ba:	f040 80ae 	bne.w	800951a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093c6:	d117      	bne.n	80093f8 <UART_Receive_IT+0x50>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	691b      	ldr	r3, [r3, #16]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d113      	bne.n	80093f8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80093d0:	2300      	movs	r3, #0
 80093d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093f0:	1c9a      	adds	r2, r3, #2
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80093f6:	e026      	b.n	8009446 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80093fe:	2300      	movs	r3, #0
 8009400:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800940a:	d007      	beq.n	800941c <UART_Receive_IT+0x74>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d10a      	bne.n	800942a <UART_Receive_IT+0x82>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	691b      	ldr	r3, [r3, #16]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d106      	bne.n	800942a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	b2da      	uxtb	r2, r3
 8009424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009426:	701a      	strb	r2, [r3, #0]
 8009428:	e008      	b.n	800943c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	b2db      	uxtb	r3, r3
 8009432:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009436:	b2da      	uxtb	r2, r3
 8009438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800943a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009440:	1c5a      	adds	r2, r3, #1
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800944a:	b29b      	uxth	r3, r3
 800944c:	3b01      	subs	r3, #1
 800944e:	b29b      	uxth	r3, r3
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	4619      	mov	r1, r3
 8009454:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009456:	2b00      	cmp	r3, #0
 8009458:	d15d      	bne.n	8009516 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68da      	ldr	r2, [r3, #12]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f022 0220 	bic.w	r2, r2, #32
 8009468:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	68da      	ldr	r2, [r3, #12]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009478:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	695a      	ldr	r2, [r3, #20]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f022 0201 	bic.w	r2, r2, #1
 8009488:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2220      	movs	r2, #32
 800948e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800949c:	2b01      	cmp	r3, #1
 800949e:	d135      	bne.n	800950c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	330c      	adds	r3, #12
 80094ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	e853 3f00 	ldrex	r3, [r3]
 80094b4:	613b      	str	r3, [r7, #16]
   return(result);
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	f023 0310 	bic.w	r3, r3, #16
 80094bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	330c      	adds	r3, #12
 80094c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094c6:	623a      	str	r2, [r7, #32]
 80094c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ca:	69f9      	ldr	r1, [r7, #28]
 80094cc:	6a3a      	ldr	r2, [r7, #32]
 80094ce:	e841 2300 	strex	r3, r2, [r1]
 80094d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d1e5      	bne.n	80094a6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f003 0310 	and.w	r3, r3, #16
 80094e4:	2b10      	cmp	r3, #16
 80094e6:	d10a      	bne.n	80094fe <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80094e8:	2300      	movs	r3, #0
 80094ea:	60fb      	str	r3, [r7, #12]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	60fb      	str	r3, [r7, #12]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	60fb      	str	r3, [r7, #12]
 80094fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009502:	4619      	mov	r1, r3
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f7ff fdd1 	bl	80090ac <HAL_UARTEx_RxEventCallback>
 800950a:	e002      	b.n	8009512 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f7f7 fd79 	bl	8001004 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009512:	2300      	movs	r3, #0
 8009514:	e002      	b.n	800951c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009516:	2300      	movs	r3, #0
 8009518:	e000      	b.n	800951c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800951a:	2302      	movs	r3, #2
  }
}
 800951c:	4618      	mov	r0, r3
 800951e:	3730      	adds	r7, #48	@ 0x30
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009524:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009528:	b0c0      	sub	sp, #256	@ 0x100
 800952a:	af00      	add	r7, sp, #0
 800952c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	691b      	ldr	r3, [r3, #16]
 8009538:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800953c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009540:	68d9      	ldr	r1, [r3, #12]
 8009542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	ea40 0301 	orr.w	r3, r0, r1
 800954c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800954e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009552:	689a      	ldr	r2, [r3, #8]
 8009554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	431a      	orrs	r2, r3
 800955c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009560:	695b      	ldr	r3, [r3, #20]
 8009562:	431a      	orrs	r2, r3
 8009564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009568:	69db      	ldr	r3, [r3, #28]
 800956a:	4313      	orrs	r3, r2
 800956c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800957c:	f021 010c 	bic.w	r1, r1, #12
 8009580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800958a:	430b      	orrs	r3, r1
 800958c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800958e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	695b      	ldr	r3, [r3, #20]
 8009596:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800959a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800959e:	6999      	ldr	r1, [r3, #24]
 80095a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	ea40 0301 	orr.w	r3, r0, r1
 80095aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80095ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	4b8f      	ldr	r3, [pc, #572]	@ (80097f0 <UART_SetConfig+0x2cc>)
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d005      	beq.n	80095c4 <UART_SetConfig+0xa0>
 80095b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	4b8d      	ldr	r3, [pc, #564]	@ (80097f4 <UART_SetConfig+0x2d0>)
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d104      	bne.n	80095ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80095c4:	f7fe fbd4 	bl	8007d70 <HAL_RCC_GetPCLK2Freq>
 80095c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80095cc:	e003      	b.n	80095d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80095ce:	f7fe fbbb 	bl	8007d48 <HAL_RCC_GetPCLK1Freq>
 80095d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095da:	69db      	ldr	r3, [r3, #28]
 80095dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095e0:	f040 810c 	bne.w	80097fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80095e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80095e8:	2200      	movs	r2, #0
 80095ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80095ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80095f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80095f6:	4622      	mov	r2, r4
 80095f8:	462b      	mov	r3, r5
 80095fa:	1891      	adds	r1, r2, r2
 80095fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80095fe:	415b      	adcs	r3, r3
 8009600:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009602:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009606:	4621      	mov	r1, r4
 8009608:	eb12 0801 	adds.w	r8, r2, r1
 800960c:	4629      	mov	r1, r5
 800960e:	eb43 0901 	adc.w	r9, r3, r1
 8009612:	f04f 0200 	mov.w	r2, #0
 8009616:	f04f 0300 	mov.w	r3, #0
 800961a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800961e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009622:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009626:	4690      	mov	r8, r2
 8009628:	4699      	mov	r9, r3
 800962a:	4623      	mov	r3, r4
 800962c:	eb18 0303 	adds.w	r3, r8, r3
 8009630:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009634:	462b      	mov	r3, r5
 8009636:	eb49 0303 	adc.w	r3, r9, r3
 800963a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800963e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800964a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800964e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009652:	460b      	mov	r3, r1
 8009654:	18db      	adds	r3, r3, r3
 8009656:	653b      	str	r3, [r7, #80]	@ 0x50
 8009658:	4613      	mov	r3, r2
 800965a:	eb42 0303 	adc.w	r3, r2, r3
 800965e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009660:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009664:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009668:	f7f6 fe0a 	bl	8000280 <__aeabi_uldivmod>
 800966c:	4602      	mov	r2, r0
 800966e:	460b      	mov	r3, r1
 8009670:	4b61      	ldr	r3, [pc, #388]	@ (80097f8 <UART_SetConfig+0x2d4>)
 8009672:	fba3 2302 	umull	r2, r3, r3, r2
 8009676:	095b      	lsrs	r3, r3, #5
 8009678:	011c      	lsls	r4, r3, #4
 800967a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800967e:	2200      	movs	r2, #0
 8009680:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009684:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009688:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800968c:	4642      	mov	r2, r8
 800968e:	464b      	mov	r3, r9
 8009690:	1891      	adds	r1, r2, r2
 8009692:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009694:	415b      	adcs	r3, r3
 8009696:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009698:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800969c:	4641      	mov	r1, r8
 800969e:	eb12 0a01 	adds.w	sl, r2, r1
 80096a2:	4649      	mov	r1, r9
 80096a4:	eb43 0b01 	adc.w	fp, r3, r1
 80096a8:	f04f 0200 	mov.w	r2, #0
 80096ac:	f04f 0300 	mov.w	r3, #0
 80096b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80096b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80096b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80096bc:	4692      	mov	sl, r2
 80096be:	469b      	mov	fp, r3
 80096c0:	4643      	mov	r3, r8
 80096c2:	eb1a 0303 	adds.w	r3, sl, r3
 80096c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80096ca:	464b      	mov	r3, r9
 80096cc:	eb4b 0303 	adc.w	r3, fp, r3
 80096d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80096d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80096e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80096e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80096e8:	460b      	mov	r3, r1
 80096ea:	18db      	adds	r3, r3, r3
 80096ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80096ee:	4613      	mov	r3, r2
 80096f0:	eb42 0303 	adc.w	r3, r2, r3
 80096f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80096f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80096fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80096fe:	f7f6 fdbf 	bl	8000280 <__aeabi_uldivmod>
 8009702:	4602      	mov	r2, r0
 8009704:	460b      	mov	r3, r1
 8009706:	4611      	mov	r1, r2
 8009708:	4b3b      	ldr	r3, [pc, #236]	@ (80097f8 <UART_SetConfig+0x2d4>)
 800970a:	fba3 2301 	umull	r2, r3, r3, r1
 800970e:	095b      	lsrs	r3, r3, #5
 8009710:	2264      	movs	r2, #100	@ 0x64
 8009712:	fb02 f303 	mul.w	r3, r2, r3
 8009716:	1acb      	subs	r3, r1, r3
 8009718:	00db      	lsls	r3, r3, #3
 800971a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800971e:	4b36      	ldr	r3, [pc, #216]	@ (80097f8 <UART_SetConfig+0x2d4>)
 8009720:	fba3 2302 	umull	r2, r3, r3, r2
 8009724:	095b      	lsrs	r3, r3, #5
 8009726:	005b      	lsls	r3, r3, #1
 8009728:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800972c:	441c      	add	r4, r3
 800972e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009732:	2200      	movs	r2, #0
 8009734:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009738:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800973c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009740:	4642      	mov	r2, r8
 8009742:	464b      	mov	r3, r9
 8009744:	1891      	adds	r1, r2, r2
 8009746:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009748:	415b      	adcs	r3, r3
 800974a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800974c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009750:	4641      	mov	r1, r8
 8009752:	1851      	adds	r1, r2, r1
 8009754:	6339      	str	r1, [r7, #48]	@ 0x30
 8009756:	4649      	mov	r1, r9
 8009758:	414b      	adcs	r3, r1
 800975a:	637b      	str	r3, [r7, #52]	@ 0x34
 800975c:	f04f 0200 	mov.w	r2, #0
 8009760:	f04f 0300 	mov.w	r3, #0
 8009764:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009768:	4659      	mov	r1, fp
 800976a:	00cb      	lsls	r3, r1, #3
 800976c:	4651      	mov	r1, sl
 800976e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009772:	4651      	mov	r1, sl
 8009774:	00ca      	lsls	r2, r1, #3
 8009776:	4610      	mov	r0, r2
 8009778:	4619      	mov	r1, r3
 800977a:	4603      	mov	r3, r0
 800977c:	4642      	mov	r2, r8
 800977e:	189b      	adds	r3, r3, r2
 8009780:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009784:	464b      	mov	r3, r9
 8009786:	460a      	mov	r2, r1
 8009788:	eb42 0303 	adc.w	r3, r2, r3
 800978c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800979c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80097a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80097a4:	460b      	mov	r3, r1
 80097a6:	18db      	adds	r3, r3, r3
 80097a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80097aa:	4613      	mov	r3, r2
 80097ac:	eb42 0303 	adc.w	r3, r2, r3
 80097b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80097b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80097b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80097ba:	f7f6 fd61 	bl	8000280 <__aeabi_uldivmod>
 80097be:	4602      	mov	r2, r0
 80097c0:	460b      	mov	r3, r1
 80097c2:	4b0d      	ldr	r3, [pc, #52]	@ (80097f8 <UART_SetConfig+0x2d4>)
 80097c4:	fba3 1302 	umull	r1, r3, r3, r2
 80097c8:	095b      	lsrs	r3, r3, #5
 80097ca:	2164      	movs	r1, #100	@ 0x64
 80097cc:	fb01 f303 	mul.w	r3, r1, r3
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	00db      	lsls	r3, r3, #3
 80097d4:	3332      	adds	r3, #50	@ 0x32
 80097d6:	4a08      	ldr	r2, [pc, #32]	@ (80097f8 <UART_SetConfig+0x2d4>)
 80097d8:	fba2 2303 	umull	r2, r3, r2, r3
 80097dc:	095b      	lsrs	r3, r3, #5
 80097de:	f003 0207 	and.w	r2, r3, #7
 80097e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4422      	add	r2, r4
 80097ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80097ec:	e106      	b.n	80099fc <UART_SetConfig+0x4d8>
 80097ee:	bf00      	nop
 80097f0:	40011000 	.word	0x40011000
 80097f4:	40011400 	.word	0x40011400
 80097f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80097fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009800:	2200      	movs	r2, #0
 8009802:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009806:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800980a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800980e:	4642      	mov	r2, r8
 8009810:	464b      	mov	r3, r9
 8009812:	1891      	adds	r1, r2, r2
 8009814:	6239      	str	r1, [r7, #32]
 8009816:	415b      	adcs	r3, r3
 8009818:	627b      	str	r3, [r7, #36]	@ 0x24
 800981a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800981e:	4641      	mov	r1, r8
 8009820:	1854      	adds	r4, r2, r1
 8009822:	4649      	mov	r1, r9
 8009824:	eb43 0501 	adc.w	r5, r3, r1
 8009828:	f04f 0200 	mov.w	r2, #0
 800982c:	f04f 0300 	mov.w	r3, #0
 8009830:	00eb      	lsls	r3, r5, #3
 8009832:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009836:	00e2      	lsls	r2, r4, #3
 8009838:	4614      	mov	r4, r2
 800983a:	461d      	mov	r5, r3
 800983c:	4643      	mov	r3, r8
 800983e:	18e3      	adds	r3, r4, r3
 8009840:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009844:	464b      	mov	r3, r9
 8009846:	eb45 0303 	adc.w	r3, r5, r3
 800984a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800984e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800985a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800985e:	f04f 0200 	mov.w	r2, #0
 8009862:	f04f 0300 	mov.w	r3, #0
 8009866:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800986a:	4629      	mov	r1, r5
 800986c:	008b      	lsls	r3, r1, #2
 800986e:	4621      	mov	r1, r4
 8009870:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009874:	4621      	mov	r1, r4
 8009876:	008a      	lsls	r2, r1, #2
 8009878:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800987c:	f7f6 fd00 	bl	8000280 <__aeabi_uldivmod>
 8009880:	4602      	mov	r2, r0
 8009882:	460b      	mov	r3, r1
 8009884:	4b60      	ldr	r3, [pc, #384]	@ (8009a08 <UART_SetConfig+0x4e4>)
 8009886:	fba3 2302 	umull	r2, r3, r3, r2
 800988a:	095b      	lsrs	r3, r3, #5
 800988c:	011c      	lsls	r4, r3, #4
 800988e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009892:	2200      	movs	r2, #0
 8009894:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009898:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800989c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80098a0:	4642      	mov	r2, r8
 80098a2:	464b      	mov	r3, r9
 80098a4:	1891      	adds	r1, r2, r2
 80098a6:	61b9      	str	r1, [r7, #24]
 80098a8:	415b      	adcs	r3, r3
 80098aa:	61fb      	str	r3, [r7, #28]
 80098ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80098b0:	4641      	mov	r1, r8
 80098b2:	1851      	adds	r1, r2, r1
 80098b4:	6139      	str	r1, [r7, #16]
 80098b6:	4649      	mov	r1, r9
 80098b8:	414b      	adcs	r3, r1
 80098ba:	617b      	str	r3, [r7, #20]
 80098bc:	f04f 0200 	mov.w	r2, #0
 80098c0:	f04f 0300 	mov.w	r3, #0
 80098c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80098c8:	4659      	mov	r1, fp
 80098ca:	00cb      	lsls	r3, r1, #3
 80098cc:	4651      	mov	r1, sl
 80098ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098d2:	4651      	mov	r1, sl
 80098d4:	00ca      	lsls	r2, r1, #3
 80098d6:	4610      	mov	r0, r2
 80098d8:	4619      	mov	r1, r3
 80098da:	4603      	mov	r3, r0
 80098dc:	4642      	mov	r2, r8
 80098de:	189b      	adds	r3, r3, r2
 80098e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80098e4:	464b      	mov	r3, r9
 80098e6:	460a      	mov	r2, r1
 80098e8:	eb42 0303 	adc.w	r3, r2, r3
 80098ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80098f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80098fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80098fc:	f04f 0200 	mov.w	r2, #0
 8009900:	f04f 0300 	mov.w	r3, #0
 8009904:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009908:	4649      	mov	r1, r9
 800990a:	008b      	lsls	r3, r1, #2
 800990c:	4641      	mov	r1, r8
 800990e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009912:	4641      	mov	r1, r8
 8009914:	008a      	lsls	r2, r1, #2
 8009916:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800991a:	f7f6 fcb1 	bl	8000280 <__aeabi_uldivmod>
 800991e:	4602      	mov	r2, r0
 8009920:	460b      	mov	r3, r1
 8009922:	4611      	mov	r1, r2
 8009924:	4b38      	ldr	r3, [pc, #224]	@ (8009a08 <UART_SetConfig+0x4e4>)
 8009926:	fba3 2301 	umull	r2, r3, r3, r1
 800992a:	095b      	lsrs	r3, r3, #5
 800992c:	2264      	movs	r2, #100	@ 0x64
 800992e:	fb02 f303 	mul.w	r3, r2, r3
 8009932:	1acb      	subs	r3, r1, r3
 8009934:	011b      	lsls	r3, r3, #4
 8009936:	3332      	adds	r3, #50	@ 0x32
 8009938:	4a33      	ldr	r2, [pc, #204]	@ (8009a08 <UART_SetConfig+0x4e4>)
 800993a:	fba2 2303 	umull	r2, r3, r2, r3
 800993e:	095b      	lsrs	r3, r3, #5
 8009940:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009944:	441c      	add	r4, r3
 8009946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800994a:	2200      	movs	r2, #0
 800994c:	673b      	str	r3, [r7, #112]	@ 0x70
 800994e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009950:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009954:	4642      	mov	r2, r8
 8009956:	464b      	mov	r3, r9
 8009958:	1891      	adds	r1, r2, r2
 800995a:	60b9      	str	r1, [r7, #8]
 800995c:	415b      	adcs	r3, r3
 800995e:	60fb      	str	r3, [r7, #12]
 8009960:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009964:	4641      	mov	r1, r8
 8009966:	1851      	adds	r1, r2, r1
 8009968:	6039      	str	r1, [r7, #0]
 800996a:	4649      	mov	r1, r9
 800996c:	414b      	adcs	r3, r1
 800996e:	607b      	str	r3, [r7, #4]
 8009970:	f04f 0200 	mov.w	r2, #0
 8009974:	f04f 0300 	mov.w	r3, #0
 8009978:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800997c:	4659      	mov	r1, fp
 800997e:	00cb      	lsls	r3, r1, #3
 8009980:	4651      	mov	r1, sl
 8009982:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009986:	4651      	mov	r1, sl
 8009988:	00ca      	lsls	r2, r1, #3
 800998a:	4610      	mov	r0, r2
 800998c:	4619      	mov	r1, r3
 800998e:	4603      	mov	r3, r0
 8009990:	4642      	mov	r2, r8
 8009992:	189b      	adds	r3, r3, r2
 8009994:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009996:	464b      	mov	r3, r9
 8009998:	460a      	mov	r2, r1
 800999a:	eb42 0303 	adc.w	r3, r2, r3
 800999e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80099a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80099aa:	667a      	str	r2, [r7, #100]	@ 0x64
 80099ac:	f04f 0200 	mov.w	r2, #0
 80099b0:	f04f 0300 	mov.w	r3, #0
 80099b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80099b8:	4649      	mov	r1, r9
 80099ba:	008b      	lsls	r3, r1, #2
 80099bc:	4641      	mov	r1, r8
 80099be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099c2:	4641      	mov	r1, r8
 80099c4:	008a      	lsls	r2, r1, #2
 80099c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80099ca:	f7f6 fc59 	bl	8000280 <__aeabi_uldivmod>
 80099ce:	4602      	mov	r2, r0
 80099d0:	460b      	mov	r3, r1
 80099d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009a08 <UART_SetConfig+0x4e4>)
 80099d4:	fba3 1302 	umull	r1, r3, r3, r2
 80099d8:	095b      	lsrs	r3, r3, #5
 80099da:	2164      	movs	r1, #100	@ 0x64
 80099dc:	fb01 f303 	mul.w	r3, r1, r3
 80099e0:	1ad3      	subs	r3, r2, r3
 80099e2:	011b      	lsls	r3, r3, #4
 80099e4:	3332      	adds	r3, #50	@ 0x32
 80099e6:	4a08      	ldr	r2, [pc, #32]	@ (8009a08 <UART_SetConfig+0x4e4>)
 80099e8:	fba2 2303 	umull	r2, r3, r2, r3
 80099ec:	095b      	lsrs	r3, r3, #5
 80099ee:	f003 020f 	and.w	r2, r3, #15
 80099f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4422      	add	r2, r4
 80099fa:	609a      	str	r2, [r3, #8]
}
 80099fc:	bf00      	nop
 80099fe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009a02:	46bd      	mov	sp, r7
 8009a04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a08:	51eb851f 	.word	0x51eb851f

08009a0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009a0c:	b084      	sub	sp, #16
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b084      	sub	sp, #16
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
 8009a16:	f107 001c 	add.w	r0, r7, #28
 8009a1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009a1e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d123      	bne.n	8009a6e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a2a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	68db      	ldr	r3, [r3, #12]
 8009a36:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009a3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	68db      	ldr	r3, [r3, #12]
 8009a46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009a4e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d105      	bne.n	8009a62 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 f9dc 	bl	8009e20 <USB_CoreReset>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	73fb      	strb	r3, [r7, #15]
 8009a6c:	e01b      	b.n	8009aa6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 f9d0 	bl	8009e20 <USB_CoreReset>
 8009a80:	4603      	mov	r3, r0
 8009a82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009a84:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d106      	bne.n	8009a9a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a90:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	639a      	str	r2, [r3, #56]	@ 0x38
 8009a98:	e005      	b.n	8009aa6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a9e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009aa6:	7fbb      	ldrb	r3, [r7, #30]
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d10b      	bne.n	8009ac4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	f043 0206 	orr.w	r2, r3, #6
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	f043 0220 	orr.w	r2, r3, #32
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ad0:	b004      	add	sp, #16
 8009ad2:	4770      	bx	lr

08009ad4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	f043 0201 	orr.w	r2, r3, #1
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009ae8:	2300      	movs	r3, #0
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	370c      	adds	r7, #12
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr

08009af6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009af6:	b480      	push	{r7}
 8009af8:	b083      	sub	sp, #12
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	f023 0201 	bic.w	r2, r3, #1
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009b0a:	2300      	movs	r3, #0
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	460b      	mov	r3, r1
 8009b22:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009b24:	2300      	movs	r3, #0
 8009b26:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	68db      	ldr	r3, [r3, #12]
 8009b2c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009b34:	78fb      	ldrb	r3, [r7, #3]
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d115      	bne.n	8009b66 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009b46:	200a      	movs	r0, #10
 8009b48:	f7f8 fbd8 	bl	80022fc <HAL_Delay>
      ms += 10U;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	330a      	adds	r3, #10
 8009b50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 f956 	bl	8009e04 <USB_GetMode>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d01e      	beq.n	8009b9c <USB_SetCurrentMode+0x84>
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2bc7      	cmp	r3, #199	@ 0xc7
 8009b62:	d9f0      	bls.n	8009b46 <USB_SetCurrentMode+0x2e>
 8009b64:	e01a      	b.n	8009b9c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009b66:	78fb      	ldrb	r3, [r7, #3]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d115      	bne.n	8009b98 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009b78:	200a      	movs	r0, #10
 8009b7a:	f7f8 fbbf 	bl	80022fc <HAL_Delay>
      ms += 10U;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	330a      	adds	r3, #10
 8009b82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 f93d 	bl	8009e04 <USB_GetMode>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d005      	beq.n	8009b9c <USB_SetCurrentMode+0x84>
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2bc7      	cmp	r3, #199	@ 0xc7
 8009b94:	d9f0      	bls.n	8009b78 <USB_SetCurrentMode+0x60>
 8009b96:	e001      	b.n	8009b9c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	e005      	b.n	8009ba8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2bc8      	cmp	r3, #200	@ 0xc8
 8009ba0:	d101      	bne.n	8009ba6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e000      	b.n	8009ba8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009ba6:	2300      	movs	r3, #0
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3710      	adds	r7, #16
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b085      	sub	sp, #20
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009bca:	d901      	bls.n	8009bd0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009bcc:	2303      	movs	r3, #3
 8009bce:	e01b      	b.n	8009c08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	691b      	ldr	r3, [r3, #16]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	daf2      	bge.n	8009bbe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	019b      	lsls	r3, r3, #6
 8009be0:	f043 0220 	orr.w	r2, r3, #32
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	3301      	adds	r3, #1
 8009bec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009bf4:	d901      	bls.n	8009bfa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009bf6:	2303      	movs	r3, #3
 8009bf8:	e006      	b.n	8009c08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	691b      	ldr	r3, [r3, #16]
 8009bfe:	f003 0320 	and.w	r3, r3, #32
 8009c02:	2b20      	cmp	r3, #32
 8009c04:	d0f0      	beq.n	8009be8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009c06:	2300      	movs	r3, #0
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3714      	adds	r7, #20
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b085      	sub	sp, #20
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	3301      	adds	r3, #1
 8009c24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009c2c:	d901      	bls.n	8009c32 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009c2e:	2303      	movs	r3, #3
 8009c30:	e018      	b.n	8009c64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	691b      	ldr	r3, [r3, #16]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	daf2      	bge.n	8009c20 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2210      	movs	r2, #16
 8009c42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	3301      	adds	r3, #1
 8009c48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009c50:	d901      	bls.n	8009c56 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009c52:	2303      	movs	r3, #3
 8009c54:	e006      	b.n	8009c64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	691b      	ldr	r3, [r3, #16]
 8009c5a:	f003 0310 	and.w	r3, r3, #16
 8009c5e:	2b10      	cmp	r3, #16
 8009c60:	d0f0      	beq.n	8009c44 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009c62:	2300      	movs	r3, #0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3714      	adds	r7, #20
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b089      	sub	sp, #36	@ 0x24
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	4611      	mov	r1, r2
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	460b      	mov	r3, r1
 8009c80:	71fb      	strb	r3, [r7, #7]
 8009c82:	4613      	mov	r3, r2
 8009c84:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009c8e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d123      	bne.n	8009cde <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009c96:	88bb      	ldrh	r3, [r7, #4]
 8009c98:	3303      	adds	r3, #3
 8009c9a:	089b      	lsrs	r3, r3, #2
 8009c9c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	61bb      	str	r3, [r7, #24]
 8009ca2:	e018      	b.n	8009cd6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009ca4:	79fb      	ldrb	r3, [r7, #7]
 8009ca6:	031a      	lsls	r2, r3, #12
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	4413      	add	r3, r2
 8009cac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	3301      	adds	r3, #1
 8009cbc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009cc4:	69fb      	ldr	r3, [r7, #28]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	61bb      	str	r3, [r7, #24]
 8009cd6:	69ba      	ldr	r2, [r7, #24]
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d3e2      	bcc.n	8009ca4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009cde:	2300      	movs	r3, #0
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3724      	adds	r7, #36	@ 0x24
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b08b      	sub	sp, #44	@ 0x2c
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009d02:	88fb      	ldrh	r3, [r7, #6]
 8009d04:	089b      	lsrs	r3, r3, #2
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009d0a:	88fb      	ldrh	r3, [r7, #6]
 8009d0c:	f003 0303 	and.w	r3, r3, #3
 8009d10:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009d12:	2300      	movs	r3, #0
 8009d14:	623b      	str	r3, [r7, #32]
 8009d16:	e014      	b.n	8009d42 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d22:	601a      	str	r2, [r3, #0]
    pDest++;
 8009d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d26:	3301      	adds	r3, #1
 8009d28:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d32:	3301      	adds	r3, #1
 8009d34:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d38:	3301      	adds	r3, #1
 8009d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009d3c:	6a3b      	ldr	r3, [r7, #32]
 8009d3e:	3301      	adds	r3, #1
 8009d40:	623b      	str	r3, [r7, #32]
 8009d42:	6a3a      	ldr	r2, [r7, #32]
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d3e6      	bcc.n	8009d18 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009d4a:	8bfb      	ldrh	r3, [r7, #30]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d01e      	beq.n	8009d8e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009d50:	2300      	movs	r3, #0
 8009d52:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009d54:	69bb      	ldr	r3, [r7, #24]
 8009d56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	f107 0310 	add.w	r3, r7, #16
 8009d60:	6812      	ldr	r2, [r2, #0]
 8009d62:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009d64:	693a      	ldr	r2, [r7, #16]
 8009d66:	6a3b      	ldr	r3, [r7, #32]
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	00db      	lsls	r3, r3, #3
 8009d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8009d70:	b2da      	uxtb	r2, r3
 8009d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d74:	701a      	strb	r2, [r3, #0]
      i++;
 8009d76:	6a3b      	ldr	r3, [r7, #32]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	623b      	str	r3, [r7, #32]
      pDest++;
 8009d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d7e:	3301      	adds	r3, #1
 8009d80:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009d82:	8bfb      	ldrh	r3, [r7, #30]
 8009d84:	3b01      	subs	r3, #1
 8009d86:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009d88:	8bfb      	ldrh	r3, [r7, #30]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d1ea      	bne.n	8009d64 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	372c      	adds	r7, #44	@ 0x2c
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b085      	sub	sp, #20
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	695b      	ldr	r3, [r3, #20]
 8009da8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	699b      	ldr	r3, [r3, #24]
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	4013      	ands	r3, r2
 8009db2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009db4:	68fb      	ldr	r3, [r7, #12]
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3714      	adds	r7, #20
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr

08009dc2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8009dc2:	b480      	push	{r7}
 8009dc4:	b085      	sub	sp, #20
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
 8009dca:	460b      	mov	r3, r1
 8009dcc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8009dd2:	78fb      	ldrb	r3, [r7, #3]
 8009dd4:	015a      	lsls	r2, r3, #5
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	4413      	add	r3, r2
 8009dda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8009de2:	78fb      	ldrb	r3, [r7, #3]
 8009de4:	015a      	lsls	r2, r3, #5
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	4413      	add	r3, r2
 8009dea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009dee:	68db      	ldr	r3, [r3, #12]
 8009df0:	68ba      	ldr	r2, [r7, #8]
 8009df2:	4013      	ands	r3, r2
 8009df4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009df6:	68bb      	ldr	r3, [r7, #8]
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3714      	adds	r7, #20
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	695b      	ldr	r3, [r3, #20]
 8009e10:	f003 0301 	and.w	r3, r3, #1
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	370c      	adds	r7, #12
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b085      	sub	sp, #20
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	3301      	adds	r3, #1
 8009e30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e38:	d901      	bls.n	8009e3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009e3a:	2303      	movs	r3, #3
 8009e3c:	e01b      	b.n	8009e76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	691b      	ldr	r3, [r3, #16]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	daf2      	bge.n	8009e2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009e46:	2300      	movs	r3, #0
 8009e48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	f043 0201 	orr.w	r2, r3, #1
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	3301      	adds	r3, #1
 8009e5a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e62:	d901      	bls.n	8009e68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009e64:	2303      	movs	r3, #3
 8009e66:	e006      	b.n	8009e76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	691b      	ldr	r3, [r3, #16]
 8009e6c:	f003 0301 	and.w	r3, r3, #1
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d0f0      	beq.n	8009e56 <USB_CoreReset+0x36>

  return HAL_OK;
 8009e74:	2300      	movs	r3, #0
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3714      	adds	r7, #20
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr
	...

08009e84 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009e84:	b084      	sub	sp, #16
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b086      	sub	sp, #24
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
 8009e8e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009e92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009e96:	2300      	movs	r3, #0
 8009e98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eae:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eba:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ec6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	68db      	ldr	r3, [r3, #12]
 8009ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d119      	bne.n	8009f0e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009eda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d10a      	bne.n	8009ef8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	68fa      	ldr	r2, [r7, #12]
 8009eec:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009ef0:	f043 0304 	orr.w	r3, r3, #4
 8009ef4:	6013      	str	r3, [r2, #0]
 8009ef6:	e014      	b.n	8009f22 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	68fa      	ldr	r2, [r7, #12]
 8009f02:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009f06:	f023 0304 	bic.w	r3, r3, #4
 8009f0a:	6013      	str	r3, [r2, #0]
 8009f0c:	e009      	b.n	8009f22 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	68fa      	ldr	r2, [r7, #12]
 8009f18:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009f1c:	f023 0304 	bic.w	r3, r3, #4
 8009f20:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009f22:	2110      	movs	r1, #16
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f7ff fe43 	bl	8009bb0 <USB_FlushTxFifo>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d001      	beq.n	8009f34 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8009f30:	2301      	movs	r3, #1
 8009f32:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f7ff fe6d 	bl	8009c14 <USB_FlushRxFifo>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d001      	beq.n	8009f44 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8009f40:	2301      	movs	r3, #1
 8009f42:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009f44:	2300      	movs	r3, #0
 8009f46:	613b      	str	r3, [r7, #16]
 8009f48:	e015      	b.n	8009f76 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	015a      	lsls	r2, r3, #5
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	4413      	add	r3, r2
 8009f52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009f56:	461a      	mov	r2, r3
 8009f58:	f04f 33ff 	mov.w	r3, #4294967295
 8009f5c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	015a      	lsls	r2, r3, #5
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	4413      	add	r3, r2
 8009f66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	3301      	adds	r3, #1
 8009f74:	613b      	str	r3, [r7, #16]
 8009f76:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d3e3      	bcc.n	8009f4a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2200      	movs	r2, #0
 8009f86:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f8e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	4a18      	ldr	r2, [pc, #96]	@ (8009ff4 <USB_HostInit+0x170>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d10b      	bne.n	8009fb0 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009f9e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4a15      	ldr	r2, [pc, #84]	@ (8009ff8 <USB_HostInit+0x174>)
 8009fa4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	4a14      	ldr	r2, [pc, #80]	@ (8009ffc <USB_HostInit+0x178>)
 8009faa:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8009fae:	e009      	b.n	8009fc4 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2280      	movs	r2, #128	@ 0x80
 8009fb4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	4a11      	ldr	r2, [pc, #68]	@ (800a000 <USB_HostInit+0x17c>)
 8009fba:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	4a11      	ldr	r2, [pc, #68]	@ (800a004 <USB_HostInit+0x180>)
 8009fc0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009fc4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d105      	bne.n	8009fd8 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	699b      	ldr	r3, [r3, #24]
 8009fd0:	f043 0210 	orr.w	r2, r3, #16
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	699a      	ldr	r2, [r3, #24]
 8009fdc:	4b0a      	ldr	r3, [pc, #40]	@ (800a008 <USB_HostInit+0x184>)
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3718      	adds	r7, #24
 8009fea:	46bd      	mov	sp, r7
 8009fec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ff0:	b004      	add	sp, #16
 8009ff2:	4770      	bx	lr
 8009ff4:	40040000 	.word	0x40040000
 8009ff8:	01000200 	.word	0x01000200
 8009ffc:	00e00300 	.word	0x00e00300
 800a000:	00600080 	.word	0x00600080
 800a004:	004000e0 	.word	0x004000e0
 800a008:	a3200008 	.word	0xa3200008

0800a00c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	460b      	mov	r3, r1
 800a016:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a02a:	f023 0303 	bic.w	r3, r3, #3
 800a02e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a036:	681a      	ldr	r2, [r3, #0]
 800a038:	78fb      	ldrb	r3, [r7, #3]
 800a03a:	f003 0303 	and.w	r3, r3, #3
 800a03e:	68f9      	ldr	r1, [r7, #12]
 800a040:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800a044:	4313      	orrs	r3, r2
 800a046:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a048:	78fb      	ldrb	r3, [r7, #3]
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d107      	bne.n	800a05e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a054:	461a      	mov	r2, r3
 800a056:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800a05a:	6053      	str	r3, [r2, #4]
 800a05c:	e00c      	b.n	800a078 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800a05e:	78fb      	ldrb	r3, [r7, #3]
 800a060:	2b02      	cmp	r3, #2
 800a062:	d107      	bne.n	800a074 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a06a:	461a      	mov	r2, r3
 800a06c:	f241 7370 	movw	r3, #6000	@ 0x1770
 800a070:	6053      	str	r3, [r2, #4]
 800a072:	e001      	b.n	800a078 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800a074:	2301      	movs	r3, #1
 800a076:	e000      	b.n	800a07a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800a078:	2300      	movs	r3, #0
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3714      	adds	r7, #20
 800a07e:	46bd      	mov	sp, r7
 800a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a084:	4770      	bx	lr

0800a086 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800a086:	b580      	push	{r7, lr}
 800a088:	b084      	sub	sp, #16
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a092:	2300      	movs	r3, #0
 800a094:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800a0a6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	68fa      	ldr	r2, [r7, #12]
 800a0ac:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a0b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a0b4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a0b6:	2064      	movs	r0, #100	@ 0x64
 800a0b8:	f7f8 f920 	bl	80022fc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	68fa      	ldr	r2, [r7, #12]
 800a0c0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a0c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a0c8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a0ca:	200a      	movs	r0, #10
 800a0cc:	f7f8 f916 	bl	80022fc <HAL_Delay>

  return HAL_OK;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a0da:	b480      	push	{r7}
 800a0dc:	b085      	sub	sp, #20
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800a0fe:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a106:	2b00      	cmp	r3, #0
 800a108:	d109      	bne.n	800a11e <USB_DriveVbus+0x44>
 800a10a:	78fb      	ldrb	r3, [r7, #3]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d106      	bne.n	800a11e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	68fa      	ldr	r2, [r7, #12]
 800a114:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a118:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a11c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a124:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a128:	d109      	bne.n	800a13e <USB_DriveVbus+0x64>
 800a12a:	78fb      	ldrb	r3, [r7, #3]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d106      	bne.n	800a13e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	68fa      	ldr	r2, [r7, #12]
 800a134:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800a138:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a13c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a13e:	2300      	movs	r3, #0
}
 800a140:	4618      	mov	r0, r3
 800a142:	3714      	adds	r7, #20
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b085      	sub	sp, #20
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a158:	2300      	movs	r3, #0
 800a15a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	0c5b      	lsrs	r3, r3, #17
 800a16a:	f003 0303 	and.w	r3, r3, #3
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3714      	adds	r7, #20
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr

0800a17a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800a17a:	b480      	push	{r7}
 800a17c:	b085      	sub	sp, #20
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	b29b      	uxth	r3, r3
}
 800a190:	4618      	mov	r0, r3
 800a192:	3714      	adds	r7, #20
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b088      	sub	sp, #32
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	4608      	mov	r0, r1
 800a1a6:	4611      	mov	r1, r2
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	70fb      	strb	r3, [r7, #3]
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	70bb      	strb	r3, [r7, #2]
 800a1b2:	4613      	mov	r3, r2
 800a1b4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800a1be:	78fb      	ldrb	r3, [r7, #3]
 800a1c0:	015a      	lsls	r2, r3, #5
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	4413      	add	r3, r2
 800a1c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	f04f 33ff 	mov.w	r3, #4294967295
 800a1d0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a1d2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a1d6:	2b03      	cmp	r3, #3
 800a1d8:	d87c      	bhi.n	800a2d4 <USB_HC_Init+0x138>
 800a1da:	a201      	add	r2, pc, #4	@ (adr r2, 800a1e0 <USB_HC_Init+0x44>)
 800a1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e0:	0800a1f1 	.word	0x0800a1f1
 800a1e4:	0800a297 	.word	0x0800a297
 800a1e8:	0800a1f1 	.word	0x0800a1f1
 800a1ec:	0800a259 	.word	0x0800a259
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a1f0:	78fb      	ldrb	r3, [r7, #3]
 800a1f2:	015a      	lsls	r2, r3, #5
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	4413      	add	r3, r2
 800a1f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	f240 439d 	movw	r3, #1181	@ 0x49d
 800a202:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a204:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	da10      	bge.n	800a22e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a20c:	78fb      	ldrb	r3, [r7, #3]
 800a20e:	015a      	lsls	r2, r3, #5
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	4413      	add	r3, r2
 800a214:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	78fa      	ldrb	r2, [r7, #3]
 800a21c:	0151      	lsls	r1, r2, #5
 800a21e:	693a      	ldr	r2, [r7, #16]
 800a220:	440a      	add	r2, r1
 800a222:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a226:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a22a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800a22c:	e055      	b.n	800a2da <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4a6f      	ldr	r2, [pc, #444]	@ (800a3f0 <USB_HC_Init+0x254>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d151      	bne.n	800a2da <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800a236:	78fb      	ldrb	r3, [r7, #3]
 800a238:	015a      	lsls	r2, r3, #5
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	4413      	add	r3, r2
 800a23e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	78fa      	ldrb	r2, [r7, #3]
 800a246:	0151      	lsls	r1, r2, #5
 800a248:	693a      	ldr	r2, [r7, #16]
 800a24a:	440a      	add	r2, r1
 800a24c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a250:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a254:	60d3      	str	r3, [r2, #12]
      break;
 800a256:	e040      	b.n	800a2da <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a258:	78fb      	ldrb	r3, [r7, #3]
 800a25a:	015a      	lsls	r2, r3, #5
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	4413      	add	r3, r2
 800a260:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a264:	461a      	mov	r2, r3
 800a266:	f240 639d 	movw	r3, #1693	@ 0x69d
 800a26a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a26c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a270:	2b00      	cmp	r3, #0
 800a272:	da34      	bge.n	800a2de <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a274:	78fb      	ldrb	r3, [r7, #3]
 800a276:	015a      	lsls	r2, r3, #5
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	4413      	add	r3, r2
 800a27c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	78fa      	ldrb	r2, [r7, #3]
 800a284:	0151      	lsls	r1, r2, #5
 800a286:	693a      	ldr	r2, [r7, #16]
 800a288:	440a      	add	r2, r1
 800a28a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a28e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a292:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a294:	e023      	b.n	800a2de <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a296:	78fb      	ldrb	r3, [r7, #3]
 800a298:	015a      	lsls	r2, r3, #5
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	4413      	add	r3, r2
 800a29e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	f240 2325 	movw	r3, #549	@ 0x225
 800a2a8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a2aa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	da17      	bge.n	800a2e2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a2b2:	78fb      	ldrb	r3, [r7, #3]
 800a2b4:	015a      	lsls	r2, r3, #5
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a2be:	68db      	ldr	r3, [r3, #12]
 800a2c0:	78fa      	ldrb	r2, [r7, #3]
 800a2c2:	0151      	lsls	r1, r2, #5
 800a2c4:	693a      	ldr	r2, [r7, #16]
 800a2c6:	440a      	add	r2, r1
 800a2c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a2cc:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800a2d0:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a2d2:	e006      	b.n	800a2e2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	77fb      	strb	r3, [r7, #31]
      break;
 800a2d8:	e004      	b.n	800a2e4 <USB_HC_Init+0x148>
      break;
 800a2da:	bf00      	nop
 800a2dc:	e002      	b.n	800a2e4 <USB_HC_Init+0x148>
      break;
 800a2de:	bf00      	nop
 800a2e0:	e000      	b.n	800a2e4 <USB_HC_Init+0x148>
      break;
 800a2e2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800a2e4:	78fb      	ldrb	r3, [r7, #3]
 800a2e6:	015a      	lsls	r2, r3, #5
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	4413      	add	r3, r2
 800a2ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800a2f6:	78fb      	ldrb	r3, [r7, #3]
 800a2f8:	015a      	lsls	r2, r3, #5
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	4413      	add	r3, r2
 800a2fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	78fa      	ldrb	r2, [r7, #3]
 800a306:	0151      	lsls	r1, r2, #5
 800a308:	693a      	ldr	r2, [r7, #16]
 800a30a:	440a      	add	r2, r1
 800a30c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a310:	f043 0302 	orr.w	r3, r3, #2
 800a314:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a31c:	699a      	ldr	r2, [r3, #24]
 800a31e:	78fb      	ldrb	r3, [r7, #3]
 800a320:	f003 030f 	and.w	r3, r3, #15
 800a324:	2101      	movs	r1, #1
 800a326:	fa01 f303 	lsl.w	r3, r1, r3
 800a32a:	6939      	ldr	r1, [r7, #16]
 800a32c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800a330:	4313      	orrs	r3, r2
 800a332:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	699b      	ldr	r3, [r3, #24]
 800a338:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a340:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a344:	2b00      	cmp	r3, #0
 800a346:	da03      	bge.n	800a350 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a348:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a34c:	61bb      	str	r3, [r7, #24]
 800a34e:	e001      	b.n	800a354 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800a350:	2300      	movs	r3, #0
 800a352:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f7ff fef9 	bl	800a14c <USB_GetHostSpeed>
 800a35a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a35c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a360:	2b02      	cmp	r3, #2
 800a362:	d106      	bne.n	800a372 <USB_HC_Init+0x1d6>
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2b02      	cmp	r3, #2
 800a368:	d003      	beq.n	800a372 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a36a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a36e:	617b      	str	r3, [r7, #20]
 800a370:	e001      	b.n	800a376 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a372:	2300      	movs	r3, #0
 800a374:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a376:	787b      	ldrb	r3, [r7, #1]
 800a378:	059b      	lsls	r3, r3, #22
 800a37a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a37e:	78bb      	ldrb	r3, [r7, #2]
 800a380:	02db      	lsls	r3, r3, #11
 800a382:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a386:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a388:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a38c:	049b      	lsls	r3, r3, #18
 800a38e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a392:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800a394:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800a396:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a39a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800a39c:	69bb      	ldr	r3, [r7, #24]
 800a39e:	431a      	orrs	r2, r3
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a3a4:	78fa      	ldrb	r2, [r7, #3]
 800a3a6:	0151      	lsls	r1, r2, #5
 800a3a8:	693a      	ldr	r2, [r7, #16]
 800a3aa:	440a      	add	r2, r1
 800a3ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800a3b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a3b4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800a3b6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a3ba:	2b03      	cmp	r3, #3
 800a3bc:	d003      	beq.n	800a3c6 <USB_HC_Init+0x22a>
 800a3be:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d10f      	bne.n	800a3e6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a3c6:	78fb      	ldrb	r3, [r7, #3]
 800a3c8:	015a      	lsls	r2, r3, #5
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	4413      	add	r3, r2
 800a3ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	78fa      	ldrb	r2, [r7, #3]
 800a3d6:	0151      	lsls	r1, r2, #5
 800a3d8:	693a      	ldr	r2, [r7, #16]
 800a3da:	440a      	add	r2, r1
 800a3dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a3e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a3e4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a3e6:	7ffb      	ldrb	r3, [r7, #31]
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3720      	adds	r7, #32
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	40040000 	.word	0x40040000

0800a3f4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b08c      	sub	sp, #48	@ 0x30
 800a3f8:	af02      	add	r7, sp, #8
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	4613      	mov	r3, r2
 800a400:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	785b      	ldrb	r3, [r3, #1]
 800a40a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800a40c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a410:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	4a5d      	ldr	r2, [pc, #372]	@ (800a58c <USB_HC_StartXfer+0x198>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d12f      	bne.n	800a47a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800a41a:	79fb      	ldrb	r3, [r7, #7]
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d11c      	bne.n	800a45a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	7c9b      	ldrb	r3, [r3, #18]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d003      	beq.n	800a430 <USB_HC_StartXfer+0x3c>
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	7c9b      	ldrb	r3, [r3, #18]
 800a42c:	2b02      	cmp	r3, #2
 800a42e:	d124      	bne.n	800a47a <USB_HC_StartXfer+0x86>
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	799b      	ldrb	r3, [r3, #6]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d120      	bne.n	800a47a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800a438:	69fb      	ldr	r3, [r7, #28]
 800a43a:	015a      	lsls	r2, r3, #5
 800a43c:	6a3b      	ldr	r3, [r7, #32]
 800a43e:	4413      	add	r3, r2
 800a440:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	69fa      	ldr	r2, [r7, #28]
 800a448:	0151      	lsls	r1, r2, #5
 800a44a:	6a3a      	ldr	r2, [r7, #32]
 800a44c:	440a      	add	r2, r1
 800a44e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a456:	60d3      	str	r3, [r2, #12]
 800a458:	e00f      	b.n	800a47a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	791b      	ldrb	r3, [r3, #4]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d10b      	bne.n	800a47a <USB_HC_StartXfer+0x86>
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	795b      	ldrb	r3, [r3, #5]
 800a466:	2b01      	cmp	r3, #1
 800a468:	d107      	bne.n	800a47a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	785b      	ldrb	r3, [r3, #1]
 800a46e:	4619      	mov	r1, r3
 800a470:	68f8      	ldr	r0, [r7, #12]
 800a472:	f000 fb6b 	bl	800ab4c <USB_DoPing>
        return HAL_OK;
 800a476:	2300      	movs	r3, #0
 800a478:	e232      	b.n	800a8e0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	799b      	ldrb	r3, [r3, #6]
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d158      	bne.n	800a534 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800a482:	2301      	movs	r3, #1
 800a484:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	78db      	ldrb	r3, [r3, #3]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d007      	beq.n	800a49e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a48e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a490:	68ba      	ldr	r2, [r7, #8]
 800a492:	8a92      	ldrh	r2, [r2, #20]
 800a494:	fb03 f202 	mul.w	r2, r3, r2
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	61da      	str	r2, [r3, #28]
 800a49c:	e07c      	b.n	800a598 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	7c9b      	ldrb	r3, [r3, #18]
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d130      	bne.n	800a508 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	6a1b      	ldr	r3, [r3, #32]
 800a4aa:	2bbc      	cmp	r3, #188	@ 0xbc
 800a4ac:	d918      	bls.n	800a4e0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	8a9b      	ldrh	r3, [r3, #20]
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	69da      	ldr	r2, [r3, #28]
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d003      	beq.n	800a4d0 <USB_HC_StartXfer+0xdc>
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	2b02      	cmp	r3, #2
 800a4ce:	d103      	bne.n	800a4d8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	2202      	movs	r2, #2
 800a4d4:	60da      	str	r2, [r3, #12]
 800a4d6:	e05f      	b.n	800a598 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	60da      	str	r2, [r3, #12]
 800a4de:	e05b      	b.n	800a598 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	6a1a      	ldr	r2, [r3, #32]
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d007      	beq.n	800a500 <USB_HC_StartXfer+0x10c>
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	2b02      	cmp	r3, #2
 800a4f6:	d003      	beq.n	800a500 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	2204      	movs	r2, #4
 800a4fc:	60da      	str	r2, [r3, #12]
 800a4fe:	e04b      	b.n	800a598 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	2203      	movs	r2, #3
 800a504:	60da      	str	r2, [r3, #12]
 800a506:	e047      	b.n	800a598 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800a508:	79fb      	ldrb	r3, [r7, #7]
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d10d      	bne.n	800a52a <USB_HC_StartXfer+0x136>
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	6a1b      	ldr	r3, [r3, #32]
 800a512:	68ba      	ldr	r2, [r7, #8]
 800a514:	8a92      	ldrh	r2, [r2, #20]
 800a516:	4293      	cmp	r3, r2
 800a518:	d907      	bls.n	800a52a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a51a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a51c:	68ba      	ldr	r2, [r7, #8]
 800a51e:	8a92      	ldrh	r2, [r2, #20]
 800a520:	fb03 f202 	mul.w	r2, r3, r2
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	61da      	str	r2, [r3, #28]
 800a528:	e036      	b.n	800a598 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	6a1a      	ldr	r2, [r3, #32]
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	61da      	str	r2, [r3, #28]
 800a532:	e031      	b.n	800a598 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	6a1b      	ldr	r3, [r3, #32]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d018      	beq.n	800a56e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	6a1b      	ldr	r3, [r3, #32]
 800a540:	68ba      	ldr	r2, [r7, #8]
 800a542:	8a92      	ldrh	r2, [r2, #20]
 800a544:	4413      	add	r3, r2
 800a546:	3b01      	subs	r3, #1
 800a548:	68ba      	ldr	r2, [r7, #8]
 800a54a:	8a92      	ldrh	r2, [r2, #20]
 800a54c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a550:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800a552:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a554:	8b7b      	ldrh	r3, [r7, #26]
 800a556:	429a      	cmp	r2, r3
 800a558:	d90b      	bls.n	800a572 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800a55a:	8b7b      	ldrh	r3, [r7, #26]
 800a55c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a55e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a560:	68ba      	ldr	r2, [r7, #8]
 800a562:	8a92      	ldrh	r2, [r2, #20]
 800a564:	fb03 f202 	mul.w	r2, r3, r2
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	61da      	str	r2, [r3, #28]
 800a56c:	e001      	b.n	800a572 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800a56e:	2301      	movs	r3, #1
 800a570:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	78db      	ldrb	r3, [r3, #3]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00a      	beq.n	800a590 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a57a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a57c:	68ba      	ldr	r2, [r7, #8]
 800a57e:	8a92      	ldrh	r2, [r2, #20]
 800a580:	fb03 f202 	mul.w	r2, r3, r2
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	61da      	str	r2, [r3, #28]
 800a588:	e006      	b.n	800a598 <USB_HC_StartXfer+0x1a4>
 800a58a:	bf00      	nop
 800a58c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	6a1a      	ldr	r2, [r3, #32]
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	69db      	ldr	r3, [r3, #28]
 800a59c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a5a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a5a2:	04d9      	lsls	r1, r3, #19
 800a5a4:	4ba3      	ldr	r3, [pc, #652]	@ (800a834 <USB_HC_StartXfer+0x440>)
 800a5a6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a5a8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	7d9b      	ldrb	r3, [r3, #22]
 800a5ae:	075b      	lsls	r3, r3, #29
 800a5b0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a5b4:	69f9      	ldr	r1, [r7, #28]
 800a5b6:	0148      	lsls	r0, r1, #5
 800a5b8:	6a39      	ldr	r1, [r7, #32]
 800a5ba:	4401      	add	r1, r0
 800a5bc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a5c0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a5c2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a5c4:	79fb      	ldrb	r3, [r7, #7]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d009      	beq.n	800a5de <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	6999      	ldr	r1, [r3, #24]
 800a5ce:	69fb      	ldr	r3, [r7, #28]
 800a5d0:	015a      	lsls	r2, r3, #5
 800a5d2:	6a3b      	ldr	r3, [r7, #32]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a5da:	460a      	mov	r2, r1
 800a5dc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a5de:	6a3b      	ldr	r3, [r7, #32]
 800a5e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a5e4:	689b      	ldr	r3, [r3, #8]
 800a5e6:	f003 0301 	and.w	r3, r3, #1
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	bf0c      	ite	eq
 800a5ee:	2301      	moveq	r3, #1
 800a5f0:	2300      	movne	r3, #0
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a5f6:	69fb      	ldr	r3, [r7, #28]
 800a5f8:	015a      	lsls	r2, r3, #5
 800a5fa:	6a3b      	ldr	r3, [r7, #32]
 800a5fc:	4413      	add	r3, r2
 800a5fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	69fa      	ldr	r2, [r7, #28]
 800a606:	0151      	lsls	r1, r2, #5
 800a608:	6a3a      	ldr	r2, [r7, #32]
 800a60a:	440a      	add	r2, r1
 800a60c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a610:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a614:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a616:	69fb      	ldr	r3, [r7, #28]
 800a618:	015a      	lsls	r2, r3, #5
 800a61a:	6a3b      	ldr	r3, [r7, #32]
 800a61c:	4413      	add	r3, r2
 800a61e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	7e7b      	ldrb	r3, [r7, #25]
 800a626:	075b      	lsls	r3, r3, #29
 800a628:	69f9      	ldr	r1, [r7, #28]
 800a62a:	0148      	lsls	r0, r1, #5
 800a62c:	6a39      	ldr	r1, [r7, #32]
 800a62e:	4401      	add	r1, r0
 800a630:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800a634:	4313      	orrs	r3, r2
 800a636:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	799b      	ldrb	r3, [r3, #6]
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	f040 80c3 	bne.w	800a7c8 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	7c5b      	ldrb	r3, [r3, #17]
 800a646:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800a648:	68ba      	ldr	r2, [r7, #8]
 800a64a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a64c:	4313      	orrs	r3, r2
 800a64e:	69fa      	ldr	r2, [r7, #28]
 800a650:	0151      	lsls	r1, r2, #5
 800a652:	6a3a      	ldr	r2, [r7, #32]
 800a654:	440a      	add	r2, r1
 800a656:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800a65a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a65e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800a660:	69fb      	ldr	r3, [r7, #28]
 800a662:	015a      	lsls	r2, r3, #5
 800a664:	6a3b      	ldr	r3, [r7, #32]
 800a666:	4413      	add	r3, r2
 800a668:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	69fa      	ldr	r2, [r7, #28]
 800a670:	0151      	lsls	r1, r2, #5
 800a672:	6a3a      	ldr	r2, [r7, #32]
 800a674:	440a      	add	r2, r1
 800a676:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a67a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a67e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	79db      	ldrb	r3, [r3, #7]
 800a684:	2b01      	cmp	r3, #1
 800a686:	d123      	bne.n	800a6d0 <USB_HC_StartXfer+0x2dc>
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	78db      	ldrb	r3, [r3, #3]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d11f      	bne.n	800a6d0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800a690:	69fb      	ldr	r3, [r7, #28]
 800a692:	015a      	lsls	r2, r3, #5
 800a694:	6a3b      	ldr	r3, [r7, #32]
 800a696:	4413      	add	r3, r2
 800a698:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	69fa      	ldr	r2, [r7, #28]
 800a6a0:	0151      	lsls	r1, r2, #5
 800a6a2:	6a3a      	ldr	r2, [r7, #32]
 800a6a4:	440a      	add	r2, r1
 800a6a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a6aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a6ae:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800a6b0:	69fb      	ldr	r3, [r7, #28]
 800a6b2:	015a      	lsls	r2, r3, #5
 800a6b4:	6a3b      	ldr	r3, [r7, #32]
 800a6b6:	4413      	add	r3, r2
 800a6b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	69fa      	ldr	r2, [r7, #28]
 800a6c0:	0151      	lsls	r1, r2, #5
 800a6c2:	6a3a      	ldr	r2, [r7, #32]
 800a6c4:	440a      	add	r2, r1
 800a6c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a6ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6ce:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	7c9b      	ldrb	r3, [r3, #18]
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d003      	beq.n	800a6e0 <USB_HC_StartXfer+0x2ec>
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	7c9b      	ldrb	r3, [r3, #18]
 800a6dc:	2b03      	cmp	r3, #3
 800a6de:	d117      	bne.n	800a710 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d113      	bne.n	800a710 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	78db      	ldrb	r3, [r3, #3]
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	d10f      	bne.n	800a710 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800a6f0:	69fb      	ldr	r3, [r7, #28]
 800a6f2:	015a      	lsls	r2, r3, #5
 800a6f4:	6a3b      	ldr	r3, [r7, #32]
 800a6f6:	4413      	add	r3, r2
 800a6f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	69fa      	ldr	r2, [r7, #28]
 800a700:	0151      	lsls	r1, r2, #5
 800a702:	6a3a      	ldr	r2, [r7, #32]
 800a704:	440a      	add	r2, r1
 800a706:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a70a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a70e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	7c9b      	ldrb	r3, [r3, #18]
 800a714:	2b01      	cmp	r3, #1
 800a716:	d162      	bne.n	800a7de <USB_HC_StartXfer+0x3ea>
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	78db      	ldrb	r3, [r3, #3]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d15e      	bne.n	800a7de <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	68db      	ldr	r3, [r3, #12]
 800a724:	3b01      	subs	r3, #1
 800a726:	2b03      	cmp	r3, #3
 800a728:	d858      	bhi.n	800a7dc <USB_HC_StartXfer+0x3e8>
 800a72a:	a201      	add	r2, pc, #4	@ (adr r2, 800a730 <USB_HC_StartXfer+0x33c>)
 800a72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a730:	0800a741 	.word	0x0800a741
 800a734:	0800a763 	.word	0x0800a763
 800a738:	0800a785 	.word	0x0800a785
 800a73c:	0800a7a7 	.word	0x0800a7a7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800a740:	69fb      	ldr	r3, [r7, #28]
 800a742:	015a      	lsls	r2, r3, #5
 800a744:	6a3b      	ldr	r3, [r7, #32]
 800a746:	4413      	add	r3, r2
 800a748:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	69fa      	ldr	r2, [r7, #28]
 800a750:	0151      	lsls	r1, r2, #5
 800a752:	6a3a      	ldr	r2, [r7, #32]
 800a754:	440a      	add	r2, r1
 800a756:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a75a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a75e:	6053      	str	r3, [r2, #4]
          break;
 800a760:	e03d      	b.n	800a7de <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800a762:	69fb      	ldr	r3, [r7, #28]
 800a764:	015a      	lsls	r2, r3, #5
 800a766:	6a3b      	ldr	r3, [r7, #32]
 800a768:	4413      	add	r3, r2
 800a76a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	69fa      	ldr	r2, [r7, #28]
 800a772:	0151      	lsls	r1, r2, #5
 800a774:	6a3a      	ldr	r2, [r7, #32]
 800a776:	440a      	add	r2, r1
 800a778:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a77c:	f043 030e 	orr.w	r3, r3, #14
 800a780:	6053      	str	r3, [r2, #4]
          break;
 800a782:	e02c      	b.n	800a7de <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800a784:	69fb      	ldr	r3, [r7, #28]
 800a786:	015a      	lsls	r2, r3, #5
 800a788:	6a3b      	ldr	r3, [r7, #32]
 800a78a:	4413      	add	r3, r2
 800a78c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	69fa      	ldr	r2, [r7, #28]
 800a794:	0151      	lsls	r1, r2, #5
 800a796:	6a3a      	ldr	r2, [r7, #32]
 800a798:	440a      	add	r2, r1
 800a79a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a79e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a7a2:	6053      	str	r3, [r2, #4]
          break;
 800a7a4:	e01b      	b.n	800a7de <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800a7a6:	69fb      	ldr	r3, [r7, #28]
 800a7a8:	015a      	lsls	r2, r3, #5
 800a7aa:	6a3b      	ldr	r3, [r7, #32]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	69fa      	ldr	r2, [r7, #28]
 800a7b6:	0151      	lsls	r1, r2, #5
 800a7b8:	6a3a      	ldr	r2, [r7, #32]
 800a7ba:	440a      	add	r2, r1
 800a7bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a7c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a7c4:	6053      	str	r3, [r2, #4]
          break;
 800a7c6:	e00a      	b.n	800a7de <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800a7c8:	69fb      	ldr	r3, [r7, #28]
 800a7ca:	015a      	lsls	r2, r3, #5
 800a7cc:	6a3b      	ldr	r3, [r7, #32]
 800a7ce:	4413      	add	r3, r2
 800a7d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	6053      	str	r3, [r2, #4]
 800a7da:	e000      	b.n	800a7de <USB_HC_StartXfer+0x3ea>
          break;
 800a7dc:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a7de:	69fb      	ldr	r3, [r7, #28]
 800a7e0:	015a      	lsls	r2, r3, #5
 800a7e2:	6a3b      	ldr	r3, [r7, #32]
 800a7e4:	4413      	add	r3, r2
 800a7e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a7f4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	78db      	ldrb	r3, [r3, #3]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d004      	beq.n	800a808 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a804:	613b      	str	r3, [r7, #16]
 800a806:	e003      	b.n	800a810 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a80e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a816:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a818:	69fb      	ldr	r3, [r7, #28]
 800a81a:	015a      	lsls	r2, r3, #5
 800a81c:	6a3b      	ldr	r3, [r7, #32]
 800a81e:	4413      	add	r3, r2
 800a820:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a824:	461a      	mov	r2, r3
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a82a:	79fb      	ldrb	r3, [r7, #7]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d003      	beq.n	800a838 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800a830:	2300      	movs	r3, #0
 800a832:	e055      	b.n	800a8e0 <USB_HC_StartXfer+0x4ec>
 800a834:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	78db      	ldrb	r3, [r3, #3]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d14e      	bne.n	800a8de <USB_HC_StartXfer+0x4ea>
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	6a1b      	ldr	r3, [r3, #32]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d04a      	beq.n	800a8de <USB_HC_StartXfer+0x4ea>
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	79db      	ldrb	r3, [r3, #7]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d146      	bne.n	800a8de <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	7c9b      	ldrb	r3, [r3, #18]
 800a854:	2b03      	cmp	r3, #3
 800a856:	d831      	bhi.n	800a8bc <USB_HC_StartXfer+0x4c8>
 800a858:	a201      	add	r2, pc, #4	@ (adr r2, 800a860 <USB_HC_StartXfer+0x46c>)
 800a85a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a85e:	bf00      	nop
 800a860:	0800a871 	.word	0x0800a871
 800a864:	0800a895 	.word	0x0800a895
 800a868:	0800a871 	.word	0x0800a871
 800a86c:	0800a895 	.word	0x0800a895
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	6a1b      	ldr	r3, [r3, #32]
 800a874:	3303      	adds	r3, #3
 800a876:	089b      	lsrs	r3, r3, #2
 800a878:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a87a:	8afa      	ldrh	r2, [r7, #22]
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a880:	b29b      	uxth	r3, r3
 800a882:	429a      	cmp	r2, r3
 800a884:	d91c      	bls.n	800a8c0 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	699b      	ldr	r3, [r3, #24]
 800a88a:	f043 0220 	orr.w	r2, r3, #32
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	619a      	str	r2, [r3, #24]
        }
        break;
 800a892:	e015      	b.n	800a8c0 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	6a1b      	ldr	r3, [r3, #32]
 800a898:	3303      	adds	r3, #3
 800a89a:	089b      	lsrs	r3, r3, #2
 800a89c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a89e:	8afa      	ldrh	r2, [r7, #22]
 800a8a0:	6a3b      	ldr	r3, [r7, #32]
 800a8a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a8a6:	691b      	ldr	r3, [r3, #16]
 800a8a8:	b29b      	uxth	r3, r3
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d90a      	bls.n	800a8c4 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	699b      	ldr	r3, [r3, #24]
 800a8b2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	619a      	str	r2, [r3, #24]
        }
        break;
 800a8ba:	e003      	b.n	800a8c4 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800a8bc:	bf00      	nop
 800a8be:	e002      	b.n	800a8c6 <USB_HC_StartXfer+0x4d2>
        break;
 800a8c0:	bf00      	nop
 800a8c2:	e000      	b.n	800a8c6 <USB_HC_StartXfer+0x4d2>
        break;
 800a8c4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	6999      	ldr	r1, [r3, #24]
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	785a      	ldrb	r2, [r3, #1]
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	6a1b      	ldr	r3, [r3, #32]
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	2000      	movs	r0, #0
 800a8d6:	9000      	str	r0, [sp, #0]
 800a8d8:	68f8      	ldr	r0, [r7, #12]
 800a8da:	f7ff f9c9 	bl	8009c70 <USB_WritePacket>
  }

  return HAL_OK;
 800a8de:	2300      	movs	r3, #0
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3728      	adds	r7, #40	@ 0x28
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b085      	sub	sp, #20
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a8fa:	695b      	ldr	r3, [r3, #20]
 800a8fc:	b29b      	uxth	r3, r3
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3714      	adds	r7, #20
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr

0800a90a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a90a:	b480      	push	{r7}
 800a90c:	b089      	sub	sp, #36	@ 0x24
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
 800a912:	460b      	mov	r3, r1
 800a914:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800a91a:	78fb      	ldrb	r3, [r7, #3]
 800a91c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800a91e:	2300      	movs	r3, #0
 800a920:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a922:	69bb      	ldr	r3, [r7, #24]
 800a924:	015a      	lsls	r2, r3, #5
 800a926:	69fb      	ldr	r3, [r7, #28]
 800a928:	4413      	add	r3, r2
 800a92a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	0c9b      	lsrs	r3, r3, #18
 800a932:	f003 0303 	and.w	r3, r3, #3
 800a936:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	015a      	lsls	r2, r3, #5
 800a93c:	69fb      	ldr	r3, [r7, #28]
 800a93e:	4413      	add	r3, r2
 800a940:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	0fdb      	lsrs	r3, r3, #31
 800a948:	f003 0301 	and.w	r3, r3, #1
 800a94c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	015a      	lsls	r2, r3, #5
 800a952:	69fb      	ldr	r3, [r7, #28]
 800a954:	4413      	add	r3, r2
 800a956:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	0fdb      	lsrs	r3, r3, #31
 800a95e:	f003 0301 	and.w	r3, r3, #1
 800a962:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	689b      	ldr	r3, [r3, #8]
 800a968:	f003 0320 	and.w	r3, r3, #32
 800a96c:	2b20      	cmp	r3, #32
 800a96e:	d10d      	bne.n	800a98c <USB_HC_Halt+0x82>
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d10a      	bne.n	800a98c <USB_HC_Halt+0x82>
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d005      	beq.n	800a988 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d002      	beq.n	800a988 <USB_HC_Halt+0x7e>
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	2b03      	cmp	r3, #3
 800a986:	d101      	bne.n	800a98c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800a988:	2300      	movs	r3, #0
 800a98a:	e0d8      	b.n	800ab3e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d002      	beq.n	800a998 <USB_HC_Halt+0x8e>
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	2b02      	cmp	r3, #2
 800a996:	d173      	bne.n	800aa80 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a998:	69bb      	ldr	r3, [r7, #24]
 800a99a:	015a      	lsls	r2, r3, #5
 800a99c:	69fb      	ldr	r3, [r7, #28]
 800a99e:	4413      	add	r3, r2
 800a9a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	69ba      	ldr	r2, [r7, #24]
 800a9a8:	0151      	lsls	r1, r2, #5
 800a9aa:	69fa      	ldr	r2, [r7, #28]
 800a9ac:	440a      	add	r2, r1
 800a9ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a9b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a9b6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	f003 0320 	and.w	r3, r3, #32
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d14a      	bne.n	800aa5a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d133      	bne.n	800aa38 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a9d0:	69bb      	ldr	r3, [r7, #24]
 800a9d2:	015a      	lsls	r2, r3, #5
 800a9d4:	69fb      	ldr	r3, [r7, #28]
 800a9d6:	4413      	add	r3, r2
 800a9d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	69ba      	ldr	r2, [r7, #24]
 800a9e0:	0151      	lsls	r1, r2, #5
 800a9e2:	69fa      	ldr	r2, [r7, #28]
 800a9e4:	440a      	add	r2, r1
 800a9e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a9ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a9ee:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	015a      	lsls	r2, r3, #5
 800a9f4:	69fb      	ldr	r3, [r7, #28]
 800a9f6:	4413      	add	r3, r2
 800a9f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	69ba      	ldr	r2, [r7, #24]
 800aa00:	0151      	lsls	r1, r2, #5
 800aa02:	69fa      	ldr	r2, [r7, #28]
 800aa04:	440a      	add	r2, r1
 800aa06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aa0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800aa0e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	3301      	adds	r3, #1
 800aa14:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aa1c:	d82e      	bhi.n	800aa7c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800aa1e:	69bb      	ldr	r3, [r7, #24]
 800aa20:	015a      	lsls	r2, r3, #5
 800aa22:	69fb      	ldr	r3, [r7, #28]
 800aa24:	4413      	add	r3, r2
 800aa26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aa30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa34:	d0ec      	beq.n	800aa10 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800aa36:	e081      	b.n	800ab3c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800aa38:	69bb      	ldr	r3, [r7, #24]
 800aa3a:	015a      	lsls	r2, r3, #5
 800aa3c:	69fb      	ldr	r3, [r7, #28]
 800aa3e:	4413      	add	r3, r2
 800aa40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	69ba      	ldr	r2, [r7, #24]
 800aa48:	0151      	lsls	r1, r2, #5
 800aa4a:	69fa      	ldr	r2, [r7, #28]
 800aa4c:	440a      	add	r2, r1
 800aa4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aa52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800aa56:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800aa58:	e070      	b.n	800ab3c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800aa5a:	69bb      	ldr	r3, [r7, #24]
 800aa5c:	015a      	lsls	r2, r3, #5
 800aa5e:	69fb      	ldr	r3, [r7, #28]
 800aa60:	4413      	add	r3, r2
 800aa62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	69ba      	ldr	r2, [r7, #24]
 800aa6a:	0151      	lsls	r1, r2, #5
 800aa6c:	69fa      	ldr	r2, [r7, #28]
 800aa6e:	440a      	add	r2, r1
 800aa70:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aa74:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800aa78:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800aa7a:	e05f      	b.n	800ab3c <USB_HC_Halt+0x232>
            break;
 800aa7c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800aa7e:	e05d      	b.n	800ab3c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800aa80:	69bb      	ldr	r3, [r7, #24]
 800aa82:	015a      	lsls	r2, r3, #5
 800aa84:	69fb      	ldr	r3, [r7, #28]
 800aa86:	4413      	add	r3, r2
 800aa88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	69ba      	ldr	r2, [r7, #24]
 800aa90:	0151      	lsls	r1, r2, #5
 800aa92:	69fa      	ldr	r2, [r7, #28]
 800aa94:	440a      	add	r2, r1
 800aa96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aa9a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aa9e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800aaa0:	69fb      	ldr	r3, [r7, #28]
 800aaa2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aaa6:	691b      	ldr	r3, [r3, #16]
 800aaa8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d133      	bne.n	800ab18 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800aab0:	69bb      	ldr	r3, [r7, #24]
 800aab2:	015a      	lsls	r2, r3, #5
 800aab4:	69fb      	ldr	r3, [r7, #28]
 800aab6:	4413      	add	r3, r2
 800aab8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	69ba      	ldr	r2, [r7, #24]
 800aac0:	0151      	lsls	r1, r2, #5
 800aac2:	69fa      	ldr	r2, [r7, #28]
 800aac4:	440a      	add	r2, r1
 800aac6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aaca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aace:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800aad0:	69bb      	ldr	r3, [r7, #24]
 800aad2:	015a      	lsls	r2, r3, #5
 800aad4:	69fb      	ldr	r3, [r7, #28]
 800aad6:	4413      	add	r3, r2
 800aad8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	69ba      	ldr	r2, [r7, #24]
 800aae0:	0151      	lsls	r1, r2, #5
 800aae2:	69fa      	ldr	r2, [r7, #28]
 800aae4:	440a      	add	r2, r1
 800aae6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aaea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800aaee:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aafc:	d81d      	bhi.n	800ab3a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	015a      	lsls	r2, r3, #5
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	4413      	add	r3, r2
 800ab06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ab10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab14:	d0ec      	beq.n	800aaf0 <USB_HC_Halt+0x1e6>
 800ab16:	e011      	b.n	800ab3c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	015a      	lsls	r2, r3, #5
 800ab1c:	69fb      	ldr	r3, [r7, #28]
 800ab1e:	4413      	add	r3, r2
 800ab20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	69ba      	ldr	r2, [r7, #24]
 800ab28:	0151      	lsls	r1, r2, #5
 800ab2a:	69fa      	ldr	r2, [r7, #28]
 800ab2c:	440a      	add	r2, r1
 800ab2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ab32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ab36:	6013      	str	r3, [r2, #0]
 800ab38:	e000      	b.n	800ab3c <USB_HC_Halt+0x232>
          break;
 800ab3a:	bf00      	nop
    }
  }

  return HAL_OK;
 800ab3c:	2300      	movs	r3, #0
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3724      	adds	r7, #36	@ 0x24
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr
	...

0800ab4c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b087      	sub	sp, #28
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	460b      	mov	r3, r1
 800ab56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800ab5c:	78fb      	ldrb	r3, [r7, #3]
 800ab5e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800ab60:	2301      	movs	r3, #1
 800ab62:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	04da      	lsls	r2, r3, #19
 800ab68:	4b15      	ldr	r3, [pc, #84]	@ (800abc0 <USB_DoPing+0x74>)
 800ab6a:	4013      	ands	r3, r2
 800ab6c:	693a      	ldr	r2, [r7, #16]
 800ab6e:	0151      	lsls	r1, r2, #5
 800ab70:	697a      	ldr	r2, [r7, #20]
 800ab72:	440a      	add	r2, r1
 800ab74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ab78:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ab7c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	015a      	lsls	r2, r3, #5
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	4413      	add	r3, r2
 800ab86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ab94:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ab9c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	015a      	lsls	r2, r3, #5
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	4413      	add	r3, r2
 800aba6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800abaa:	461a      	mov	r2, r3
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800abb0:	2300      	movs	r3, #0
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	371c      	adds	r7, #28
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr
 800abbe:	bf00      	nop
 800abc0:	1ff80000 	.word	0x1ff80000

0800abc4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b088      	sub	sp, #32
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800abcc:	2300      	movs	r3, #0
 800abce:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800abd4:	2300      	movs	r3, #0
 800abd6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f7fe ff8c 	bl	8009af6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800abde:	2110      	movs	r1, #16
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f7fe ffe5 	bl	8009bb0 <USB_FlushTxFifo>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d001      	beq.n	800abf0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800abec:	2301      	movs	r3, #1
 800abee:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f7ff f80f 	bl	8009c14 <USB_FlushRxFifo>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d001      	beq.n	800ac00 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800abfc:	2301      	movs	r3, #1
 800abfe:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800ac00:	2300      	movs	r3, #0
 800ac02:	61bb      	str	r3, [r7, #24]
 800ac04:	e01f      	b.n	800ac46 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	015a      	lsls	r2, r3, #5
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	4413      	add	r3, r2
 800ac0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ac1c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ac24:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ac2c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800ac2e:	69bb      	ldr	r3, [r7, #24]
 800ac30:	015a      	lsls	r2, r3, #5
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	4413      	add	r3, r2
 800ac36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800ac40:	69bb      	ldr	r3, [r7, #24]
 800ac42:	3301      	adds	r3, #1
 800ac44:	61bb      	str	r3, [r7, #24]
 800ac46:	69bb      	ldr	r3, [r7, #24]
 800ac48:	2b0f      	cmp	r3, #15
 800ac4a:	d9dc      	bls.n	800ac06 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	61bb      	str	r3, [r7, #24]
 800ac50:	e034      	b.n	800acbc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800ac52:	69bb      	ldr	r3, [r7, #24]
 800ac54:	015a      	lsls	r2, r3, #5
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	4413      	add	r3, r2
 800ac5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ac68:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ac70:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ac78:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800ac7a:	69bb      	ldr	r3, [r7, #24]
 800ac7c:	015a      	lsls	r2, r3, #5
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	4413      	add	r3, r2
 800ac82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ac86:	461a      	mov	r2, r3
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	3301      	adds	r3, #1
 800ac90:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ac98:	d80c      	bhi.n	800acb4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ac9a:	69bb      	ldr	r3, [r7, #24]
 800ac9c:	015a      	lsls	r2, r3, #5
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	4413      	add	r3, r2
 800aca2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800acac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800acb0:	d0ec      	beq.n	800ac8c <USB_StopHost+0xc8>
 800acb2:	e000      	b.n	800acb6 <USB_StopHost+0xf2>
        break;
 800acb4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	3301      	adds	r3, #1
 800acba:	61bb      	str	r3, [r7, #24]
 800acbc:	69bb      	ldr	r3, [r7, #24]
 800acbe:	2b0f      	cmp	r3, #15
 800acc0:	d9c7      	bls.n	800ac52 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800acc8:	461a      	mov	r2, r3
 800acca:	f04f 33ff 	mov.w	r3, #4294967295
 800acce:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f04f 32ff 	mov.w	r2, #4294967295
 800acd6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f7fe fefb 	bl	8009ad4 <USB_EnableGlobalInt>

  return ret;
 800acde:	7ffb      	ldrb	r3, [r7, #31]
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3720      	adds	r7, #32
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800acec:	4904      	ldr	r1, [pc, #16]	@ (800ad00 <MX_FATFS_Init+0x18>)
 800acee:	4805      	ldr	r0, [pc, #20]	@ (800ad04 <MX_FATFS_Init+0x1c>)
 800acf0:	f005 fd20 	bl	8010734 <FATFS_LinkDriver>
 800acf4:	4603      	mov	r3, r0
 800acf6:	461a      	mov	r2, r3
 800acf8:	4b03      	ldr	r3, [pc, #12]	@ (800ad08 <MX_FATFS_Init+0x20>)
 800acfa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800acfc:	bf00      	nop
 800acfe:	bd80      	pop	{r7, pc}
 800ad00:	200016f8 	.word	0x200016f8
 800ad04:	08011908 	.word	0x08011908
 800ad08:	200016f4 	.word	0x200016f4

0800ad0c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ad10:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr

0800ad1c <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	4603      	mov	r3, r0
 800ad24:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800ad26:	2300      	movs	r3, #0
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr

0800ad34 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800ad42:	79fb      	ldrb	r3, [r7, #7]
 800ad44:	4619      	mov	r1, r3
 800ad46:	4808      	ldr	r0, [pc, #32]	@ (800ad68 <USBH_status+0x34>)
 800ad48:	f000 fe30 	bl	800b9ac <USBH_MSC_UnitIsReady>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d002      	beq.n	800ad58 <USBH_status+0x24>
  {
    res = RES_OK;
 800ad52:	2300      	movs	r3, #0
 800ad54:	73fb      	strb	r3, [r7, #15]
 800ad56:	e001      	b.n	800ad5c <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800ad5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	20001960 	.word	0x20001960

0800ad6c <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b094      	sub	sp, #80	@ 0x50
 800ad70:	af02      	add	r7, sp, #8
 800ad72:	60b9      	str	r1, [r7, #8]
 800ad74:	607a      	str	r2, [r7, #4]
 800ad76:	603b      	str	r3, [r7, #0]
 800ad78:	4603      	mov	r3, r0
 800ad7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800ad82:	7bf9      	ldrb	r1, [r7, #15]
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	9300      	str	r3, [sp, #0]
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	4813      	ldr	r0, [pc, #76]	@ (800addc <USBH_read+0x70>)
 800ad8e:	f000 fe57 	bl	800ba40 <USBH_MSC_Read>
 800ad92:	4603      	mov	r3, r0
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d103      	bne.n	800ada0 <USBH_read+0x34>
  {
    res = RES_OK;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ad9e:	e017      	b.n	800add0 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800ada0:	f107 0210 	add.w	r2, r7, #16
 800ada4:	7bfb      	ldrb	r3, [r7, #15]
 800ada6:	4619      	mov	r1, r3
 800ada8:	480c      	ldr	r0, [pc, #48]	@ (800addc <USBH_read+0x70>)
 800adaa:	f000 fe25 	bl	800b9f8 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800adae:	7f7b      	ldrb	r3, [r7, #29]
 800adb0:	2b3a      	cmp	r3, #58	@ 0x3a
 800adb2:	d005      	beq.n	800adc0 <USBH_read+0x54>
 800adb4:	2b3a      	cmp	r3, #58	@ 0x3a
 800adb6:	dc07      	bgt.n	800adc8 <USBH_read+0x5c>
 800adb8:	2b04      	cmp	r3, #4
 800adba:	d001      	beq.n	800adc0 <USBH_read+0x54>
 800adbc:	2b28      	cmp	r3, #40	@ 0x28
 800adbe:	d103      	bne.n	800adc8 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800adc0:	2303      	movs	r3, #3
 800adc2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800adc6:	e003      	b.n	800add0 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800adc8:	2301      	movs	r3, #1
 800adca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800adce:	bf00      	nop
    }
  }

  return res;
 800add0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800add4:	4618      	mov	r0, r3
 800add6:	3748      	adds	r7, #72	@ 0x48
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}
 800addc:	20001960 	.word	0x20001960

0800ade0 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b094      	sub	sp, #80	@ 0x50
 800ade4:	af02      	add	r7, sp, #8
 800ade6:	60b9      	str	r1, [r7, #8]
 800ade8:	607a      	str	r2, [r7, #4]
 800adea:	603b      	str	r3, [r7, #0]
 800adec:	4603      	mov	r3, r0
 800adee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800adf0:	2301      	movs	r3, #1
 800adf2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800adf6:	7bf9      	ldrb	r1, [r7, #15]
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	9300      	str	r3, [sp, #0]
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	4817      	ldr	r0, [pc, #92]	@ (800ae60 <USBH_write+0x80>)
 800ae02:	f000 fe86 	bl	800bb12 <USBH_MSC_Write>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d103      	bne.n	800ae14 <USBH_write+0x34>
  {
    res = RES_OK;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ae12:	e01f      	b.n	800ae54 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800ae14:	f107 0210 	add.w	r2, r7, #16
 800ae18:	7bfb      	ldrb	r3, [r7, #15]
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	4810      	ldr	r0, [pc, #64]	@ (800ae60 <USBH_write+0x80>)
 800ae1e:	f000 fdeb 	bl	800b9f8 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800ae22:	7f7b      	ldrb	r3, [r7, #29]
 800ae24:	2b3a      	cmp	r3, #58	@ 0x3a
 800ae26:	d00d      	beq.n	800ae44 <USBH_write+0x64>
 800ae28:	2b3a      	cmp	r3, #58	@ 0x3a
 800ae2a:	dc0f      	bgt.n	800ae4c <USBH_write+0x6c>
 800ae2c:	2b28      	cmp	r3, #40	@ 0x28
 800ae2e:	d009      	beq.n	800ae44 <USBH_write+0x64>
 800ae30:	2b28      	cmp	r3, #40	@ 0x28
 800ae32:	dc0b      	bgt.n	800ae4c <USBH_write+0x6c>
 800ae34:	2b04      	cmp	r3, #4
 800ae36:	d005      	beq.n	800ae44 <USBH_write+0x64>
 800ae38:	2b27      	cmp	r3, #39	@ 0x27
 800ae3a:	d107      	bne.n	800ae4c <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800ae3c:	2302      	movs	r3, #2
 800ae3e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800ae42:	e007      	b.n	800ae54 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800ae44:	2303      	movs	r3, #3
 800ae46:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800ae4a:	e003      	b.n	800ae54 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800ae52:	bf00      	nop
    }
  }

  return res;
 800ae54:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3748      	adds	r7, #72	@ 0x48
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}
 800ae60:	20001960 	.word	0x20001960

0800ae64 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b090      	sub	sp, #64	@ 0x40
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	603a      	str	r2, [r7, #0]
 800ae6e:	71fb      	strb	r3, [r7, #7]
 800ae70:	460b      	mov	r3, r1
 800ae72:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ae74:	2301      	movs	r3, #1
 800ae76:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800ae7a:	79bb      	ldrb	r3, [r7, #6]
 800ae7c:	2b03      	cmp	r3, #3
 800ae7e:	d852      	bhi.n	800af26 <USBH_ioctl+0xc2>
 800ae80:	a201      	add	r2, pc, #4	@ (adr r2, 800ae88 <USBH_ioctl+0x24>)
 800ae82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae86:	bf00      	nop
 800ae88:	0800ae99 	.word	0x0800ae99
 800ae8c:	0800aea1 	.word	0x0800aea1
 800ae90:	0800aecb 	.word	0x0800aecb
 800ae94:	0800aef7 	.word	0x0800aef7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 800ae9e:	e045      	b.n	800af2c <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800aea0:	f107 0208 	add.w	r2, r7, #8
 800aea4:	79fb      	ldrb	r3, [r7, #7]
 800aea6:	4619      	mov	r1, r3
 800aea8:	4823      	ldr	r0, [pc, #140]	@ (800af38 <USBH_ioctl+0xd4>)
 800aeaa:	f000 fda5 	bl	800b9f8 <USBH_MSC_GetLUNInfo>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d106      	bne.n	800aec2 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800aeb4:	68fa      	ldr	r2, [r7, #12]
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800aeba:	2300      	movs	r3, #0
 800aebc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800aec0:	e034      	b.n	800af2c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800aec2:	2301      	movs	r3, #1
 800aec4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 800aec8:	e030      	b.n	800af2c <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800aeca:	f107 0208 	add.w	r2, r7, #8
 800aece:	79fb      	ldrb	r3, [r7, #7]
 800aed0:	4619      	mov	r1, r3
 800aed2:	4819      	ldr	r0, [pc, #100]	@ (800af38 <USBH_ioctl+0xd4>)
 800aed4:	f000 fd90 	bl	800b9f8 <USBH_MSC_GetLUNInfo>
 800aed8:	4603      	mov	r3, r0
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d107      	bne.n	800aeee <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800aede:	8a3b      	ldrh	r3, [r7, #16]
 800aee0:	461a      	mov	r2, r3
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800aee6:	2300      	movs	r3, #0
 800aee8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800aeec:	e01e      	b.n	800af2c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800aeee:	2301      	movs	r3, #1
 800aef0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 800aef4:	e01a      	b.n	800af2c <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800aef6:	f107 0208 	add.w	r2, r7, #8
 800aefa:	79fb      	ldrb	r3, [r7, #7]
 800aefc:	4619      	mov	r1, r3
 800aefe:	480e      	ldr	r0, [pc, #56]	@ (800af38 <USBH_ioctl+0xd4>)
 800af00:	f000 fd7a 	bl	800b9f8 <USBH_MSC_GetLUNInfo>
 800af04:	4603      	mov	r3, r0
 800af06:	2b00      	cmp	r3, #0
 800af08:	d109      	bne.n	800af1e <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800af0a:	8a3b      	ldrh	r3, [r7, #16]
 800af0c:	0a5b      	lsrs	r3, r3, #9
 800af0e:	b29b      	uxth	r3, r3
 800af10:	461a      	mov	r2, r3
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800af16:	2300      	movs	r3, #0
 800af18:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800af1c:	e006      	b.n	800af2c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800af1e:	2301      	movs	r3, #1
 800af20:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 800af24:	e002      	b.n	800af2c <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800af26:	2304      	movs	r3, #4
 800af28:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return res;
 800af2c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800af30:	4618      	mov	r0, r3
 800af32:	3740      	adds	r7, #64	@ 0x40
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}
 800af38:	20001960 	.word	0x20001960

0800af3c <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800af3c:	b590      	push	{r4, r7, lr}
 800af3e:	b089      	sub	sp, #36	@ 0x24
 800af40:	af04      	add	r7, sp, #16
 800af42:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800af4a:	7919      	ldrb	r1, [r3, #4]
 800af4c:	2350      	movs	r3, #80	@ 0x50
 800af4e:	2206      	movs	r2, #6
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f001 fc87 	bl	800c864 <USBH_FindInterface>
 800af56:	4603      	mov	r3, r0
 800af58:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800af5a:	7bfb      	ldrb	r3, [r7, #15]
 800af5c:	2bff      	cmp	r3, #255	@ 0xff
 800af5e:	d002      	beq.n	800af66 <USBH_MSC_InterfaceInit+0x2a>
 800af60:	7bfb      	ldrb	r3, [r7, #15]
 800af62:	2b01      	cmp	r3, #1
 800af64:	d901      	bls.n	800af6a <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800af66:	2302      	movs	r3, #2
 800af68:	e106      	b.n	800b178 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800af6a:	7bfb      	ldrb	r3, [r7, #15]
 800af6c:	4619      	mov	r1, r3
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f001 fc5c 	bl	800c82c <USBH_SelectInterface>
 800af74:	4603      	mov	r3, r0
 800af76:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800af78:	7bbb      	ldrb	r3, [r7, #14]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d001      	beq.n	800af82 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800af7e:	2302      	movs	r3, #2
 800af80:	e0fa      	b.n	800b178 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800af88:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800af8c:	f005 fefa 	bl	8010d84 <malloc>
 800af90:	4603      	mov	r3, r0
 800af92:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800af9a:	69db      	ldr	r3, [r3, #28]
 800af9c:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d101      	bne.n	800afa8 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800afa4:	2302      	movs	r3, #2
 800afa6:	e0e7      	b.n	800b178 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800afa8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800afac:	2100      	movs	r1, #0
 800afae:	68b8      	ldr	r0, [r7, #8]
 800afb0:	f005 ffc6 	bl	8010f40 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800afb4:	7bfb      	ldrb	r3, [r7, #15]
 800afb6:	687a      	ldr	r2, [r7, #4]
 800afb8:	211a      	movs	r1, #26
 800afba:	fb01 f303 	mul.w	r3, r1, r3
 800afbe:	4413      	add	r3, r2
 800afc0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	b25b      	sxtb	r3, r3
 800afc8:	2b00      	cmp	r3, #0
 800afca:	da16      	bge.n	800affa <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800afcc:	7bfb      	ldrb	r3, [r7, #15]
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	211a      	movs	r1, #26
 800afd2:	fb01 f303 	mul.w	r3, r1, r3
 800afd6:	4413      	add	r3, r2
 800afd8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800afdc:	781a      	ldrb	r2, [r3, #0]
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800afe2:	7bfb      	ldrb	r3, [r7, #15]
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	211a      	movs	r1, #26
 800afe8:	fb01 f303 	mul.w	r3, r1, r3
 800afec:	4413      	add	r3, r2
 800afee:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800aff2:	881a      	ldrh	r2, [r3, #0]
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	815a      	strh	r2, [r3, #10]
 800aff8:	e015      	b.n	800b026 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800affa:	7bfb      	ldrb	r3, [r7, #15]
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	211a      	movs	r1, #26
 800b000:	fb01 f303 	mul.w	r3, r1, r3
 800b004:	4413      	add	r3, r2
 800b006:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800b00a:	781a      	ldrb	r2, [r3, #0]
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b010:	7bfb      	ldrb	r3, [r7, #15]
 800b012:	687a      	ldr	r2, [r7, #4]
 800b014:	211a      	movs	r1, #26
 800b016:	fb01 f303 	mul.w	r3, r1, r3
 800b01a:	4413      	add	r3, r2
 800b01c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800b020:	881a      	ldrh	r2, [r3, #0]
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800b026:	7bfb      	ldrb	r3, [r7, #15]
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	211a      	movs	r1, #26
 800b02c:	fb01 f303 	mul.w	r3, r1, r3
 800b030:	4413      	add	r3, r2
 800b032:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	b25b      	sxtb	r3, r3
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	da16      	bge.n	800b06c <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800b03e:	7bfb      	ldrb	r3, [r7, #15]
 800b040:	687a      	ldr	r2, [r7, #4]
 800b042:	211a      	movs	r1, #26
 800b044:	fb01 f303 	mul.w	r3, r1, r3
 800b048:	4413      	add	r3, r2
 800b04a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800b04e:	781a      	ldrb	r2, [r3, #0]
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b054:	7bfb      	ldrb	r3, [r7, #15]
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	211a      	movs	r1, #26
 800b05a:	fb01 f303 	mul.w	r3, r1, r3
 800b05e:	4413      	add	r3, r2
 800b060:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800b064:	881a      	ldrh	r2, [r3, #0]
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	815a      	strh	r2, [r3, #10]
 800b06a:	e015      	b.n	800b098 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800b06c:	7bfb      	ldrb	r3, [r7, #15]
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	211a      	movs	r1, #26
 800b072:	fb01 f303 	mul.w	r3, r1, r3
 800b076:	4413      	add	r3, r2
 800b078:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800b07c:	781a      	ldrb	r2, [r3, #0]
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b082:	7bfb      	ldrb	r3, [r7, #15]
 800b084:	687a      	ldr	r2, [r7, #4]
 800b086:	211a      	movs	r1, #26
 800b088:	fb01 f303 	mul.w	r3, r1, r3
 800b08c:	4413      	add	r3, r2
 800b08e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800b092:	881a      	ldrh	r2, [r3, #0]
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	2200      	movs	r2, #0
 800b09c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	799b      	ldrb	r3, [r3, #6]
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f002 ff64 	bl	800df7e <USBH_AllocPipe>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	79db      	ldrb	r3, [r3, #7]
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f002 ff5a 	bl	800df7e <USBH_AllocPipe>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 fdc2 	bl	800bc5c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	799b      	ldrb	r3, [r3, #6]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d01e      	beq.n	800b11e <USBH_MSC_InterfaceInit+0x1e2>
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	891b      	ldrh	r3, [r3, #8]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d01a      	beq.n	800b11e <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	7959      	ldrb	r1, [r3, #5]
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	7998      	ldrb	r0, [r3, #6]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b0fc:	68ba      	ldr	r2, [r7, #8]
 800b0fe:	8912      	ldrh	r2, [r2, #8]
 800b100:	9202      	str	r2, [sp, #8]
 800b102:	2202      	movs	r2, #2
 800b104:	9201      	str	r2, [sp, #4]
 800b106:	9300      	str	r3, [sp, #0]
 800b108:	4623      	mov	r3, r4
 800b10a:	4602      	mov	r2, r0
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f002 ff07 	bl	800df20 <USBH_OpenPipe>
 800b112:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	79db      	ldrb	r3, [r3, #7]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d02c      	beq.n	800b176 <USBH_MSC_InterfaceInit+0x23a>
 800b11c:	e001      	b.n	800b122 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 800b11e:	2303      	movs	r3, #3
 800b120:	e02a      	b.n	800b178 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	895b      	ldrh	r3, [r3, #10]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d025      	beq.n	800b176 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	7919      	ldrb	r1, [r3, #4]
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	79d8      	ldrb	r0, [r3, #7]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b13e:	68ba      	ldr	r2, [r7, #8]
 800b140:	8952      	ldrh	r2, [r2, #10]
 800b142:	9202      	str	r2, [sp, #8]
 800b144:	2202      	movs	r2, #2
 800b146:	9201      	str	r2, [sp, #4]
 800b148:	9300      	str	r3, [sp, #0]
 800b14a:	4623      	mov	r3, r4
 800b14c:	4602      	mov	r2, r0
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f002 fee6 	bl	800df20 <USBH_OpenPipe>
 800b154:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	791b      	ldrb	r3, [r3, #4]
 800b15a:	2200      	movs	r2, #0
 800b15c:	4619      	mov	r1, r3
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f005 fd73 	bl	8010c4a <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	795b      	ldrb	r3, [r3, #5]
 800b168:	2200      	movs	r2, #0
 800b16a:	4619      	mov	r1, r3
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f005 fd6c 	bl	8010c4a <USBH_LL_SetToggle>

  return USBH_OK;
 800b172:	2300      	movs	r3, #0
 800b174:	e000      	b.n	800b178 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800b176:	2303      	movs	r3, #3
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3714      	adds	r7, #20
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd90      	pop	{r4, r7, pc}

0800b180 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b18e:	69db      	ldr	r3, [r3, #28]
 800b190:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	795b      	ldrb	r3, [r3, #5]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d00e      	beq.n	800b1b8 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	795b      	ldrb	r3, [r3, #5]
 800b19e:	4619      	mov	r1, r3
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f002 fedc 	bl	800df5e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	795b      	ldrb	r3, [r3, #5]
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f002 ff07 	bl	800dfc0 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	791b      	ldrb	r3, [r3, #4]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d00e      	beq.n	800b1de <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	791b      	ldrb	r3, [r3, #4]
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f002 fec9 	bl	800df5e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	791b      	ldrb	r3, [r3, #4]
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f002 fef4 	bl	800dfc0 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b1e4:	69db      	ldr	r3, [r3, #28]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d00b      	beq.n	800b202 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b1f0:	69db      	ldr	r3, [r3, #28]
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f005 fdce 	bl	8010d94 <free>
    phost->pActiveClass->pData = 0U;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b1fe:	2200      	movs	r2, #0
 800b200:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b202:	2300      	movs	r3, #0
}
 800b204:	4618      	mov	r0, r3
 800b206:	3710      	adds	r7, #16
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b21a:	69db      	ldr	r3, [r3, #28]
 800b21c:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b21e:	2301      	movs	r3, #1
 800b220:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	7b9b      	ldrb	r3, [r3, #14]
 800b226:	2b03      	cmp	r3, #3
 800b228:	d041      	beq.n	800b2ae <USBH_MSC_ClassRequest+0xa2>
 800b22a:	2b03      	cmp	r3, #3
 800b22c:	dc4b      	bgt.n	800b2c6 <USBH_MSC_ClassRequest+0xba>
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d001      	beq.n	800b236 <USBH_MSC_ClassRequest+0x2a>
 800b232:	2b02      	cmp	r3, #2
 800b234:	d147      	bne.n	800b2c6 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	4619      	mov	r1, r3
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 fcef 	bl	800bc1e <USBH_MSC_BOT_REQ_GetMaxLUN>
 800b240:	4603      	mov	r3, r0
 800b242:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800b244:	7bfb      	ldrb	r3, [r7, #15]
 800b246:	2b03      	cmp	r3, #3
 800b248:	d104      	bne.n	800b254 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	2200      	movs	r2, #0
 800b24e:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800b250:	2300      	movs	r3, #0
 800b252:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800b254:	7bfb      	ldrb	r3, [r7, #15]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d137      	bne.n	800b2ca <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	2b02      	cmp	r3, #2
 800b260:	d804      	bhi.n	800b26c <USBH_MSC_ClassRequest+0x60>
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	3301      	adds	r3, #1
 800b268:	b2da      	uxtb	r2, r3
 800b26a:	e000      	b.n	800b26e <USBH_MSC_ClassRequest+0x62>
 800b26c:	2202      	movs	r2, #2
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800b272:	2300      	movs	r3, #0
 800b274:	73bb      	strb	r3, [r7, #14]
 800b276:	e014      	b.n	800b2a2 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800b278:	7bbb      	ldrb	r3, [r7, #14]
 800b27a:	68ba      	ldr	r2, [r7, #8]
 800b27c:	2134      	movs	r1, #52	@ 0x34
 800b27e:	fb01 f303 	mul.w	r3, r1, r3
 800b282:	4413      	add	r3, r2
 800b284:	3392      	adds	r3, #146	@ 0x92
 800b286:	2202      	movs	r2, #2
 800b288:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800b28a:	7bbb      	ldrb	r3, [r7, #14]
 800b28c:	68ba      	ldr	r2, [r7, #8]
 800b28e:	2134      	movs	r1, #52	@ 0x34
 800b290:	fb01 f303 	mul.w	r3, r1, r3
 800b294:	4413      	add	r3, r2
 800b296:	33c1      	adds	r3, #193	@ 0xc1
 800b298:	2200      	movs	r2, #0
 800b29a:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800b29c:	7bbb      	ldrb	r3, [r7, #14]
 800b29e:	3301      	adds	r3, #1
 800b2a0:	73bb      	strb	r3, [r7, #14]
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	7bba      	ldrb	r2, [r7, #14]
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d3e5      	bcc.n	800b278 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800b2ac:	e00d      	b.n	800b2ca <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800b2ae:	2100      	movs	r1, #0
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f002 f8af 	bl	800d414 <USBH_ClrFeature>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d108      	bne.n	800b2ce <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	7bda      	ldrb	r2, [r3, #15]
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	739a      	strb	r2, [r3, #14]
      }
      break;
 800b2c4:	e003      	b.n	800b2ce <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800b2c6:	bf00      	nop
 800b2c8:	e002      	b.n	800b2d0 <USBH_MSC_ClassRequest+0xc4>
      break;
 800b2ca:	bf00      	nop
 800b2cc:	e000      	b.n	800b2d0 <USBH_MSC_ClassRequest+0xc4>
      break;
 800b2ce:	bf00      	nop
  }

  return status;
 800b2d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3710      	adds	r7, #16
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}
	...

0800b2dc <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b086      	sub	sp, #24
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b2ea:	69db      	ldr	r3, [r3, #28]
 800b2ec:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	7b1b      	ldrb	r3, [r3, #12]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d003      	beq.n	800b30a <USBH_MSC_Process+0x2e>
 800b302:	2b01      	cmp	r3, #1
 800b304:	f000 826f 	beq.w	800b7e6 <USBH_MSC_Process+0x50a>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800b308:	e270      	b.n	800b7ec <USBH_MSC_Process+0x510>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b310:	693a      	ldr	r2, [r7, #16]
 800b312:	7812      	ldrb	r2, [r2, #0]
 800b314:	4293      	cmp	r3, r2
 800b316:	f080 824e 	bcs.w	800b7b6 <USBH_MSC_Process+0x4da>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b320:	4619      	mov	r1, r3
 800b322:	693a      	ldr	r2, [r7, #16]
 800b324:	2334      	movs	r3, #52	@ 0x34
 800b326:	fb01 f303 	mul.w	r3, r1, r3
 800b32a:	4413      	add	r3, r2
 800b32c:	3391      	adds	r3, #145	@ 0x91
 800b32e:	2201      	movs	r2, #1
 800b330:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b338:	4619      	mov	r1, r3
 800b33a:	693a      	ldr	r2, [r7, #16]
 800b33c:	2334      	movs	r3, #52	@ 0x34
 800b33e:	fb01 f303 	mul.w	r3, r1, r3
 800b342:	4413      	add	r3, r2
 800b344:	3390      	adds	r3, #144	@ 0x90
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	2b08      	cmp	r3, #8
 800b34a:	f200 8242 	bhi.w	800b7d2 <USBH_MSC_Process+0x4f6>
 800b34e:	a201      	add	r2, pc, #4	@ (adr r2, 800b354 <USBH_MSC_Process+0x78>)
 800b350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b354:	0800b379 	.word	0x0800b379
 800b358:	0800b7d3 	.word	0x0800b7d3
 800b35c:	0800b441 	.word	0x0800b441
 800b360:	0800b5c5 	.word	0x0800b5c5
 800b364:	0800b39f 	.word	0x0800b39f
 800b368:	0800b691 	.word	0x0800b691
 800b36c:	0800b7d3 	.word	0x0800b7d3
 800b370:	0800b7d3 	.word	0x0800b7d3
 800b374:	0800b7a5 	.word	0x0800b7a5
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b37e:	4619      	mov	r1, r3
 800b380:	693a      	ldr	r2, [r7, #16]
 800b382:	2334      	movs	r3, #52	@ 0x34
 800b384:	fb01 f303 	mul.w	r3, r1, r3
 800b388:	4413      	add	r3, r2
 800b38a:	3390      	adds	r3, #144	@ 0x90
 800b38c:	2204      	movs	r2, #4
 800b38e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
            break;
 800b39c:	e222      	b.n	800b7e4 <USBH_MSC_Process+0x508>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b3a4:	b2d9      	uxtb	r1, r3
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	2334      	movs	r3, #52	@ 0x34
 800b3b0:	fb02 f303 	mul.w	r3, r2, r3
 800b3b4:	3398      	adds	r3, #152	@ 0x98
 800b3b6:	693a      	ldr	r2, [r7, #16]
 800b3b8:	4413      	add	r3, r2
 800b3ba:	3307      	adds	r3, #7
 800b3bc:	461a      	mov	r2, r3
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 ff69 	bl	800c296 <USBH_MSC_SCSI_Inquiry>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b3c8:	7bfb      	ldrb	r3, [r7, #15]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d10b      	bne.n	800b3e6 <USBH_MSC_Process+0x10a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b3d4:	4619      	mov	r1, r3
 800b3d6:	693a      	ldr	r2, [r7, #16]
 800b3d8:	2334      	movs	r3, #52	@ 0x34
 800b3da:	fb01 f303 	mul.w	r3, r1, r3
 800b3de:	4413      	add	r3, r2
 800b3e0:	3390      	adds	r3, #144	@ 0x90
 800b3e2:	2202      	movs	r2, #2
 800b3e4:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800b3e6:	7bfb      	ldrb	r3, [r7, #15]
 800b3e8:	2b02      	cmp	r3, #2
 800b3ea:	d10c      	bne.n	800b406 <USBH_MSC_Process+0x12a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	693a      	ldr	r2, [r7, #16]
 800b3f6:	2334      	movs	r3, #52	@ 0x34
 800b3f8:	fb01 f303 	mul.w	r3, r1, r3
 800b3fc:	4413      	add	r3, r2
 800b3fe:	3390      	adds	r3, #144	@ 0x90
 800b400:	2205      	movs	r2, #5
 800b402:	701a      	strb	r2, [r3, #0]
            break;
 800b404:	e1e7      	b.n	800b7d6 <USBH_MSC_Process+0x4fa>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b406:	7bfb      	ldrb	r3, [r7, #15]
 800b408:	2b04      	cmp	r3, #4
 800b40a:	f040 81e4 	bne.w	800b7d6 <USBH_MSC_Process+0x4fa>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b414:	4619      	mov	r1, r3
 800b416:	693a      	ldr	r2, [r7, #16]
 800b418:	2334      	movs	r3, #52	@ 0x34
 800b41a:	fb01 f303 	mul.w	r3, r1, r3
 800b41e:	4413      	add	r3, r2
 800b420:	3390      	adds	r3, #144	@ 0x90
 800b422:	2201      	movs	r2, #1
 800b424:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b42c:	4619      	mov	r1, r3
 800b42e:	693a      	ldr	r2, [r7, #16]
 800b430:	2334      	movs	r3, #52	@ 0x34
 800b432:	fb01 f303 	mul.w	r3, r1, r3
 800b436:	4413      	add	r3, r2
 800b438:	3391      	adds	r3, #145	@ 0x91
 800b43a:	2202      	movs	r2, #2
 800b43c:	701a      	strb	r2, [r3, #0]
            break;
 800b43e:	e1ca      	b.n	800b7d6 <USBH_MSC_Process+0x4fa>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b446:	b2db      	uxtb	r3, r3
 800b448:	4619      	mov	r1, r3
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 fe66 	bl	800c11c <USBH_MSC_SCSI_TestUnitReady>
 800b450:	4603      	mov	r3, r0
 800b452:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800b454:	7bbb      	ldrb	r3, [r7, #14]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d149      	bne.n	800b4ee <USBH_MSC_Process+0x212>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b460:	4619      	mov	r1, r3
 800b462:	693a      	ldr	r2, [r7, #16]
 800b464:	2334      	movs	r3, #52	@ 0x34
 800b466:	fb01 f303 	mul.w	r3, r1, r3
 800b46a:	4413      	add	r3, r2
 800b46c:	3392      	adds	r3, #146	@ 0x92
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d00c      	beq.n	800b48e <USBH_MSC_Process+0x1b2>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b47a:	4619      	mov	r1, r3
 800b47c:	693a      	ldr	r2, [r7, #16]
 800b47e:	2334      	movs	r3, #52	@ 0x34
 800b480:	fb01 f303 	mul.w	r3, r1, r3
 800b484:	4413      	add	r3, r2
 800b486:	33c1      	adds	r3, #193	@ 0xc1
 800b488:	2201      	movs	r2, #1
 800b48a:	701a      	strb	r2, [r3, #0]
 800b48c:	e00b      	b.n	800b4a6 <USBH_MSC_Process+0x1ca>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b494:	4619      	mov	r1, r3
 800b496:	693a      	ldr	r2, [r7, #16]
 800b498:	2334      	movs	r3, #52	@ 0x34
 800b49a:	fb01 f303 	mul.w	r3, r1, r3
 800b49e:	4413      	add	r3, r2
 800b4a0:	33c1      	adds	r3, #193	@ 0xc1
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	693a      	ldr	r2, [r7, #16]
 800b4b0:	2334      	movs	r3, #52	@ 0x34
 800b4b2:	fb01 f303 	mul.w	r3, r1, r3
 800b4b6:	4413      	add	r3, r2
 800b4b8:	3390      	adds	r3, #144	@ 0x90
 800b4ba:	2203      	movs	r2, #3
 800b4bc:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	693a      	ldr	r2, [r7, #16]
 800b4c8:	2334      	movs	r3, #52	@ 0x34
 800b4ca:	fb01 f303 	mul.w	r3, r1, r3
 800b4ce:	4413      	add	r3, r2
 800b4d0:	3391      	adds	r3, #145	@ 0x91
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b4dc:	4619      	mov	r1, r3
 800b4de:	693a      	ldr	r2, [r7, #16]
 800b4e0:	2334      	movs	r3, #52	@ 0x34
 800b4e2:	fb01 f303 	mul.w	r3, r1, r3
 800b4e6:	4413      	add	r3, r2
 800b4e8:	3392      	adds	r3, #146	@ 0x92
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800b4ee:	7bbb      	ldrb	r3, [r7, #14]
 800b4f0:	2b02      	cmp	r3, #2
 800b4f2:	d14a      	bne.n	800b58a <USBH_MSC_Process+0x2ae>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800b4f4:	693b      	ldr	r3, [r7, #16]
 800b4f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	693a      	ldr	r2, [r7, #16]
 800b4fe:	2334      	movs	r3, #52	@ 0x34
 800b500:	fb01 f303 	mul.w	r3, r1, r3
 800b504:	4413      	add	r3, r2
 800b506:	3392      	adds	r3, #146	@ 0x92
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	2b02      	cmp	r3, #2
 800b50c:	d00c      	beq.n	800b528 <USBH_MSC_Process+0x24c>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b514:	4619      	mov	r1, r3
 800b516:	693a      	ldr	r2, [r7, #16]
 800b518:	2334      	movs	r3, #52	@ 0x34
 800b51a:	fb01 f303 	mul.w	r3, r1, r3
 800b51e:	4413      	add	r3, r2
 800b520:	33c1      	adds	r3, #193	@ 0xc1
 800b522:	2201      	movs	r2, #1
 800b524:	701a      	strb	r2, [r3, #0]
 800b526:	e00b      	b.n	800b540 <USBH_MSC_Process+0x264>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b52e:	4619      	mov	r1, r3
 800b530:	693a      	ldr	r2, [r7, #16]
 800b532:	2334      	movs	r3, #52	@ 0x34
 800b534:	fb01 f303 	mul.w	r3, r1, r3
 800b538:	4413      	add	r3, r2
 800b53a:	33c1      	adds	r3, #193	@ 0xc1
 800b53c:	2200      	movs	r2, #0
 800b53e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b546:	4619      	mov	r1, r3
 800b548:	693a      	ldr	r2, [r7, #16]
 800b54a:	2334      	movs	r3, #52	@ 0x34
 800b54c:	fb01 f303 	mul.w	r3, r1, r3
 800b550:	4413      	add	r3, r2
 800b552:	3390      	adds	r3, #144	@ 0x90
 800b554:	2205      	movs	r2, #5
 800b556:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b55e:	4619      	mov	r1, r3
 800b560:	693a      	ldr	r2, [r7, #16]
 800b562:	2334      	movs	r3, #52	@ 0x34
 800b564:	fb01 f303 	mul.w	r3, r1, r3
 800b568:	4413      	add	r3, r2
 800b56a:	3391      	adds	r3, #145	@ 0x91
 800b56c:	2201      	movs	r2, #1
 800b56e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b576:	4619      	mov	r1, r3
 800b578:	693a      	ldr	r2, [r7, #16]
 800b57a:	2334      	movs	r3, #52	@ 0x34
 800b57c:	fb01 f303 	mul.w	r3, r1, r3
 800b580:	4413      	add	r3, r2
 800b582:	3392      	adds	r3, #146	@ 0x92
 800b584:	2202      	movs	r2, #2
 800b586:	701a      	strb	r2, [r3, #0]
            break;
 800b588:	e127      	b.n	800b7da <USBH_MSC_Process+0x4fe>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800b58a:	7bbb      	ldrb	r3, [r7, #14]
 800b58c:	2b04      	cmp	r3, #4
 800b58e:	f040 8124 	bne.w	800b7da <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b598:	4619      	mov	r1, r3
 800b59a:	693a      	ldr	r2, [r7, #16]
 800b59c:	2334      	movs	r3, #52	@ 0x34
 800b59e:	fb01 f303 	mul.w	r3, r1, r3
 800b5a2:	4413      	add	r3, r2
 800b5a4:	3390      	adds	r3, #144	@ 0x90
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	693a      	ldr	r2, [r7, #16]
 800b5b4:	2334      	movs	r3, #52	@ 0x34
 800b5b6:	fb01 f303 	mul.w	r3, r1, r3
 800b5ba:	4413      	add	r3, r2
 800b5bc:	3391      	adds	r3, #145	@ 0x91
 800b5be:	2202      	movs	r2, #2
 800b5c0:	701a      	strb	r2, [r3, #0]
            break;
 800b5c2:	e10a      	b.n	800b7da <USBH_MSC_Process+0x4fe>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b5ca:	b2d9      	uxtb	r1, r3
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	2334      	movs	r3, #52	@ 0x34
 800b5d6:	fb02 f303 	mul.w	r3, r2, r3
 800b5da:	3390      	adds	r3, #144	@ 0x90
 800b5dc:	693a      	ldr	r2, [r7, #16]
 800b5de:	4413      	add	r3, r2
 800b5e0:	3304      	adds	r3, #4
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 fddc 	bl	800c1a2 <USBH_MSC_SCSI_ReadCapacity>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b5ee:	7bfb      	ldrb	r3, [r7, #15]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d120      	bne.n	800b636 <USBH_MSC_Process+0x35a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b5fa:	4619      	mov	r1, r3
 800b5fc:	693a      	ldr	r2, [r7, #16]
 800b5fe:	2334      	movs	r3, #52	@ 0x34
 800b600:	fb01 f303 	mul.w	r3, r1, r3
 800b604:	4413      	add	r3, r2
 800b606:	3390      	adds	r3, #144	@ 0x90
 800b608:	2201      	movs	r2, #1
 800b60a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b612:	4619      	mov	r1, r3
 800b614:	693a      	ldr	r2, [r7, #16]
 800b616:	2334      	movs	r3, #52	@ 0x34
 800b618:	fb01 f303 	mul.w	r3, r1, r3
 800b61c:	4413      	add	r3, r2
 800b61e:	3391      	adds	r3, #145	@ 0x91
 800b620:	2200      	movs	r2, #0
 800b622:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b62a:	3301      	adds	r3, #1
 800b62c:	b29a      	uxth	r2, r3
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 800b634:	e0d3      	b.n	800b7de <USBH_MSC_Process+0x502>
            else if (scsi_status == USBH_FAIL)
 800b636:	7bfb      	ldrb	r3, [r7, #15]
 800b638:	2b02      	cmp	r3, #2
 800b63a:	d10c      	bne.n	800b656 <USBH_MSC_Process+0x37a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b642:	4619      	mov	r1, r3
 800b644:	693a      	ldr	r2, [r7, #16]
 800b646:	2334      	movs	r3, #52	@ 0x34
 800b648:	fb01 f303 	mul.w	r3, r1, r3
 800b64c:	4413      	add	r3, r2
 800b64e:	3390      	adds	r3, #144	@ 0x90
 800b650:	2205      	movs	r2, #5
 800b652:	701a      	strb	r2, [r3, #0]
            break;
 800b654:	e0c3      	b.n	800b7de <USBH_MSC_Process+0x502>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b656:	7bfb      	ldrb	r3, [r7, #15]
 800b658:	2b04      	cmp	r3, #4
 800b65a:	f040 80c0 	bne.w	800b7de <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b664:	4619      	mov	r1, r3
 800b666:	693a      	ldr	r2, [r7, #16]
 800b668:	2334      	movs	r3, #52	@ 0x34
 800b66a:	fb01 f303 	mul.w	r3, r1, r3
 800b66e:	4413      	add	r3, r2
 800b670:	3390      	adds	r3, #144	@ 0x90
 800b672:	2201      	movs	r2, #1
 800b674:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b67c:	4619      	mov	r1, r3
 800b67e:	693a      	ldr	r2, [r7, #16]
 800b680:	2334      	movs	r3, #52	@ 0x34
 800b682:	fb01 f303 	mul.w	r3, r1, r3
 800b686:	4413      	add	r3, r2
 800b688:	3391      	adds	r3, #145	@ 0x91
 800b68a:	2202      	movs	r2, #2
 800b68c:	701a      	strb	r2, [r3, #0]
            break;
 800b68e:	e0a6      	b.n	800b7de <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b696:	b2d9      	uxtb	r1, r3
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b69e:	461a      	mov	r2, r3
 800b6a0:	2334      	movs	r3, #52	@ 0x34
 800b6a2:	fb02 f303 	mul.w	r3, r2, r3
 800b6a6:	3398      	adds	r3, #152	@ 0x98
 800b6a8:	693a      	ldr	r2, [r7, #16]
 800b6aa:	4413      	add	r3, r2
 800b6ac:	3304      	adds	r3, #4
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f000 fe95 	bl	800c3e0 <USBH_MSC_SCSI_RequestSense>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b6ba:	7bfb      	ldrb	r3, [r7, #15]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d145      	bne.n	800b74c <USBH_MSC_Process+0x470>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	693a      	ldr	r2, [r7, #16]
 800b6ca:	2334      	movs	r3, #52	@ 0x34
 800b6cc:	fb01 f303 	mul.w	r3, r1, r3
 800b6d0:	4413      	add	r3, r2
 800b6d2:	339c      	adds	r3, #156	@ 0x9c
 800b6d4:	781b      	ldrb	r3, [r3, #0]
 800b6d6:	2b06      	cmp	r3, #6
 800b6d8:	d00c      	beq.n	800b6f4 <USBH_MSC_Process+0x418>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	693a      	ldr	r2, [r7, #16]
 800b6e4:	2334      	movs	r3, #52	@ 0x34
 800b6e6:	fb01 f303 	mul.w	r3, r1, r3
 800b6ea:	4413      	add	r3, r2
 800b6ec:	339c      	adds	r3, #156	@ 0x9c
 800b6ee:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800b6f0:	2b02      	cmp	r3, #2
 800b6f2:	d117      	bne.n	800b724 <USBH_MSC_Process+0x448>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800b700:	1ad3      	subs	r3, r2, r3
 800b702:	f242 720f 	movw	r2, #9999	@ 0x270f
 800b706:	4293      	cmp	r3, r2
 800b708:	d80c      	bhi.n	800b724 <USBH_MSC_Process+0x448>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b710:	4619      	mov	r1, r3
 800b712:	693a      	ldr	r2, [r7, #16]
 800b714:	2334      	movs	r3, #52	@ 0x34
 800b716:	fb01 f303 	mul.w	r3, r1, r3
 800b71a:	4413      	add	r3, r2
 800b71c:	3390      	adds	r3, #144	@ 0x90
 800b71e:	2202      	movs	r2, #2
 800b720:	701a      	strb	r2, [r3, #0]
                  break;
 800b722:	e05f      	b.n	800b7e4 <USBH_MSC_Process+0x508>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b72a:	4619      	mov	r1, r3
 800b72c:	693a      	ldr	r2, [r7, #16]
 800b72e:	2334      	movs	r3, #52	@ 0x34
 800b730:	fb01 f303 	mul.w	r3, r1, r3
 800b734:	4413      	add	r3, r2
 800b736:	3390      	adds	r3, #144	@ 0x90
 800b738:	2201      	movs	r2, #1
 800b73a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b742:	3301      	adds	r3, #1
 800b744:	b29a      	uxth	r2, r3
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            if (scsi_status == USBH_FAIL)
 800b74c:	7bfb      	ldrb	r3, [r7, #15]
 800b74e:	2b02      	cmp	r3, #2
 800b750:	d10c      	bne.n	800b76c <USBH_MSC_Process+0x490>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b758:	4619      	mov	r1, r3
 800b75a:	693a      	ldr	r2, [r7, #16]
 800b75c:	2334      	movs	r3, #52	@ 0x34
 800b75e:	fb01 f303 	mul.w	r3, r1, r3
 800b762:	4413      	add	r3, r2
 800b764:	3390      	adds	r3, #144	@ 0x90
 800b766:	2208      	movs	r2, #8
 800b768:	701a      	strb	r2, [r3, #0]
            break;
 800b76a:	e03a      	b.n	800b7e2 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b76c:	7bfb      	ldrb	r3, [r7, #15]
 800b76e:	2b04      	cmp	r3, #4
 800b770:	d137      	bne.n	800b7e2 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b778:	4619      	mov	r1, r3
 800b77a:	693a      	ldr	r2, [r7, #16]
 800b77c:	2334      	movs	r3, #52	@ 0x34
 800b77e:	fb01 f303 	mul.w	r3, r1, r3
 800b782:	4413      	add	r3, r2
 800b784:	3390      	adds	r3, #144	@ 0x90
 800b786:	2201      	movs	r2, #1
 800b788:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b790:	4619      	mov	r1, r3
 800b792:	693a      	ldr	r2, [r7, #16]
 800b794:	2334      	movs	r3, #52	@ 0x34
 800b796:	fb01 f303 	mul.w	r3, r1, r3
 800b79a:	4413      	add	r3, r2
 800b79c:	3391      	adds	r3, #145	@ 0x91
 800b79e:	2202      	movs	r2, #2
 800b7a0:	701a      	strb	r2, [r3, #0]
            break;
 800b7a2:	e01e      	b.n	800b7e2 <USBH_MSC_Process+0x506>
            MSC_Handle->current_lun++;
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	b29a      	uxth	r2, r3
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 800b7b4:	e016      	b.n	800b7e4 <USBH_MSC_Process+0x508>
        MSC_Handle->current_lun = 0U;
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        MSC_Handle->state = MSC_IDLE;
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b7ca:	2102      	movs	r1, #2
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	4798      	blx	r3
      break;
 800b7d0:	e00c      	b.n	800b7ec <USBH_MSC_Process+0x510>
            break;
 800b7d2:	bf00      	nop
 800b7d4:	e00a      	b.n	800b7ec <USBH_MSC_Process+0x510>
            break;
 800b7d6:	bf00      	nop
 800b7d8:	e008      	b.n	800b7ec <USBH_MSC_Process+0x510>
            break;
 800b7da:	bf00      	nop
 800b7dc:	e006      	b.n	800b7ec <USBH_MSC_Process+0x510>
            break;
 800b7de:	bf00      	nop
 800b7e0:	e004      	b.n	800b7ec <USBH_MSC_Process+0x510>
            break;
 800b7e2:	bf00      	nop
      break;
 800b7e4:	e002      	b.n	800b7ec <USBH_MSC_Process+0x510>
      error = USBH_OK;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	75fb      	strb	r3, [r7, #23]
      break;
 800b7ea:	bf00      	nop
  }
  return error;
 800b7ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3718      	adds	r7, #24
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop

0800b7f8 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b083      	sub	sp, #12
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b800:	2300      	movs	r3, #0
}
 800b802:	4618      	mov	r0, r3
 800b804:	370c      	adds	r7, #12
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr

0800b80e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b80e:	b580      	push	{r7, lr}
 800b810:	b088      	sub	sp, #32
 800b812:	af02      	add	r7, sp, #8
 800b814:	6078      	str	r0, [r7, #4]
 800b816:	460b      	mov	r3, r1
 800b818:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b820:	69db      	ldr	r3, [r3, #28]
 800b822:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800b824:	2301      	movs	r3, #1
 800b826:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800b828:	2301      	movs	r3, #1
 800b82a:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800b82c:	78fb      	ldrb	r3, [r7, #3]
 800b82e:	693a      	ldr	r2, [r7, #16]
 800b830:	2134      	movs	r1, #52	@ 0x34
 800b832:	fb01 f303 	mul.w	r3, r1, r3
 800b836:	4413      	add	r3, r2
 800b838:	3390      	adds	r3, #144	@ 0x90
 800b83a:	781b      	ldrb	r3, [r3, #0]
 800b83c:	2b07      	cmp	r3, #7
 800b83e:	d03c      	beq.n	800b8ba <USBH_MSC_RdWrProcess+0xac>
 800b840:	2b07      	cmp	r3, #7
 800b842:	f300 80a7 	bgt.w	800b994 <USBH_MSC_RdWrProcess+0x186>
 800b846:	2b05      	cmp	r3, #5
 800b848:	d06c      	beq.n	800b924 <USBH_MSC_RdWrProcess+0x116>
 800b84a:	2b06      	cmp	r3, #6
 800b84c:	f040 80a2 	bne.w	800b994 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800b850:	78f9      	ldrb	r1, [r7, #3]
 800b852:	2300      	movs	r3, #0
 800b854:	9300      	str	r3, [sp, #0]
 800b856:	2300      	movs	r3, #0
 800b858:	2200      	movs	r2, #0
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 fea4 	bl	800c5a8 <USBH_MSC_SCSI_Read>
 800b860:	4603      	mov	r3, r0
 800b862:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b864:	7bfb      	ldrb	r3, [r7, #15]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d10b      	bne.n	800b882 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b86a:	78fb      	ldrb	r3, [r7, #3]
 800b86c:	693a      	ldr	r2, [r7, #16]
 800b86e:	2134      	movs	r1, #52	@ 0x34
 800b870:	fb01 f303 	mul.w	r3, r1, r3
 800b874:	4413      	add	r3, r2
 800b876:	3390      	adds	r3, #144	@ 0x90
 800b878:	2201      	movs	r2, #1
 800b87a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800b87c:	2300      	movs	r3, #0
 800b87e:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b880:	e08a      	b.n	800b998 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800b882:	7bfb      	ldrb	r3, [r7, #15]
 800b884:	2b02      	cmp	r3, #2
 800b886:	d109      	bne.n	800b89c <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800b888:	78fb      	ldrb	r3, [r7, #3]
 800b88a:	693a      	ldr	r2, [r7, #16]
 800b88c:	2134      	movs	r1, #52	@ 0x34
 800b88e:	fb01 f303 	mul.w	r3, r1, r3
 800b892:	4413      	add	r3, r2
 800b894:	3390      	adds	r3, #144	@ 0x90
 800b896:	2205      	movs	r2, #5
 800b898:	701a      	strb	r2, [r3, #0]
      break;
 800b89a:	e07d      	b.n	800b998 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b89c:	7bfb      	ldrb	r3, [r7, #15]
 800b89e:	2b04      	cmp	r3, #4
 800b8a0:	d17a      	bne.n	800b998 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b8a2:	78fb      	ldrb	r3, [r7, #3]
 800b8a4:	693a      	ldr	r2, [r7, #16]
 800b8a6:	2134      	movs	r1, #52	@ 0x34
 800b8a8:	fb01 f303 	mul.w	r3, r1, r3
 800b8ac:	4413      	add	r3, r2
 800b8ae:	3390      	adds	r3, #144	@ 0x90
 800b8b0:	2208      	movs	r2, #8
 800b8b2:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b8b4:	2302      	movs	r3, #2
 800b8b6:	75fb      	strb	r3, [r7, #23]
      break;
 800b8b8:	e06e      	b.n	800b998 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800b8ba:	78f9      	ldrb	r1, [r7, #3]
 800b8bc:	2300      	movs	r3, #0
 800b8be:	9300      	str	r3, [sp, #0]
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 fe04 	bl	800c4d2 <USBH_MSC_SCSI_Write>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b8ce:	7bfb      	ldrb	r3, [r7, #15]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d10b      	bne.n	800b8ec <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b8d4:	78fb      	ldrb	r3, [r7, #3]
 800b8d6:	693a      	ldr	r2, [r7, #16]
 800b8d8:	2134      	movs	r1, #52	@ 0x34
 800b8da:	fb01 f303 	mul.w	r3, r1, r3
 800b8de:	4413      	add	r3, r2
 800b8e0:	3390      	adds	r3, #144	@ 0x90
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b8ea:	e057      	b.n	800b99c <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800b8ec:	7bfb      	ldrb	r3, [r7, #15]
 800b8ee:	2b02      	cmp	r3, #2
 800b8f0:	d109      	bne.n	800b906 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800b8f2:	78fb      	ldrb	r3, [r7, #3]
 800b8f4:	693a      	ldr	r2, [r7, #16]
 800b8f6:	2134      	movs	r1, #52	@ 0x34
 800b8f8:	fb01 f303 	mul.w	r3, r1, r3
 800b8fc:	4413      	add	r3, r2
 800b8fe:	3390      	adds	r3, #144	@ 0x90
 800b900:	2205      	movs	r2, #5
 800b902:	701a      	strb	r2, [r3, #0]
      break;
 800b904:	e04a      	b.n	800b99c <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b906:	7bfb      	ldrb	r3, [r7, #15]
 800b908:	2b04      	cmp	r3, #4
 800b90a:	d147      	bne.n	800b99c <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b90c:	78fb      	ldrb	r3, [r7, #3]
 800b90e:	693a      	ldr	r2, [r7, #16]
 800b910:	2134      	movs	r1, #52	@ 0x34
 800b912:	fb01 f303 	mul.w	r3, r1, r3
 800b916:	4413      	add	r3, r2
 800b918:	3390      	adds	r3, #144	@ 0x90
 800b91a:	2208      	movs	r2, #8
 800b91c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b91e:	2302      	movs	r3, #2
 800b920:	75fb      	strb	r3, [r7, #23]
      break;
 800b922:	e03b      	b.n	800b99c <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800b924:	78fb      	ldrb	r3, [r7, #3]
 800b926:	2234      	movs	r2, #52	@ 0x34
 800b928:	fb02 f303 	mul.w	r3, r2, r3
 800b92c:	3398      	adds	r3, #152	@ 0x98
 800b92e:	693a      	ldr	r2, [r7, #16]
 800b930:	4413      	add	r3, r2
 800b932:	1d1a      	adds	r2, r3, #4
 800b934:	78fb      	ldrb	r3, [r7, #3]
 800b936:	4619      	mov	r1, r3
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f000 fd51 	bl	800c3e0 <USBH_MSC_SCSI_RequestSense>
 800b93e:	4603      	mov	r3, r0
 800b940:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b942:	7bfb      	ldrb	r3, [r7, #15]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d113      	bne.n	800b970 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b948:	78fb      	ldrb	r3, [r7, #3]
 800b94a:	693a      	ldr	r2, [r7, #16]
 800b94c:	2134      	movs	r1, #52	@ 0x34
 800b94e:	fb01 f303 	mul.w	r3, r1, r3
 800b952:	4413      	add	r3, r2
 800b954:	3390      	adds	r3, #144	@ 0x90
 800b956:	2201      	movs	r2, #1
 800b958:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800b95a:	78fb      	ldrb	r3, [r7, #3]
 800b95c:	693a      	ldr	r2, [r7, #16]
 800b95e:	2134      	movs	r1, #52	@ 0x34
 800b960:	fb01 f303 	mul.w	r3, r1, r3
 800b964:	4413      	add	r3, r2
 800b966:	3391      	adds	r3, #145	@ 0x91
 800b968:	2202      	movs	r2, #2
 800b96a:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800b96c:	2302      	movs	r3, #2
 800b96e:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800b970:	7bfb      	ldrb	r3, [r7, #15]
 800b972:	2b02      	cmp	r3, #2
 800b974:	d014      	beq.n	800b9a0 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b976:	7bfb      	ldrb	r3, [r7, #15]
 800b978:	2b04      	cmp	r3, #4
 800b97a:	d111      	bne.n	800b9a0 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b97c:	78fb      	ldrb	r3, [r7, #3]
 800b97e:	693a      	ldr	r2, [r7, #16]
 800b980:	2134      	movs	r1, #52	@ 0x34
 800b982:	fb01 f303 	mul.w	r3, r1, r3
 800b986:	4413      	add	r3, r2
 800b988:	3390      	adds	r3, #144	@ 0x90
 800b98a:	2208      	movs	r2, #8
 800b98c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b98e:	2302      	movs	r3, #2
 800b990:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b992:	e005      	b.n	800b9a0 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800b994:	bf00      	nop
 800b996:	e004      	b.n	800b9a2 <USBH_MSC_RdWrProcess+0x194>
      break;
 800b998:	bf00      	nop
 800b99a:	e002      	b.n	800b9a2 <USBH_MSC_RdWrProcess+0x194>
      break;
 800b99c:	bf00      	nop
 800b99e:	e000      	b.n	800b9a2 <USBH_MSC_RdWrProcess+0x194>
      break;
 800b9a0:	bf00      	nop

  }
  return error;
 800b9a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3718      	adds	r7, #24
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b085      	sub	sp, #20
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	460b      	mov	r3, r1
 800b9b6:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b9be:	69db      	ldr	r3, [r3, #28]
 800b9c0:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	b2db      	uxtb	r3, r3
 800b9c8:	2b0b      	cmp	r3, #11
 800b9ca:	d10c      	bne.n	800b9e6 <USBH_MSC_UnitIsReady+0x3a>
 800b9cc:	78fb      	ldrb	r3, [r7, #3]
 800b9ce:	68ba      	ldr	r2, [r7, #8]
 800b9d0:	2134      	movs	r1, #52	@ 0x34
 800b9d2:	fb01 f303 	mul.w	r3, r1, r3
 800b9d6:	4413      	add	r3, r2
 800b9d8:	3391      	adds	r3, #145	@ 0x91
 800b9da:	781b      	ldrb	r3, [r3, #0]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d102      	bne.n	800b9e6 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	73fb      	strb	r3, [r7, #15]
 800b9e4:	e001      	b.n	800b9ea <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800b9ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3714      	adds	r7, #20
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr

0800b9f8 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b086      	sub	sp, #24
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	460b      	mov	r3, r1
 800ba02:	607a      	str	r2, [r7, #4]
 800ba04:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ba0c:	69db      	ldr	r3, [r3, #28]
 800ba0e:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	781b      	ldrb	r3, [r3, #0]
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	2b0b      	cmp	r3, #11
 800ba18:	d10d      	bne.n	800ba36 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800ba1a:	7afb      	ldrb	r3, [r7, #11]
 800ba1c:	2234      	movs	r2, #52	@ 0x34
 800ba1e:	fb02 f303 	mul.w	r3, r2, r3
 800ba22:	3390      	adds	r3, #144	@ 0x90
 800ba24:	697a      	ldr	r2, [r7, #20]
 800ba26:	4413      	add	r3, r2
 800ba28:	2234      	movs	r2, #52	@ 0x34
 800ba2a:	4619      	mov	r1, r3
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f005 fad3 	bl	8010fd8 <memcpy>
    return USBH_OK;
 800ba32:	2300      	movs	r3, #0
 800ba34:	e000      	b.n	800ba38 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800ba36:	2302      	movs	r3, #2
  }
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3718      	adds	r7, #24
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b088      	sub	sp, #32
 800ba44:	af02      	add	r7, sp, #8
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	607a      	str	r2, [r7, #4]
 800ba4a:	603b      	str	r3, [r7, #0]
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ba56:	69db      	ldr	r3, [r3, #28]
 800ba58:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800ba60:	b2db      	uxtb	r3, r3
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d00e      	beq.n	800ba84 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800ba6c:	2b0b      	cmp	r3, #11
 800ba6e:	d109      	bne.n	800ba84 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800ba70:	7afb      	ldrb	r3, [r7, #11]
 800ba72:	697a      	ldr	r2, [r7, #20]
 800ba74:	2134      	movs	r1, #52	@ 0x34
 800ba76:	fb01 f303 	mul.w	r3, r1, r3
 800ba7a:	4413      	add	r3, r2
 800ba7c:	3390      	adds	r3, #144	@ 0x90
 800ba7e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800ba80:	2b01      	cmp	r3, #1
 800ba82:	d001      	beq.n	800ba88 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800ba84:	2302      	movs	r3, #2
 800ba86:	e040      	b.n	800bb0a <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	2206      	movs	r2, #6
 800ba8c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800ba8e:	7afb      	ldrb	r3, [r7, #11]
 800ba90:	697a      	ldr	r2, [r7, #20]
 800ba92:	2134      	movs	r1, #52	@ 0x34
 800ba94:	fb01 f303 	mul.w	r3, r1, r3
 800ba98:	4413      	add	r3, r2
 800ba9a:	3390      	adds	r3, #144	@ 0x90
 800ba9c:	2206      	movs	r2, #6
 800ba9e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800baa0:	7afb      	ldrb	r3, [r7, #11]
 800baa2:	b29a      	uxth	r2, r3
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800baaa:	7af9      	ldrb	r1, [r7, #11]
 800baac:	6a3b      	ldr	r3, [r7, #32]
 800baae:	9300      	str	r3, [sp, #0]
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	687a      	ldr	r2, [r7, #4]
 800bab4:	68f8      	ldr	r0, [r7, #12]
 800bab6:	f000 fd77 	bl	800c5a8 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800bac0:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bac2:	e016      	b.n	800baf2 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	1ad2      	subs	r2, r2, r3
 800bace:	6a3b      	ldr	r3, [r7, #32]
 800bad0:	f242 7110 	movw	r1, #10000	@ 0x2710
 800bad4:	fb01 f303 	mul.w	r3, r1, r3
 800bad8:	429a      	cmp	r2, r3
 800bada:	d805      	bhi.n	800bae8 <USBH_MSC_Read+0xa8>
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800bae2:	b2db      	uxtb	r3, r3
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d104      	bne.n	800baf2 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	2201      	movs	r2, #1
 800baec:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800baee:	2302      	movs	r3, #2
 800baf0:	e00b      	b.n	800bb0a <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800baf2:	7afb      	ldrb	r3, [r7, #11]
 800baf4:	4619      	mov	r1, r3
 800baf6:	68f8      	ldr	r0, [r7, #12]
 800baf8:	f7ff fe89 	bl	800b80e <USBH_MSC_RdWrProcess>
 800bafc:	4603      	mov	r3, r0
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	d0e0      	beq.n	800bac4 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	2201      	movs	r2, #1
 800bb06:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800bb08:	2300      	movs	r3, #0
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3718      	adds	r7, #24
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}

0800bb12 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b088      	sub	sp, #32
 800bb16:	af02      	add	r7, sp, #8
 800bb18:	60f8      	str	r0, [r7, #12]
 800bb1a:	607a      	str	r2, [r7, #4]
 800bb1c:	603b      	str	r3, [r7, #0]
 800bb1e:	460b      	mov	r3, r1
 800bb20:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bb28:	69db      	ldr	r3, [r3, #28]
 800bb2a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d00e      	beq.n	800bb56 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	781b      	ldrb	r3, [r3, #0]
 800bb3c:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800bb3e:	2b0b      	cmp	r3, #11
 800bb40:	d109      	bne.n	800bb56 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800bb42:	7afb      	ldrb	r3, [r7, #11]
 800bb44:	697a      	ldr	r2, [r7, #20]
 800bb46:	2134      	movs	r1, #52	@ 0x34
 800bb48:	fb01 f303 	mul.w	r3, r1, r3
 800bb4c:	4413      	add	r3, r2
 800bb4e:	3390      	adds	r3, #144	@ 0x90
 800bb50:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	d001      	beq.n	800bb5a <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800bb56:	2302      	movs	r3, #2
 800bb58:	e040      	b.n	800bbdc <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	2207      	movs	r2, #7
 800bb5e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800bb60:	7afb      	ldrb	r3, [r7, #11]
 800bb62:	697a      	ldr	r2, [r7, #20]
 800bb64:	2134      	movs	r1, #52	@ 0x34
 800bb66:	fb01 f303 	mul.w	r3, r1, r3
 800bb6a:	4413      	add	r3, r2
 800bb6c:	3390      	adds	r3, #144	@ 0x90
 800bb6e:	2207      	movs	r2, #7
 800bb70:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800bb72:	7afb      	ldrb	r3, [r7, #11]
 800bb74:	b29a      	uxth	r2, r3
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800bb7c:	7af9      	ldrb	r1, [r7, #11]
 800bb7e:	6a3b      	ldr	r3, [r7, #32]
 800bb80:	9300      	str	r3, [sp, #0]
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	68f8      	ldr	r0, [r7, #12]
 800bb88:	f000 fca3 	bl	800c4d2 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800bb92:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bb94:	e016      	b.n	800bbc4 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	1ad2      	subs	r2, r2, r3
 800bba0:	6a3b      	ldr	r3, [r7, #32]
 800bba2:	f242 7110 	movw	r1, #10000	@ 0x2710
 800bba6:	fb01 f303 	mul.w	r3, r1, r3
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d805      	bhi.n	800bbba <USBH_MSC_Write+0xa8>
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800bbb4:	b2db      	uxtb	r3, r3
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d104      	bne.n	800bbc4 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	2201      	movs	r2, #1
 800bbbe:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800bbc0:	2302      	movs	r3, #2
 800bbc2:	e00b      	b.n	800bbdc <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bbc4:	7afb      	ldrb	r3, [r7, #11]
 800bbc6:	4619      	mov	r1, r3
 800bbc8:	68f8      	ldr	r0, [r7, #12]
 800bbca:	f7ff fe20 	bl	800b80e <USBH_MSC_RdWrProcess>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	d0e0      	beq.n	800bb96 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800bbda:	2300      	movs	r3, #0
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3718      	adds	r7, #24
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}

0800bbe4 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b082      	sub	sp, #8
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2221      	movs	r2, #33	@ 0x21
 800bbf0:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	22ff      	movs	r2, #255	@ 0xff
 800bbf6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2200      	movs	r2, #0
 800bc02:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2200      	movs	r2, #0
 800bc08:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	2100      	movs	r1, #0
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f001 ff35 	bl	800da7e <USBH_CtlReq>
 800bc14:	4603      	mov	r3, r0
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3708      	adds	r7, #8
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}

0800bc1e <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800bc1e:	b580      	push	{r7, lr}
 800bc20:	b082      	sub	sp, #8
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	6078      	str	r0, [r7, #4]
 800bc26:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	22a1      	movs	r2, #161	@ 0xa1
 800bc2c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	22fe      	movs	r2, #254	@ 0xfe
 800bc32:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2200      	movs	r2, #0
 800bc38:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2201      	movs	r2, #1
 800bc44:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800bc46:	2201      	movs	r2, #1
 800bc48:	6839      	ldr	r1, [r7, #0]
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f001 ff17 	bl	800da7e <USBH_CtlReq>
 800bc50:	4603      	mov	r3, r0
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3708      	adds	r7, #8
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}
	...

0800bc5c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b085      	sub	sp, #20
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bc6a:	69db      	ldr	r3, [r3, #28]
 800bc6c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	4a09      	ldr	r2, [pc, #36]	@ (800bc98 <USBH_MSC_BOT_Init+0x3c>)
 800bc72:	655a      	str	r2, [r3, #84]	@ 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	4a09      	ldr	r2, [pc, #36]	@ (800bc9c <USBH_MSC_BOT_Init+0x40>)
 800bc78:	659a      	str	r2, [r3, #88]	@ 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2201      	movs	r2, #1
 800bc7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2201      	movs	r2, #1
 800bc86:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  return USBH_OK;
 800bc8a:	2300      	movs	r3, #0
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3714      	adds	r7, #20
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr
 800bc98:	43425355 	.word	0x43425355
 800bc9c:	20304050 	.word	0x20304050

0800bca0 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b088      	sub	sp, #32
 800bca4:	af02      	add	r7, sp, #8
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	460b      	mov	r3, r1
 800bcaa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800bcac:	2301      	movs	r3, #1
 800bcae:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bcc2:	69db      	ldr	r3, [r3, #28]
 800bcc4:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800bcd0:	3b01      	subs	r3, #1
 800bcd2:	2b0a      	cmp	r3, #10
 800bcd4:	f200 819e 	bhi.w	800c014 <USBH_MSC_BOT_Process+0x374>
 800bcd8:	a201      	add	r2, pc, #4	@ (adr r2, 800bce0 <USBH_MSC_BOT_Process+0x40>)
 800bcda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcde:	bf00      	nop
 800bce0:	0800bd0d 	.word	0x0800bd0d
 800bce4:	0800bd35 	.word	0x0800bd35
 800bce8:	0800bd9f 	.word	0x0800bd9f
 800bcec:	0800bdbd 	.word	0x0800bdbd
 800bcf0:	0800be41 	.word	0x0800be41
 800bcf4:	0800be63 	.word	0x0800be63
 800bcf8:	0800befb 	.word	0x0800befb
 800bcfc:	0800bf17 	.word	0x0800bf17
 800bd00:	0800bf69 	.word	0x0800bf69
 800bd04:	0800bf99 	.word	0x0800bf99
 800bd08:	0800bffb 	.word	0x0800bffb
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	78fa      	ldrb	r2, [r7, #3]
 800bd10:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	2202      	movs	r2, #2
 800bd18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	795b      	ldrb	r3, [r3, #5]
 800bd26:	2201      	movs	r2, #1
 800bd28:	9200      	str	r2, [sp, #0]
 800bd2a:	221f      	movs	r2, #31
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f002 f8b4 	bl	800de9a <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800bd32:	e17e      	b.n	800c032 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	795b      	ldrb	r3, [r3, #5]
 800bd38:	4619      	mov	r1, r3
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f004 ff64 	bl	8010c08 <USBH_LL_GetURBState>
 800bd40:	4603      	mov	r3, r0
 800bd42:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800bd44:	7d3b      	ldrb	r3, [r7, #20]
 800bd46:	2b01      	cmp	r3, #1
 800bd48:	d118      	bne.n	800bd7c <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d00f      	beq.n	800bd72 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800bd58:	b25b      	sxtb	r3, r3
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	da04      	bge.n	800bd68 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	2203      	movs	r2, #3
 800bd62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bd66:	e157      	b.n	800c018 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	2205      	movs	r2, #5
 800bd6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800bd70:	e152      	b.n	800c018 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	2207      	movs	r2, #7
 800bd76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800bd7a:	e14d      	b.n	800c018 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bd7c:	7d3b      	ldrb	r3, [r7, #20]
 800bd7e:	2b02      	cmp	r3, #2
 800bd80:	d104      	bne.n	800bd8c <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	2201      	movs	r2, #1
 800bd86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800bd8a:	e145      	b.n	800c018 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800bd8c:	7d3b      	ldrb	r3, [r7, #20]
 800bd8e:	2b05      	cmp	r3, #5
 800bd90:	f040 8142 	bne.w	800c018 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	220a      	movs	r2, #10
 800bd98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800bd9c:	e13c      	b.n	800c018 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	895a      	ldrh	r2, [r3, #10]
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	791b      	ldrb	r3, [r3, #4]
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f002 f899 	bl	800dee4 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	2204      	movs	r2, #4
 800bdb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      break;
 800bdba:	e13a      	b.n	800c032 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	791b      	ldrb	r3, [r3, #4]
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f004 ff20 	bl	8010c08 <USBH_LL_GetURBState>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800bdcc:	7d3b      	ldrb	r3, [r7, #20]
 800bdce:	2b01      	cmp	r3, #1
 800bdd0:	d12d      	bne.n	800be2e <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bdd6:	693a      	ldr	r2, [r7, #16]
 800bdd8:	8952      	ldrh	r2, [r2, #10]
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d910      	bls.n	800be00 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bde4:	693a      	ldr	r2, [r7, #16]
 800bde6:	8952      	ldrh	r2, [r2, #10]
 800bde8:	441a      	add	r2, r3
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bdf4:	693a      	ldr	r2, [r7, #16]
 800bdf6:	8952      	ldrh	r2, [r2, #10]
 800bdf8:	1a9a      	subs	r2, r3, r2
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bdfe:	e002      	b.n	800be06 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	2200      	movs	r2, #0
 800be04:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d00a      	beq.n	800be24 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	895a      	ldrh	r2, [r3, #10]
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	791b      	ldrb	r3, [r3, #4]
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f002 f861 	bl	800dee4 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800be22:	e0fb      	b.n	800c01c <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	2207      	movs	r2, #7
 800be28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800be2c:	e0f6      	b.n	800c01c <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800be2e:	7d3b      	ldrb	r3, [r7, #20]
 800be30:	2b05      	cmp	r3, #5
 800be32:	f040 80f3 	bne.w	800c01c <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	2209      	movs	r2, #9
 800be3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800be3e:	e0ed      	b.n	800c01c <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	891a      	ldrh	r2, [r3, #8]
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	795b      	ldrb	r3, [r3, #5]
 800be4e:	2001      	movs	r0, #1
 800be50:	9000      	str	r0, [sp, #0]
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f002 f821 	bl	800de9a <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	2206      	movs	r2, #6
 800be5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800be60:	e0e7      	b.n	800c032 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	795b      	ldrb	r3, [r3, #5]
 800be66:	4619      	mov	r1, r3
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f004 fecd 	bl	8010c08 <USBH_LL_GetURBState>
 800be6e:	4603      	mov	r3, r0
 800be70:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800be72:	7d3b      	ldrb	r3, [r7, #20]
 800be74:	2b01      	cmp	r3, #1
 800be76:	d12f      	bne.n	800bed8 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be7c:	693a      	ldr	r2, [r7, #16]
 800be7e:	8912      	ldrh	r2, [r2, #8]
 800be80:	4293      	cmp	r3, r2
 800be82:	d910      	bls.n	800bea6 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800be8a:	693a      	ldr	r2, [r7, #16]
 800be8c:	8912      	ldrh	r2, [r2, #8]
 800be8e:	441a      	add	r2, r3
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be9a:	693a      	ldr	r2, [r7, #16]
 800be9c:	8912      	ldrh	r2, [r2, #8]
 800be9e:	1a9a      	subs	r2, r3, r2
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bea4:	e002      	b.n	800beac <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	2200      	movs	r2, #0
 800beaa:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d00c      	beq.n	800bece <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	891a      	ldrh	r2, [r3, #8]
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	795b      	ldrb	r3, [r3, #5]
 800bec2:	2001      	movs	r0, #1
 800bec4:	9000      	str	r0, [sp, #0]
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f001 ffe7 	bl	800de9a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800becc:	e0a8      	b.n	800c020 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800bece:	693b      	ldr	r3, [r7, #16]
 800bed0:	2207      	movs	r2, #7
 800bed2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800bed6:	e0a3      	b.n	800c020 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bed8:	7d3b      	ldrb	r3, [r7, #20]
 800beda:	2b02      	cmp	r3, #2
 800bedc:	d104      	bne.n	800bee8 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	2205      	movs	r2, #5
 800bee2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800bee6:	e09b      	b.n	800c020 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800bee8:	7d3b      	ldrb	r3, [r7, #20]
 800beea:	2b05      	cmp	r3, #5
 800beec:	f040 8098 	bne.w	800c020 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	220a      	movs	r2, #10
 800bef4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800bef8:	e092      	b.n	800c020 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	791b      	ldrb	r3, [r3, #4]
 800bf04:	220d      	movs	r2, #13
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f001 ffec 	bl	800dee4 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	2208      	movs	r2, #8
 800bf10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800bf14:	e08d      	b.n	800c032 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	791b      	ldrb	r3, [r3, #4]
 800bf1a:	4619      	mov	r1, r3
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f004 fe73 	bl	8010c08 <USBH_LL_GetURBState>
 800bf22:	4603      	mov	r3, r0
 800bf24:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800bf26:	7d3b      	ldrb	r3, [r7, #20]
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	d115      	bne.n	800bf58 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	2201      	movs	r2, #1
 800bf30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	2201      	movs	r2, #1
 800bf38:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f000 f8a9 	bl	800c094 <USBH_MSC_DecodeCSW>
 800bf42:	4603      	mov	r3, r0
 800bf44:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800bf46:	7d7b      	ldrb	r3, [r7, #21]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d102      	bne.n	800bf52 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800bf50:	e068      	b.n	800c024 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800bf52:	2302      	movs	r3, #2
 800bf54:	75fb      	strb	r3, [r7, #23]
      break;
 800bf56:	e065      	b.n	800c024 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800bf58:	7d3b      	ldrb	r3, [r7, #20]
 800bf5a:	2b05      	cmp	r3, #5
 800bf5c:	d162      	bne.n	800c024 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	2209      	movs	r2, #9
 800bf62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800bf66:	e05d      	b.n	800c024 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800bf68:	78fb      	ldrb	r3, [r7, #3]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 f864 	bl	800c03c <USBH_MSC_BOT_Abort>
 800bf74:	4603      	mov	r3, r0
 800bf76:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800bf78:	7dbb      	ldrb	r3, [r7, #22]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d104      	bne.n	800bf88 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	2207      	movs	r2, #7
 800bf82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800bf86:	e04f      	b.n	800c028 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800bf88:	7dbb      	ldrb	r3, [r7, #22]
 800bf8a:	2b04      	cmp	r3, #4
 800bf8c:	d14c      	bne.n	800c028 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	220b      	movs	r2, #11
 800bf92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800bf96:	e047      	b.n	800c028 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800bf98:	78fb      	ldrb	r3, [r7, #3]
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f000 f84c 	bl	800c03c <USBH_MSC_BOT_Abort>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800bfa8:	7dbb      	ldrb	r3, [r7, #22]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d11d      	bne.n	800bfea <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	795b      	ldrb	r3, [r3, #5]
 800bfb2:	4619      	mov	r1, r3
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f004 fe7b 	bl	8010cb0 <USBH_LL_GetToggle>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	7959      	ldrb	r1, [r3, #5]
 800bfc2:	7bfb      	ldrb	r3, [r7, #15]
 800bfc4:	f1c3 0301 	rsb	r3, r3, #1
 800bfc8:	b2db      	uxtb	r3, r3
 800bfca:	461a      	mov	r2, r3
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f004 fe3c 	bl	8010c4a <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	791b      	ldrb	r3, [r3, #4]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	4619      	mov	r1, r3
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f004 fe35 	bl	8010c4a <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	2209      	movs	r2, #9
 800bfe4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800bfe8:	e020      	b.n	800c02c <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800bfea:	7dbb      	ldrb	r3, [r7, #22]
 800bfec:	2b04      	cmp	r3, #4
 800bfee:	d11d      	bne.n	800c02c <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	220b      	movs	r2, #11
 800bff4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800bff8:	e018      	b.n	800c02c <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f7ff fdf2 	bl	800bbe4 <USBH_MSC_BOT_REQ_Reset>
 800c000:	4603      	mov	r3, r0
 800c002:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800c004:	7dfb      	ldrb	r3, [r7, #23]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d112      	bne.n	800c030 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	2201      	movs	r2, #1
 800c00e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      }
      break;
 800c012:	e00d      	b.n	800c030 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800c014:	bf00      	nop
 800c016:	e00c      	b.n	800c032 <USBH_MSC_BOT_Process+0x392>
      break;
 800c018:	bf00      	nop
 800c01a:	e00a      	b.n	800c032 <USBH_MSC_BOT_Process+0x392>
      break;
 800c01c:	bf00      	nop
 800c01e:	e008      	b.n	800c032 <USBH_MSC_BOT_Process+0x392>
      break;
 800c020:	bf00      	nop
 800c022:	e006      	b.n	800c032 <USBH_MSC_BOT_Process+0x392>
      break;
 800c024:	bf00      	nop
 800c026:	e004      	b.n	800c032 <USBH_MSC_BOT_Process+0x392>
      break;
 800c028:	bf00      	nop
 800c02a:	e002      	b.n	800c032 <USBH_MSC_BOT_Process+0x392>
      break;
 800c02c:	bf00      	nop
 800c02e:	e000      	b.n	800c032 <USBH_MSC_BOT_Process+0x392>
      break;
 800c030:	bf00      	nop
  }
  return status;
 800c032:	7dfb      	ldrb	r3, [r7, #23]
}
 800c034:	4618      	mov	r0, r3
 800c036:	3718      	adds	r7, #24
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b084      	sub	sp, #16
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	460b      	mov	r3, r1
 800c046:	70fb      	strb	r3, [r7, #3]
 800c048:	4613      	mov	r3, r2
 800c04a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800c04c:	2302      	movs	r3, #2
 800c04e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c056:	69db      	ldr	r3, [r3, #28]
 800c058:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800c05a:	78bb      	ldrb	r3, [r7, #2]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d002      	beq.n	800c066 <USBH_MSC_BOT_Abort+0x2a>
 800c060:	2b01      	cmp	r3, #1
 800c062:	d009      	beq.n	800c078 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800c064:	e011      	b.n	800c08a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	79db      	ldrb	r3, [r3, #7]
 800c06a:	4619      	mov	r1, r3
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f001 f9d1 	bl	800d414 <USBH_ClrFeature>
 800c072:	4603      	mov	r3, r0
 800c074:	73fb      	strb	r3, [r7, #15]
      break;
 800c076:	e008      	b.n	800c08a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	799b      	ldrb	r3, [r3, #6]
 800c07c:	4619      	mov	r1, r3
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f001 f9c8 	bl	800d414 <USBH_ClrFeature>
 800c084:	4603      	mov	r3, r0
 800c086:	73fb      	strb	r3, [r7, #15]
      break;
 800c088:	bf00      	nop
  }
  return status;
 800c08a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3710      	adds	r7, #16
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}

0800c094 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b084      	sub	sp, #16
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c0a2:	69db      	ldr	r3, [r3, #28]
 800c0a4:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	791b      	ldrb	r3, [r3, #4]
 800c0ae:	4619      	mov	r1, r3
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f004 fd17 	bl	8010ae4 <USBH_LL_GetLastXferSize>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	2b0d      	cmp	r3, #13
 800c0ba:	d002      	beq.n	800c0c2 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800c0bc:	2302      	movs	r3, #2
 800c0be:	73fb      	strb	r3, [r7, #15]
 800c0c0:	e024      	b.n	800c10c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c0c6:	4a14      	ldr	r2, [pc, #80]	@ (800c118 <USBH_MSC_DecodeCSW+0x84>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d11d      	bne.n	800c108 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d119      	bne.n	800c10c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d102      	bne.n	800c0e8 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	73fb      	strb	r3, [r7, #15]
 800c0e6:	e011      	b.n	800c10c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c0ee:	2b01      	cmp	r3, #1
 800c0f0:	d102      	bne.n	800c0f8 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	73fb      	strb	r3, [r7, #15]
 800c0f6:	e009      	b.n	800c10c <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c0fe:	2b02      	cmp	r3, #2
 800c100:	d104      	bne.n	800c10c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800c102:	2302      	movs	r3, #2
 800c104:	73fb      	strb	r3, [r7, #15]
 800c106:	e001      	b.n	800c10c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800c108:	2302      	movs	r3, #2
 800c10a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800c10c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3710      	adds	r7, #16
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	53425355 	.word	0x53425355

0800c11c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b084      	sub	sp, #16
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	460b      	mov	r3, r1
 800c126:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800c128:	2302      	movs	r3, #2
 800c12a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c132:	69db      	ldr	r3, [r3, #28]
 800c134:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800c13c:	2b01      	cmp	r3, #1
 800c13e:	d002      	beq.n	800c146 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800c140:	2b02      	cmp	r3, #2
 800c142:	d021      	beq.n	800c188 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c144:	e028      	b.n	800c198 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	2200      	movs	r2, #0
 800c14a:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	2200      	movs	r2, #0
 800c150:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	220a      	movs	r2, #10
 800c158:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	3363      	adds	r3, #99	@ 0x63
 800c160:	2210      	movs	r2, #16
 800c162:	2100      	movs	r1, #0
 800c164:	4618      	mov	r0, r3
 800c166:	f004 feeb 	bl	8010f40 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	2200      	movs	r2, #0
 800c16e:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	2201      	movs	r2, #1
 800c176:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	2202      	movs	r2, #2
 800c17e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      error = USBH_BUSY;
 800c182:	2301      	movs	r3, #1
 800c184:	73fb      	strb	r3, [r7, #15]
      break;
 800c186:	e007      	b.n	800c198 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c188:	78fb      	ldrb	r3, [r7, #3]
 800c18a:	4619      	mov	r1, r3
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f7ff fd87 	bl	800bca0 <USBH_MSC_BOT_Process>
 800c192:	4603      	mov	r3, r0
 800c194:	73fb      	strb	r3, [r7, #15]
      break;
 800c196:	bf00      	nop
  }

  return error;
 800c198:	7bfb      	ldrb	r3, [r7, #15]
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3710      	adds	r7, #16
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}

0800c1a2 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800c1a2:	b580      	push	{r7, lr}
 800c1a4:	b086      	sub	sp, #24
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	60f8      	str	r0, [r7, #12]
 800c1aa:	460b      	mov	r3, r1
 800c1ac:	607a      	str	r2, [r7, #4]
 800c1ae:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY;
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c1ba:	69db      	ldr	r3, [r3, #28]
 800c1bc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d002      	beq.n	800c1ce <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800c1c8:	2b02      	cmp	r3, #2
 800c1ca:	d027      	beq.n	800c21c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800c1cc:	e05e      	b.n	800c28c <USBH_MSC_SCSI_ReadCapacity+0xea>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	2208      	movs	r2, #8
 800c1d2:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	2280      	movs	r2, #128	@ 0x80
 800c1d8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	220a      	movs	r2, #10
 800c1e0:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	3363      	adds	r3, #99	@ 0x63
 800c1e8:	2210      	movs	r2, #16
 800c1ea:	2100      	movs	r1, #0
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f004 fea7 	bl	8010f40 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	2225      	movs	r2, #37	@ 0x25
 800c1f6:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	2201      	movs	r2, #1
 800c1fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	2202      	movs	r2, #2
 800c206:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c20a:	693b      	ldr	r3, [r7, #16]
 800c20c:	f103 0210 	add.w	r2, r3, #16
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800c216:	2301      	movs	r3, #1
 800c218:	75fb      	strb	r3, [r7, #23]
      break;
 800c21a:	e037      	b.n	800c28c <USBH_MSC_SCSI_ReadCapacity+0xea>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c21c:	7afb      	ldrb	r3, [r7, #11]
 800c21e:	4619      	mov	r1, r3
 800c220:	68f8      	ldr	r0, [r7, #12]
 800c222:	f7ff fd3d 	bl	800bca0 <USBH_MSC_BOT_Process>
 800c226:	4603      	mov	r3, r0
 800c228:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c22a:	7dfb      	ldrb	r3, [r7, #23]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d12c      	bne.n	800c28a <USBH_MSC_SCSI_ReadCapacity+0xe8>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c236:	3303      	adds	r3, #3
 800c238:	781b      	ldrb	r3, [r3, #0]
 800c23a:	461a      	mov	r2, r3
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c242:	3302      	adds	r3, #2
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	021b      	lsls	r3, r3, #8
 800c248:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c250:	3301      	adds	r3, #1
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c256:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	061b      	lsls	r3, r3, #24
 800c262:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c26e:	3307      	adds	r3, #7
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	461a      	mov	r2, r3
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c27a:	3306      	adds	r3, #6
 800c27c:	781b      	ldrb	r3, [r3, #0]
 800c27e:	021b      	lsls	r3, r3, #8
 800c280:	b29b      	uxth	r3, r3
 800c282:	4313      	orrs	r3, r2
 800c284:	b29a      	uxth	r2, r3
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	809a      	strh	r2, [r3, #4]
      break;
 800c28a:	bf00      	nop
  }

  return error;
 800c28c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3718      	adds	r7, #24
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}

0800c296 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800c296:	b580      	push	{r7, lr}
 800c298:	b086      	sub	sp, #24
 800c29a:	af00      	add	r7, sp, #0
 800c29c:	60f8      	str	r0, [r7, #12]
 800c29e:	460b      	mov	r3, r1
 800c2a0:	607a      	str	r2, [r7, #4]
 800c2a2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800c2a4:	2302      	movs	r3, #2
 800c2a6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c2ae:	69db      	ldr	r3, [r3, #28]
 800c2b0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800c2b8:	2b01      	cmp	r3, #1
 800c2ba:	d002      	beq.n	800c2c2 <USBH_MSC_SCSI_Inquiry+0x2c>
 800c2bc:	2b02      	cmp	r3, #2
 800c2be:	d03d      	beq.n	800c33c <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800c2c0:	e089      	b.n	800c3d6 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	2224      	movs	r2, #36	@ 0x24
 800c2c6:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	2280      	movs	r2, #128	@ 0x80
 800c2cc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	220a      	movs	r2, #10
 800c2d4:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	3363      	adds	r3, #99	@ 0x63
 800c2dc:	220a      	movs	r2, #10
 800c2de:	2100      	movs	r1, #0
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f004 fe2d 	bl	8010f40 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	2212      	movs	r2, #18
 800c2ea:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800c2ee:	7afb      	ldrb	r3, [r7, #11]
 800c2f0:	015b      	lsls	r3, r3, #5
 800c2f2:	b2da      	uxtb	r2, r3
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	2200      	movs	r2, #0
 800c306:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	2224      	movs	r2, #36	@ 0x24
 800c30e:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	2200      	movs	r2, #0
 800c316:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	2201      	movs	r2, #1
 800c31e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	2202      	movs	r2, #2
 800c326:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	f103 0210 	add.w	r2, r3, #16
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800c336:	2301      	movs	r3, #1
 800c338:	75fb      	strb	r3, [r7, #23]
      break;
 800c33a:	e04c      	b.n	800c3d6 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c33c:	7afb      	ldrb	r3, [r7, #11]
 800c33e:	4619      	mov	r1, r3
 800c340:	68f8      	ldr	r0, [r7, #12]
 800c342:	f7ff fcad 	bl	800bca0 <USBH_MSC_BOT_Process>
 800c346:	4603      	mov	r3, r0
 800c348:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c34a:	7dfb      	ldrb	r3, [r7, #23]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d141      	bne.n	800c3d4 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800c350:	2222      	movs	r2, #34	@ 0x22
 800c352:	2100      	movs	r1, #0
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f004 fdf3 	bl	8010f40 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c360:	781b      	ldrb	r3, [r3, #0]
 800c362:	f003 031f 	and.w	r3, r3, #31
 800c366:	b2da      	uxtb	r2, r3
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	095b      	lsrs	r3, r3, #5
 800c376:	b2da      	uxtb	r2, r3
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c382:	3301      	adds	r3, #1
 800c384:	781b      	ldrb	r3, [r3, #0]
 800c386:	b25b      	sxtb	r3, r3
 800c388:	2b00      	cmp	r3, #0
 800c38a:	da03      	bge.n	800c394 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2201      	movs	r2, #1
 800c390:	709a      	strb	r2, [r3, #2]
 800c392:	e002      	b.n	800c39a <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2200      	movs	r2, #0
 800c398:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	1cd8      	adds	r0, r3, #3
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c3a4:	3308      	adds	r3, #8
 800c3a6:	2208      	movs	r2, #8
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	f004 fe15 	bl	8010fd8 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f103 000c 	add.w	r0, r3, #12
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c3ba:	3310      	adds	r3, #16
 800c3bc:	2210      	movs	r2, #16
 800c3be:	4619      	mov	r1, r3
 800c3c0:	f004 fe0a 	bl	8010fd8 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	331d      	adds	r3, #29
 800c3c8:	693a      	ldr	r2, [r7, #16]
 800c3ca:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 800c3ce:	3220      	adds	r2, #32
 800c3d0:	6812      	ldr	r2, [r2, #0]
 800c3d2:	601a      	str	r2, [r3, #0]
      break;
 800c3d4:	bf00      	nop
  }

  return error;
 800c3d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3718      	adds	r7, #24
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b086      	sub	sp, #24
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	460b      	mov	r3, r1
 800c3ea:	607a      	str	r2, [r7, #4]
 800c3ec:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800c3ee:	2302      	movs	r3, #2
 800c3f0:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c3f8:	69db      	ldr	r3, [r3, #28]
 800c3fa:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800c402:	2b01      	cmp	r3, #1
 800c404:	d002      	beq.n	800c40c <USBH_MSC_SCSI_RequestSense+0x2c>
 800c406:	2b02      	cmp	r3, #2
 800c408:	d03d      	beq.n	800c486 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800c40a:	e05d      	b.n	800c4c8 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	220e      	movs	r2, #14
 800c410:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c412:	693b      	ldr	r3, [r7, #16]
 800c414:	2280      	movs	r2, #128	@ 0x80
 800c416:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	220a      	movs	r2, #10
 800c41e:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	3363      	adds	r3, #99	@ 0x63
 800c426:	2210      	movs	r2, #16
 800c428:	2100      	movs	r1, #0
 800c42a:	4618      	mov	r0, r3
 800c42c:	f004 fd88 	bl	8010f40 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	2203      	movs	r2, #3
 800c434:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800c438:	7afb      	ldrb	r3, [r7, #11]
 800c43a:	015b      	lsls	r3, r3, #5
 800c43c:	b2da      	uxtb	r2, r3
 800c43e:	693b      	ldr	r3, [r7, #16]
 800c440:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	2200      	movs	r2, #0
 800c448:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	2200      	movs	r2, #0
 800c450:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	220e      	movs	r2, #14
 800c458:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	2200      	movs	r2, #0
 800c460:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	2201      	movs	r2, #1
 800c468:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	2202      	movs	r2, #2
 800c470:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	f103 0210 	add.w	r2, r3, #16
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800c480:	2301      	movs	r3, #1
 800c482:	75fb      	strb	r3, [r7, #23]
      break;
 800c484:	e020      	b.n	800c4c8 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c486:	7afb      	ldrb	r3, [r7, #11]
 800c488:	4619      	mov	r1, r3
 800c48a:	68f8      	ldr	r0, [r7, #12]
 800c48c:	f7ff fc08 	bl	800bca0 <USBH_MSC_BOT_Process>
 800c490:	4603      	mov	r3, r0
 800c492:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c494:	7dfb      	ldrb	r3, [r7, #23]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d115      	bne.n	800c4c6 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c4a0:	3302      	adds	r3, #2
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	f003 030f 	and.w	r3, r3, #15
 800c4a8:	b2da      	uxtb	r2, r3
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c4b4:	7b1a      	ldrb	r2, [r3, #12]
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c4c0:	7b5a      	ldrb	r2, [r3, #13]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	709a      	strb	r2, [r3, #2]
      break;
 800c4c6:	bf00      	nop
  }

  return error;
 800c4c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3718      	adds	r7, #24
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}

0800c4d2 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800c4d2:	b580      	push	{r7, lr}
 800c4d4:	b086      	sub	sp, #24
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	60f8      	str	r0, [r7, #12]
 800c4da:	607a      	str	r2, [r7, #4]
 800c4dc:	603b      	str	r3, [r7, #0]
 800c4de:	460b      	mov	r3, r1
 800c4e0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800c4e2:	2302      	movs	r3, #2
 800c4e4:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c4ec:	69db      	ldr	r3, [r3, #28]
 800c4ee:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800c4f6:	2b01      	cmp	r3, #1
 800c4f8:	d002      	beq.n	800c500 <USBH_MSC_SCSI_Write+0x2e>
 800c4fa:	2b02      	cmp	r3, #2
 800c4fc:	d047      	beq.n	800c58e <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c4fe:	e04e      	b.n	800c59e <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 800c506:	461a      	mov	r2, r3
 800c508:	6a3b      	ldr	r3, [r7, #32]
 800c50a:	fb03 f202 	mul.w	r2, r3, r2
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	2200      	movs	r2, #0
 800c516:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	220a      	movs	r2, #10
 800c51e:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	3363      	adds	r3, #99	@ 0x63
 800c526:	2210      	movs	r2, #16
 800c528:	2100      	movs	r1, #0
 800c52a:	4618      	mov	r0, r3
 800c52c:	f004 fd08 	bl	8010f40 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	222a      	movs	r2, #42	@ 0x2a
 800c534:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800c538:	79fa      	ldrb	r2, [r7, #7]
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800c540:	79ba      	ldrb	r2, [r7, #6]
 800c542:	693b      	ldr	r3, [r7, #16]
 800c544:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800c548:	797a      	ldrb	r2, [r7, #5]
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800c550:	1d3b      	adds	r3, r7, #4
 800c552:	781a      	ldrb	r2, [r3, #0]
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]);
 800c55a:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800c55e:	693b      	ldr	r3, [r7, #16]
 800c560:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]);
 800c564:	f107 0320 	add.w	r3, r7, #32
 800c568:	781a      	ldrb	r2, [r3, #0]
 800c56a:	693b      	ldr	r3, [r7, #16]
 800c56c:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	2201      	movs	r2, #1
 800c574:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	2202      	movs	r2, #2
 800c57c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	683a      	ldr	r2, [r7, #0]
 800c584:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800c588:	2301      	movs	r3, #1
 800c58a:	75fb      	strb	r3, [r7, #23]
      break;
 800c58c:	e007      	b.n	800c59e <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c58e:	7afb      	ldrb	r3, [r7, #11]
 800c590:	4619      	mov	r1, r3
 800c592:	68f8      	ldr	r0, [r7, #12]
 800c594:	f7ff fb84 	bl	800bca0 <USBH_MSC_BOT_Process>
 800c598:	4603      	mov	r3, r0
 800c59a:	75fb      	strb	r3, [r7, #23]
      break;
 800c59c:	bf00      	nop
  }

  return error;
 800c59e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3718      	adds	r7, #24
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}

0800c5a8 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b086      	sub	sp, #24
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	60f8      	str	r0, [r7, #12]
 800c5b0:	607a      	str	r2, [r7, #4]
 800c5b2:	603b      	str	r3, [r7, #0]
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800c5b8:	2302      	movs	r3, #2
 800c5ba:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c5c2:	69db      	ldr	r3, [r3, #28]
 800c5c4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d002      	beq.n	800c5d6 <USBH_MSC_SCSI_Read+0x2e>
 800c5d0:	2b02      	cmp	r3, #2
 800c5d2:	d047      	beq.n	800c664 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c5d4:	e04e      	b.n	800c674 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 800c5dc:	461a      	mov	r2, r3
 800c5de:	6a3b      	ldr	r3, [r7, #32]
 800c5e0:	fb03 f202 	mul.w	r2, r3, r2
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	2280      	movs	r2, #128	@ 0x80
 800c5ec:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	220a      	movs	r2, #10
 800c5f4:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	3363      	adds	r3, #99	@ 0x63
 800c5fc:	2210      	movs	r2, #16
 800c5fe:	2100      	movs	r1, #0
 800c600:	4618      	mov	r0, r3
 800c602:	f004 fc9d 	bl	8010f40 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	2228      	movs	r2, #40	@ 0x28
 800c60a:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800c60e:	79fa      	ldrb	r2, [r7, #7]
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800c616:	79ba      	ldrb	r2, [r7, #6]
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800c61e:	797a      	ldrb	r2, [r7, #5]
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800c626:	1d3b      	adds	r3, r7, #4
 800c628:	781a      	ldrb	r2, [r3, #0]
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]);
 800c630:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]);
 800c63a:	f107 0320 	add.w	r3, r7, #32
 800c63e:	781a      	ldrb	r2, [r3, #0]
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	2201      	movs	r2, #1
 800c64a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	2202      	movs	r2, #2
 800c652:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800c656:	693b      	ldr	r3, [r7, #16]
 800c658:	683a      	ldr	r2, [r7, #0]
 800c65a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800c65e:	2301      	movs	r3, #1
 800c660:	75fb      	strb	r3, [r7, #23]
      break;
 800c662:	e007      	b.n	800c674 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c664:	7afb      	ldrb	r3, [r7, #11]
 800c666:	4619      	mov	r1, r3
 800c668:	68f8      	ldr	r0, [r7, #12]
 800c66a:	f7ff fb19 	bl	800bca0 <USBH_MSC_BOT_Process>
 800c66e:	4603      	mov	r3, r0
 800c670:	75fb      	strb	r3, [r7, #23]
      break;
 800c672:	bf00      	nop
  }

  return error;
 800c674:	7dfb      	ldrb	r3, [r7, #23]
}
 800c676:	4618      	mov	r0, r3
 800c678:	3718      	adds	r7, #24
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}

0800c67e <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800c67e:	b580      	push	{r7, lr}
 800c680:	b084      	sub	sp, #16
 800c682:	af00      	add	r7, sp, #0
 800c684:	60f8      	str	r0, [r7, #12]
 800c686:	60b9      	str	r1, [r7, #8]
 800c688:	4613      	mov	r3, r2
 800c68a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d101      	bne.n	800c696 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c692:	2302      	movs	r3, #2
 800c694:	e029      	b.n	800c6ea <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	79fa      	ldrb	r2, [r7, #7]
 800c69a:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800c6ae:	68f8      	ldr	r0, [r7, #12]
 800c6b0:	f000 f81f 	bl	800c6f2 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d003      	beq.n	800c6e2 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	68ba      	ldr	r2, [r7, #8]
 800c6de:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800c6e2:	68f8      	ldr	r0, [r7, #12]
 800c6e4:	f004 f94a 	bl	801097c <USBH_LL_Init>

  return USBH_OK;
 800c6e8:	2300      	movs	r3, #0
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3710      	adds	r7, #16
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}

0800c6f2 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c6f2:	b580      	push	{r7, lr}
 800c6f4:	b084      	sub	sp, #16
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c6fe:	2300      	movs	r3, #0
 800c700:	60fb      	str	r3, [r7, #12]
 800c702:	e009      	b.n	800c718 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c704:	687a      	ldr	r2, [r7, #4]
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	33e0      	adds	r3, #224	@ 0xe0
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	4413      	add	r3, r2
 800c70e:	2200      	movs	r2, #0
 800c710:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	3301      	adds	r3, #1
 800c716:	60fb      	str	r3, [r7, #12]
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	2b0f      	cmp	r3, #15
 800c71c:	d9f2      	bls.n	800c704 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c71e:	2300      	movs	r3, #0
 800c720:	60fb      	str	r3, [r7, #12]
 800c722:	e009      	b.n	800c738 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c724:	687a      	ldr	r2, [r7, #4]
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	4413      	add	r3, r2
 800c72a:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c72e:	2200      	movs	r2, #0
 800c730:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	3301      	adds	r3, #1
 800c736:	60fb      	str	r3, [r7, #12]
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c73e:	d3f1      	bcc.n	800c724 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2200      	movs	r2, #0
 800c744:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2200      	movs	r2, #0
 800c74a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2201      	movs	r2, #1
 800c750:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2200      	movs	r2, #0
 800c756:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2201      	movs	r2, #1
 800c75e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2240      	movs	r2, #64	@ 0x40
 800c764:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2200      	movs	r2, #0
 800c76a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2200      	movs	r2, #0
 800c770:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2201      	movs	r2, #1
 800c778:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2200      	movs	r2, #0
 800c780:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2200      	movs	r2, #0
 800c788:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	331c      	adds	r3, #28
 800c790:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c794:	2100      	movs	r1, #0
 800c796:	4618      	mov	r0, r3
 800c798:	f004 fbd2 	bl	8010f40 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c7a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c7a6:	2100      	movs	r1, #0
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f004 fbc9 	bl	8010f40 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800c7b4:	2212      	movs	r2, #18
 800c7b6:	2100      	movs	r1, #0
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f004 fbc1 	bl	8010f40 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800c7c4:	223e      	movs	r2, #62	@ 0x3e
 800c7c6:	2100      	movs	r1, #0
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	f004 fbb9 	bl	8010f40 <memset>

  return USBH_OK;
 800c7ce:	2300      	movs	r3, #0
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3710      	adds	r7, #16
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}

0800c7d8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c7d8:	b480      	push	{r7}
 800c7da:	b085      	sub	sp, #20
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d016      	beq.n	800c81a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d10e      	bne.n	800c814 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800c7fc:	1c59      	adds	r1, r3, #1
 800c7fe:	687a      	ldr	r2, [r7, #4]
 800c800:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800c804:	687a      	ldr	r2, [r7, #4]
 800c806:	33de      	adds	r3, #222	@ 0xde
 800c808:	6839      	ldr	r1, [r7, #0]
 800c80a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c80e:	2300      	movs	r3, #0
 800c810:	73fb      	strb	r3, [r7, #15]
 800c812:	e004      	b.n	800c81e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c814:	2302      	movs	r3, #2
 800c816:	73fb      	strb	r3, [r7, #15]
 800c818:	e001      	b.n	800c81e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c81a:	2302      	movs	r3, #2
 800c81c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c81e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c820:	4618      	mov	r0, r3
 800c822:	3714      	adds	r7, #20
 800c824:	46bd      	mov	sp, r7
 800c826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82a:	4770      	bx	lr

0800c82c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c82c:	b480      	push	{r7}
 800c82e:	b085      	sub	sp, #20
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
 800c834:	460b      	mov	r3, r1
 800c836:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c838:	2300      	movs	r3, #0
 800c83a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800c842:	78fa      	ldrb	r2, [r7, #3]
 800c844:	429a      	cmp	r2, r3
 800c846:	d204      	bcs.n	800c852 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	78fa      	ldrb	r2, [r7, #3]
 800c84c:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800c850:	e001      	b.n	800c856 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c852:	2302      	movs	r3, #2
 800c854:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c856:	7bfb      	ldrb	r3, [r7, #15]
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3714      	adds	r7, #20
 800c85c:	46bd      	mov	sp, r7
 800c85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c862:	4770      	bx	lr

0800c864 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c864:	b480      	push	{r7}
 800c866:	b087      	sub	sp, #28
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	4608      	mov	r0, r1
 800c86e:	4611      	mov	r1, r2
 800c870:	461a      	mov	r2, r3
 800c872:	4603      	mov	r3, r0
 800c874:	70fb      	strb	r3, [r7, #3]
 800c876:	460b      	mov	r3, r1
 800c878:	70bb      	strb	r3, [r7, #2]
 800c87a:	4613      	mov	r3, r2
 800c87c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c87e:	2300      	movs	r3, #0
 800c880:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c882:	2300      	movs	r3, #0
 800c884:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800c88c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c88e:	e025      	b.n	800c8dc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c890:	7dfb      	ldrb	r3, [r7, #23]
 800c892:	221a      	movs	r2, #26
 800c894:	fb02 f303 	mul.w	r3, r2, r3
 800c898:	3308      	adds	r3, #8
 800c89a:	68fa      	ldr	r2, [r7, #12]
 800c89c:	4413      	add	r3, r2
 800c89e:	3302      	adds	r3, #2
 800c8a0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	795b      	ldrb	r3, [r3, #5]
 800c8a6:	78fa      	ldrb	r2, [r7, #3]
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d002      	beq.n	800c8b2 <USBH_FindInterface+0x4e>
 800c8ac:	78fb      	ldrb	r3, [r7, #3]
 800c8ae:	2bff      	cmp	r3, #255	@ 0xff
 800c8b0:	d111      	bne.n	800c8d6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c8b6:	78ba      	ldrb	r2, [r7, #2]
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d002      	beq.n	800c8c2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c8bc:	78bb      	ldrb	r3, [r7, #2]
 800c8be:	2bff      	cmp	r3, #255	@ 0xff
 800c8c0:	d109      	bne.n	800c8d6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c8c6:	787a      	ldrb	r2, [r7, #1]
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d002      	beq.n	800c8d2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c8cc:	787b      	ldrb	r3, [r7, #1]
 800c8ce:	2bff      	cmp	r3, #255	@ 0xff
 800c8d0:	d101      	bne.n	800c8d6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c8d2:	7dfb      	ldrb	r3, [r7, #23]
 800c8d4:	e006      	b.n	800c8e4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c8d6:	7dfb      	ldrb	r3, [r7, #23]
 800c8d8:	3301      	adds	r3, #1
 800c8da:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c8dc:	7dfb      	ldrb	r3, [r7, #23]
 800c8de:	2b01      	cmp	r3, #1
 800c8e0:	d9d6      	bls.n	800c890 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c8e2:	23ff      	movs	r3, #255	@ 0xff
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	371c      	adds	r7, #28
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr

0800c8f0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b082      	sub	sp, #8
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f004 f87b 	bl	80109f4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800c8fe:	2101      	movs	r1, #1
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f004 f994 	bl	8010c2e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c906:	2300      	movs	r3, #0
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3708      	adds	r7, #8
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b088      	sub	sp, #32
 800c914:	af04      	add	r7, sp, #16
 800c916:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c918:	2302      	movs	r3, #2
 800c91a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c91c:	2300      	movs	r3, #0
 800c91e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800c926:	b2db      	uxtb	r3, r3
 800c928:	2b01      	cmp	r3, #1
 800c92a:	d102      	bne.n	800c932 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2203      	movs	r2, #3
 800c930:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	b2db      	uxtb	r3, r3
 800c938:	2b0b      	cmp	r3, #11
 800c93a:	f200 81bb 	bhi.w	800ccb4 <USBH_Process+0x3a4>
 800c93e:	a201      	add	r2, pc, #4	@ (adr r2, 800c944 <USBH_Process+0x34>)
 800c940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c944:	0800c975 	.word	0x0800c975
 800c948:	0800c9a7 	.word	0x0800c9a7
 800c94c:	0800ca0f 	.word	0x0800ca0f
 800c950:	0800cc4f 	.word	0x0800cc4f
 800c954:	0800ccb5 	.word	0x0800ccb5
 800c958:	0800caaf 	.word	0x0800caaf
 800c95c:	0800cbf5 	.word	0x0800cbf5
 800c960:	0800cae5 	.word	0x0800cae5
 800c964:	0800cb05 	.word	0x0800cb05
 800c968:	0800cb23 	.word	0x0800cb23
 800c96c:	0800cb67 	.word	0x0800cb67
 800c970:	0800cc37 	.word	0x0800cc37
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	f000 819b 	beq.w	800ccb8 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2201      	movs	r2, #1
 800c986:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c988:	20c8      	movs	r0, #200	@ 0xc8
 800c98a:	f004 f9c4 	bl	8010d16 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f004 f88d 	bl	8010aae <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2200      	movs	r2, #0
 800c998:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c9a4:	e188      	b.n	800ccb8 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800c9ac:	2b01      	cmp	r3, #1
 800c9ae:	d107      	bne.n	800c9c0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2202      	movs	r2, #2
 800c9bc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c9be:	e18a      	b.n	800ccd6 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800c9c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c9ca:	d914      	bls.n	800c9f6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	b2da      	uxtb	r2, r3
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800c9e2:	2b03      	cmp	r3, #3
 800c9e4:	d903      	bls.n	800c9ee <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	220d      	movs	r2, #13
 800c9ea:	701a      	strb	r2, [r3, #0]
      break;
 800c9ec:	e173      	b.n	800ccd6 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	701a      	strb	r2, [r3, #0]
      break;
 800c9f4:	e16f      	b.n	800ccd6 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800c9fc:	f103 020a 	add.w	r2, r3, #10
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800ca06:	200a      	movs	r0, #10
 800ca08:	f004 f985 	bl	8010d16 <USBH_Delay>
      break;
 800ca0c:	e163      	b.n	800ccd6 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d005      	beq.n	800ca24 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ca1e:	2104      	movs	r1, #4
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ca24:	2064      	movs	r0, #100	@ 0x64
 800ca26:	f004 f976 	bl	8010d16 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f004 f818 	bl	8010a60 <USBH_LL_GetSpeed>
 800ca30:	4603      	mov	r3, r0
 800ca32:	461a      	mov	r2, r3
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2205      	movs	r2, #5
 800ca3e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ca40:	2100      	movs	r1, #0
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f001 fa9b 	bl	800df7e <USBH_AllocPipe>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ca50:	2180      	movs	r1, #128	@ 0x80
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f001 fa93 	bl	800df7e <USBH_AllocPipe>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	7919      	ldrb	r1, [r3, #4]
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ca70:	687a      	ldr	r2, [r7, #4]
 800ca72:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ca74:	9202      	str	r2, [sp, #8]
 800ca76:	2200      	movs	r2, #0
 800ca78:	9201      	str	r2, [sp, #4]
 800ca7a:	9300      	str	r3, [sp, #0]
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	2280      	movs	r2, #128	@ 0x80
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f001 fa4d 	bl	800df20 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	7959      	ldrb	r1, [r3, #5]
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ca96:	687a      	ldr	r2, [r7, #4]
 800ca98:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ca9a:	9202      	str	r2, [sp, #8]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	9201      	str	r2, [sp, #4]
 800caa0:	9300      	str	r3, [sp, #0]
 800caa2:	4603      	mov	r3, r0
 800caa4:	2200      	movs	r2, #0
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f001 fa3a 	bl	800df20 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800caac:	e113      	b.n	800ccd6 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f000 f916 	bl	800cce0 <USBH_HandleEnum>
 800cab4:	4603      	mov	r3, r0
 800cab6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800cab8:	7bbb      	ldrb	r3, [r7, #14]
 800caba:	b2db      	uxtb	r3, r3
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	f040 80fd 	bne.w	800ccbc <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2200      	movs	r2, #0
 800cac6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800cad0:	2b01      	cmp	r3, #1
 800cad2:	d103      	bne.n	800cadc <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2208      	movs	r2, #8
 800cad8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cada:	e0ef      	b.n	800ccbc <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2207      	movs	r2, #7
 800cae0:	701a      	strb	r2, [r3, #0]
      break;
 800cae2:	e0eb      	b.n	800ccbc <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800caea:	2b00      	cmp	r3, #0
 800caec:	f000 80e8 	beq.w	800ccc0 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800caf6:	2101      	movs	r1, #1
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2208      	movs	r2, #8
 800cb00:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800cb02:	e0dd      	b.n	800ccc0 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800cb0a:	4619      	mov	r1, r3
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f000 fc3a 	bl	800d386 <USBH_SetCfg>
 800cb12:	4603      	mov	r3, r0
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	f040 80d5 	bne.w	800ccc4 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2209      	movs	r2, #9
 800cb1e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cb20:	e0d0      	b.n	800ccc4 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800cb28:	f003 0320 	and.w	r3, r3, #32
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d016      	beq.n	800cb5e <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800cb30:	2101      	movs	r1, #1
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f000 fc4a 	bl	800d3cc <USBH_SetFeature>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cb3c:	7bbb      	ldrb	r3, [r7, #14]
 800cb3e:	b2db      	uxtb	r3, r3
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d103      	bne.n	800cb4c <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	220a      	movs	r2, #10
 800cb48:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cb4a:	e0bd      	b.n	800ccc8 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800cb4c:	7bbb      	ldrb	r3, [r7, #14]
 800cb4e:	b2db      	uxtb	r3, r3
 800cb50:	2b03      	cmp	r3, #3
 800cb52:	f040 80b9 	bne.w	800ccc8 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	220a      	movs	r2, #10
 800cb5a:	701a      	strb	r2, [r3, #0]
      break;
 800cb5c:	e0b4      	b.n	800ccc8 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	220a      	movs	r2, #10
 800cb62:	701a      	strb	r2, [r3, #0]
      break;
 800cb64:	e0b0      	b.n	800ccc8 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	f000 80ad 	beq.w	800cccc <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2200      	movs	r2, #0
 800cb76:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	73fb      	strb	r3, [r7, #15]
 800cb7e:	e016      	b.n	800cbae <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800cb80:	7bfa      	ldrb	r2, [r7, #15]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	32de      	adds	r2, #222	@ 0xde
 800cb86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb8a:	791a      	ldrb	r2, [r3, #4]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d108      	bne.n	800cba8 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800cb96:	7bfa      	ldrb	r2, [r7, #15]
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	32de      	adds	r2, #222	@ 0xde
 800cb9c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800cba6:	e005      	b.n	800cbb4 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cba8:	7bfb      	ldrb	r3, [r7, #15]
 800cbaa:	3301      	adds	r3, #1
 800cbac:	73fb      	strb	r3, [r7, #15]
 800cbae:	7bfb      	ldrb	r3, [r7, #15]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d0e5      	beq.n	800cb80 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d016      	beq.n	800cbec <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cbc4:	689b      	ldr	r3, [r3, #8]
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	4798      	blx	r3
 800cbca:	4603      	mov	r3, r0
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d109      	bne.n	800cbe4 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2206      	movs	r2, #6
 800cbd4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cbdc:	2103      	movs	r1, #3
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cbe2:	e073      	b.n	800cccc <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	220d      	movs	r2, #13
 800cbe8:	701a      	strb	r2, [r3, #0]
      break;
 800cbea:	e06f      	b.n	800cccc <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	220d      	movs	r2, #13
 800cbf0:	701a      	strb	r2, [r3, #0]
      break;
 800cbf2:	e06b      	b.n	800cccc <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d017      	beq.n	800cc2e <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cc04:	691b      	ldr	r3, [r3, #16]
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	4798      	blx	r3
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cc0e:	7bbb      	ldrb	r3, [r7, #14]
 800cc10:	b2db      	uxtb	r3, r3
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d103      	bne.n	800cc1e <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	220b      	movs	r2, #11
 800cc1a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cc1c:	e058      	b.n	800ccd0 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800cc1e:	7bbb      	ldrb	r3, [r7, #14]
 800cc20:	b2db      	uxtb	r3, r3
 800cc22:	2b02      	cmp	r3, #2
 800cc24:	d154      	bne.n	800ccd0 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	220d      	movs	r2, #13
 800cc2a:	701a      	strb	r2, [r3, #0]
      break;
 800cc2c:	e050      	b.n	800ccd0 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	220d      	movs	r2, #13
 800cc32:	701a      	strb	r2, [r3, #0]
      break;
 800cc34:	e04c      	b.n	800ccd0 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d049      	beq.n	800ccd4 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cc46:	695b      	ldr	r3, [r3, #20]
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	4798      	blx	r3
      }
      break;
 800cc4c:	e042      	b.n	800ccd4 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2200      	movs	r2, #0
 800cc52:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f7ff fd4b 	bl	800c6f2 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d009      	beq.n	800cc7a <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2200      	movs	r2, #0
 800cc76:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d005      	beq.n	800cc90 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cc8a:	2105      	movs	r1, #5
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800cc96:	b2db      	uxtb	r3, r3
 800cc98:	2b01      	cmp	r3, #1
 800cc9a:	d107      	bne.n	800ccac <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	f7ff fe23 	bl	800c8f0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ccaa:	e014      	b.n	800ccd6 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f003 fea1 	bl	80109f4 <USBH_LL_Start>
      break;
 800ccb2:	e010      	b.n	800ccd6 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800ccb4:	bf00      	nop
 800ccb6:	e00e      	b.n	800ccd6 <USBH_Process+0x3c6>
      break;
 800ccb8:	bf00      	nop
 800ccba:	e00c      	b.n	800ccd6 <USBH_Process+0x3c6>
      break;
 800ccbc:	bf00      	nop
 800ccbe:	e00a      	b.n	800ccd6 <USBH_Process+0x3c6>
    break;
 800ccc0:	bf00      	nop
 800ccc2:	e008      	b.n	800ccd6 <USBH_Process+0x3c6>
      break;
 800ccc4:	bf00      	nop
 800ccc6:	e006      	b.n	800ccd6 <USBH_Process+0x3c6>
      break;
 800ccc8:	bf00      	nop
 800ccca:	e004      	b.n	800ccd6 <USBH_Process+0x3c6>
      break;
 800cccc:	bf00      	nop
 800ccce:	e002      	b.n	800ccd6 <USBH_Process+0x3c6>
      break;
 800ccd0:	bf00      	nop
 800ccd2:	e000      	b.n	800ccd6 <USBH_Process+0x3c6>
      break;
 800ccd4:	bf00      	nop
  }
  return USBH_OK;
 800ccd6:	2300      	movs	r3, #0
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3710      	adds	r7, #16
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}

0800cce0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b088      	sub	sp, #32
 800cce4:	af04      	add	r7, sp, #16
 800cce6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800cce8:	2301      	movs	r3, #1
 800ccea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ccec:	2301      	movs	r3, #1
 800ccee:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	785b      	ldrb	r3, [r3, #1]
 800ccf4:	2b07      	cmp	r3, #7
 800ccf6:	f200 81bd 	bhi.w	800d074 <USBH_HandleEnum+0x394>
 800ccfa:	a201      	add	r2, pc, #4	@ (adr r2, 800cd00 <USBH_HandleEnum+0x20>)
 800ccfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd00:	0800cd21 	.word	0x0800cd21
 800cd04:	0800cddb 	.word	0x0800cddb
 800cd08:	0800ce45 	.word	0x0800ce45
 800cd0c:	0800cecf 	.word	0x0800cecf
 800cd10:	0800cf39 	.word	0x0800cf39
 800cd14:	0800cfa9 	.word	0x0800cfa9
 800cd18:	0800cfef 	.word	0x0800cfef
 800cd1c:	0800d035 	.word	0x0800d035
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800cd20:	2108      	movs	r1, #8
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f000 fa4c 	bl	800d1c0 <USBH_Get_DevDesc>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cd2c:	7bbb      	ldrb	r3, [r7, #14]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d12e      	bne.n	800cd90 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2201      	movs	r2, #1
 800cd40:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	7919      	ldrb	r1, [r3, #4]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cd56:	9202      	str	r2, [sp, #8]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	9201      	str	r2, [sp, #4]
 800cd5c:	9300      	str	r3, [sp, #0]
 800cd5e:	4603      	mov	r3, r0
 800cd60:	2280      	movs	r2, #128	@ 0x80
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f001 f8dc 	bl	800df20 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	7959      	ldrb	r1, [r3, #5]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800cd78:	687a      	ldr	r2, [r7, #4]
 800cd7a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cd7c:	9202      	str	r2, [sp, #8]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	9201      	str	r2, [sp, #4]
 800cd82:	9300      	str	r3, [sp, #0]
 800cd84:	4603      	mov	r3, r0
 800cd86:	2200      	movs	r2, #0
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f001 f8c9 	bl	800df20 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cd8e:	e173      	b.n	800d078 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cd90:	7bbb      	ldrb	r3, [r7, #14]
 800cd92:	2b03      	cmp	r3, #3
 800cd94:	f040 8170 	bne.w	800d078 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cd9e:	3301      	adds	r3, #1
 800cda0:	b2da      	uxtb	r2, r3
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cdae:	2b03      	cmp	r3, #3
 800cdb0:	d903      	bls.n	800cdba <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	220d      	movs	r2, #13
 800cdb6:	701a      	strb	r2, [r3, #0]
      break;
 800cdb8:	e15e      	b.n	800d078 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	795b      	ldrb	r3, [r3, #5]
 800cdbe:	4619      	mov	r1, r3
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f001 f8fd 	bl	800dfc0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	791b      	ldrb	r3, [r3, #4]
 800cdca:	4619      	mov	r1, r3
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f001 f8f7 	bl	800dfc0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	701a      	strb	r2, [r3, #0]
      break;
 800cdd8:	e14e      	b.n	800d078 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800cdda:	2112      	movs	r1, #18
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f000 f9ef 	bl	800d1c0 <USBH_Get_DevDesc>
 800cde2:	4603      	mov	r3, r0
 800cde4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cde6:	7bbb      	ldrb	r3, [r7, #14]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d103      	bne.n	800cdf4 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2202      	movs	r2, #2
 800cdf0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cdf2:	e143      	b.n	800d07c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cdf4:	7bbb      	ldrb	r3, [r7, #14]
 800cdf6:	2b03      	cmp	r3, #3
 800cdf8:	f040 8140 	bne.w	800d07c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ce02:	3301      	adds	r3, #1
 800ce04:	b2da      	uxtb	r2, r3
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ce12:	2b03      	cmp	r3, #3
 800ce14:	d903      	bls.n	800ce1e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	220d      	movs	r2, #13
 800ce1a:	701a      	strb	r2, [r3, #0]
      break;
 800ce1c:	e12e      	b.n	800d07c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	795b      	ldrb	r3, [r3, #5]
 800ce22:	4619      	mov	r1, r3
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f001 f8cb 	bl	800dfc0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	791b      	ldrb	r3, [r3, #4]
 800ce2e:	4619      	mov	r1, r3
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f001 f8c5 	bl	800dfc0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	701a      	strb	r2, [r3, #0]
      break;
 800ce42:	e11b      	b.n	800d07c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ce44:	2101      	movs	r1, #1
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f000 fa79 	bl	800d33e <USBH_SetAddress>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ce50:	7bbb      	ldrb	r3, [r7, #14]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d130      	bne.n	800ceb8 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800ce56:	2002      	movs	r0, #2
 800ce58:	f003 ff5d 	bl	8010d16 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2201      	movs	r2, #1
 800ce60:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2203      	movs	r2, #3
 800ce68:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	7919      	ldrb	r1, [r3, #4]
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ce7a:	687a      	ldr	r2, [r7, #4]
 800ce7c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ce7e:	9202      	str	r2, [sp, #8]
 800ce80:	2200      	movs	r2, #0
 800ce82:	9201      	str	r2, [sp, #4]
 800ce84:	9300      	str	r3, [sp, #0]
 800ce86:	4603      	mov	r3, r0
 800ce88:	2280      	movs	r2, #128	@ 0x80
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f001 f848 	bl	800df20 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	7959      	ldrb	r1, [r3, #5]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800cea0:	687a      	ldr	r2, [r7, #4]
 800cea2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cea4:	9202      	str	r2, [sp, #8]
 800cea6:	2200      	movs	r2, #0
 800cea8:	9201      	str	r2, [sp, #4]
 800ceaa:	9300      	str	r3, [sp, #0]
 800ceac:	4603      	mov	r3, r0
 800ceae:	2200      	movs	r2, #0
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f001 f835 	bl	800df20 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ceb6:	e0e3      	b.n	800d080 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ceb8:	7bbb      	ldrb	r3, [r7, #14]
 800ceba:	2b03      	cmp	r3, #3
 800cebc:	f040 80e0 	bne.w	800d080 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	220d      	movs	r2, #13
 800cec4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2200      	movs	r2, #0
 800ceca:	705a      	strb	r2, [r3, #1]
      break;
 800cecc:	e0d8      	b.n	800d080 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800cece:	2109      	movs	r1, #9
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f000 f9a1 	bl	800d218 <USBH_Get_CfgDesc>
 800ced6:	4603      	mov	r3, r0
 800ced8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ceda:	7bbb      	ldrb	r3, [r7, #14]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d103      	bne.n	800cee8 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2204      	movs	r2, #4
 800cee4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cee6:	e0cd      	b.n	800d084 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cee8:	7bbb      	ldrb	r3, [r7, #14]
 800ceea:	2b03      	cmp	r3, #3
 800ceec:	f040 80ca 	bne.w	800d084 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cef6:	3301      	adds	r3, #1
 800cef8:	b2da      	uxtb	r2, r3
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cf06:	2b03      	cmp	r3, #3
 800cf08:	d903      	bls.n	800cf12 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	220d      	movs	r2, #13
 800cf0e:	701a      	strb	r2, [r3, #0]
      break;
 800cf10:	e0b8      	b.n	800d084 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	795b      	ldrb	r3, [r3, #5]
 800cf16:	4619      	mov	r1, r3
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f001 f851 	bl	800dfc0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	791b      	ldrb	r3, [r3, #4]
 800cf22:	4619      	mov	r1, r3
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f001 f84b 	bl	800dfc0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2200      	movs	r2, #0
 800cf34:	701a      	strb	r2, [r3, #0]
      break;
 800cf36:	e0a5      	b.n	800d084 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800cf3e:	4619      	mov	r1, r3
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f000 f969 	bl	800d218 <USBH_Get_CfgDesc>
 800cf46:	4603      	mov	r3, r0
 800cf48:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cf4a:	7bbb      	ldrb	r3, [r7, #14]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d103      	bne.n	800cf58 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2205      	movs	r2, #5
 800cf54:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cf56:	e097      	b.n	800d088 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cf58:	7bbb      	ldrb	r3, [r7, #14]
 800cf5a:	2b03      	cmp	r3, #3
 800cf5c:	f040 8094 	bne.w	800d088 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cf66:	3301      	adds	r3, #1
 800cf68:	b2da      	uxtb	r2, r3
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cf76:	2b03      	cmp	r3, #3
 800cf78:	d903      	bls.n	800cf82 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	220d      	movs	r2, #13
 800cf7e:	701a      	strb	r2, [r3, #0]
      break;
 800cf80:	e082      	b.n	800d088 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	795b      	ldrb	r3, [r3, #5]
 800cf86:	4619      	mov	r1, r3
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f001 f819 	bl	800dfc0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	791b      	ldrb	r3, [r3, #4]
 800cf92:	4619      	mov	r1, r3
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f001 f813 	bl	800dfc0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	701a      	strb	r2, [r3, #0]
      break;
 800cfa6:	e06f      	b.n	800d088 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d019      	beq.n	800cfe6 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cfbe:	23ff      	movs	r3, #255	@ 0xff
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f000 f953 	bl	800d26c <USBH_Get_StringDesc>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cfca:	7bbb      	ldrb	r3, [r7, #14]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d103      	bne.n	800cfd8 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2206      	movs	r2, #6
 800cfd4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cfd6:	e059      	b.n	800d08c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cfd8:	7bbb      	ldrb	r3, [r7, #14]
 800cfda:	2b03      	cmp	r3, #3
 800cfdc:	d156      	bne.n	800d08c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2206      	movs	r2, #6
 800cfe2:	705a      	strb	r2, [r3, #1]
      break;
 800cfe4:	e052      	b.n	800d08c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2206      	movs	r2, #6
 800cfea:	705a      	strb	r2, [r3, #1]
      break;
 800cfec:	e04e      	b.n	800d08c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d019      	beq.n	800d02c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d004:	23ff      	movs	r3, #255	@ 0xff
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f000 f930 	bl	800d26c <USBH_Get_StringDesc>
 800d00c:	4603      	mov	r3, r0
 800d00e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d010:	7bbb      	ldrb	r3, [r7, #14]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d103      	bne.n	800d01e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2207      	movs	r2, #7
 800d01a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d01c:	e038      	b.n	800d090 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d01e:	7bbb      	ldrb	r3, [r7, #14]
 800d020:	2b03      	cmp	r3, #3
 800d022:	d135      	bne.n	800d090 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2207      	movs	r2, #7
 800d028:	705a      	strb	r2, [r3, #1]
      break;
 800d02a:	e031      	b.n	800d090 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2207      	movs	r2, #7
 800d030:	705a      	strb	r2, [r3, #1]
      break;
 800d032:	e02d      	b.n	800d090 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d017      	beq.n	800d06e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d04a:	23ff      	movs	r3, #255	@ 0xff
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f000 f90d 	bl	800d26c <USBH_Get_StringDesc>
 800d052:	4603      	mov	r3, r0
 800d054:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d056:	7bbb      	ldrb	r3, [r7, #14]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d102      	bne.n	800d062 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d05c:	2300      	movs	r3, #0
 800d05e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d060:	e018      	b.n	800d094 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d062:	7bbb      	ldrb	r3, [r7, #14]
 800d064:	2b03      	cmp	r3, #3
 800d066:	d115      	bne.n	800d094 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800d068:	2300      	movs	r3, #0
 800d06a:	73fb      	strb	r3, [r7, #15]
      break;
 800d06c:	e012      	b.n	800d094 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800d06e:	2300      	movs	r3, #0
 800d070:	73fb      	strb	r3, [r7, #15]
      break;
 800d072:	e00f      	b.n	800d094 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800d074:	bf00      	nop
 800d076:	e00e      	b.n	800d096 <USBH_HandleEnum+0x3b6>
      break;
 800d078:	bf00      	nop
 800d07a:	e00c      	b.n	800d096 <USBH_HandleEnum+0x3b6>
      break;
 800d07c:	bf00      	nop
 800d07e:	e00a      	b.n	800d096 <USBH_HandleEnum+0x3b6>
      break;
 800d080:	bf00      	nop
 800d082:	e008      	b.n	800d096 <USBH_HandleEnum+0x3b6>
      break;
 800d084:	bf00      	nop
 800d086:	e006      	b.n	800d096 <USBH_HandleEnum+0x3b6>
      break;
 800d088:	bf00      	nop
 800d08a:	e004      	b.n	800d096 <USBH_HandleEnum+0x3b6>
      break;
 800d08c:	bf00      	nop
 800d08e:	e002      	b.n	800d096 <USBH_HandleEnum+0x3b6>
      break;
 800d090:	bf00      	nop
 800d092:	e000      	b.n	800d096 <USBH_HandleEnum+0x3b6>
      break;
 800d094:	bf00      	nop
  }
  return Status;
 800d096:	7bfb      	ldrb	r3, [r7, #15]
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3710      	adds	r7, #16
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b083      	sub	sp, #12
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	683a      	ldr	r2, [r7, #0]
 800d0ae:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800d0b2:	bf00      	nop
 800d0b4:	370c      	adds	r7, #12
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0bc:	4770      	bx	lr

0800d0be <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d0be:	b580      	push	{r7, lr}
 800d0c0:	b082      	sub	sp, #8
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d0cc:	1c5a      	adds	r2, r3, #1
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f000 f804 	bl	800d0e2 <USBH_HandleSof>
}
 800d0da:	bf00      	nop
 800d0dc:	3708      	adds	r7, #8
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}

0800d0e2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d0e2:	b580      	push	{r7, lr}
 800d0e4:	b082      	sub	sp, #8
 800d0e6:	af00      	add	r7, sp, #0
 800d0e8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	b2db      	uxtb	r3, r3
 800d0f0:	2b0b      	cmp	r3, #11
 800d0f2:	d10a      	bne.n	800d10a <USBH_HandleSof+0x28>
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d005      	beq.n	800d10a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d104:	699b      	ldr	r3, [r3, #24]
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	4798      	blx	r3
  }
}
 800d10a:	bf00      	nop
 800d10c:	3708      	adds	r7, #8
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}

0800d112 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d112:	b480      	push	{r7}
 800d114:	b083      	sub	sp, #12
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2201      	movs	r2, #1
 800d11e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800d122:	bf00      	nop
}
 800d124:	370c      	adds	r7, #12
 800d126:	46bd      	mov	sp, r7
 800d128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12c:	4770      	bx	lr

0800d12e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d12e:	b480      	push	{r7}
 800d130:	b083      	sub	sp, #12
 800d132:	af00      	add	r7, sp, #0
 800d134:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2200      	movs	r2, #0
 800d13a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800d13e:	bf00      	nop
}
 800d140:	370c      	adds	r7, #12
 800d142:	46bd      	mov	sp, r7
 800d144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d148:	4770      	bx	lr

0800d14a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d14a:	b480      	push	{r7}
 800d14c:	b083      	sub	sp, #12
 800d14e:	af00      	add	r7, sp, #0
 800d150:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2201      	movs	r2, #1
 800d156:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2200      	movs	r2, #0
 800d15e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	2200      	movs	r2, #0
 800d166:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d16a:	2300      	movs	r3, #0
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	370c      	adds	r7, #12
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr

0800d178 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b082      	sub	sp, #8
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2201      	movs	r2, #1
 800d184:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2200      	movs	r2, #0
 800d18c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2200      	movs	r2, #0
 800d194:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f003 fc46 	bl	8010a2a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	791b      	ldrb	r3, [r3, #4]
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f000 ff0b 	bl	800dfc0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	795b      	ldrb	r3, [r3, #5]
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f000 ff05 	bl	800dfc0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d1b6:	2300      	movs	r3, #0
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3708      	adds	r7, #8
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}

0800d1c0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b086      	sub	sp, #24
 800d1c4:	af02      	add	r7, sp, #8
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	460b      	mov	r3, r1
 800d1ca:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800d1cc:	887b      	ldrh	r3, [r7, #2]
 800d1ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d1d2:	d901      	bls.n	800d1d8 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d1d4:	2303      	movs	r3, #3
 800d1d6:	e01b      	b.n	800d210 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800d1de:	887b      	ldrh	r3, [r7, #2]
 800d1e0:	9300      	str	r3, [sp, #0]
 800d1e2:	4613      	mov	r3, r2
 800d1e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d1e8:	2100      	movs	r1, #0
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f000 f872 	bl	800d2d4 <USBH_GetDescriptor>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800d1f4:	7bfb      	ldrb	r3, [r7, #15]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d109      	bne.n	800d20e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d200:	887a      	ldrh	r2, [r7, #2]
 800d202:	4619      	mov	r1, r3
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f000 f929 	bl	800d45c <USBH_ParseDevDesc>
 800d20a:	4603      	mov	r3, r0
 800d20c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d20e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d210:	4618      	mov	r0, r3
 800d212:	3710      	adds	r7, #16
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}

0800d218 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b086      	sub	sp, #24
 800d21c:	af02      	add	r7, sp, #8
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	460b      	mov	r3, r1
 800d222:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	331c      	adds	r3, #28
 800d228:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800d22a:	887b      	ldrh	r3, [r7, #2]
 800d22c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d230:	d901      	bls.n	800d236 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d232:	2303      	movs	r3, #3
 800d234:	e016      	b.n	800d264 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d236:	887b      	ldrh	r3, [r7, #2]
 800d238:	9300      	str	r3, [sp, #0]
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d240:	2100      	movs	r1, #0
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f000 f846 	bl	800d2d4 <USBH_GetDescriptor>
 800d248:	4603      	mov	r3, r0
 800d24a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800d24c:	7bfb      	ldrb	r3, [r7, #15]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d107      	bne.n	800d262 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800d252:	887b      	ldrh	r3, [r7, #2]
 800d254:	461a      	mov	r2, r3
 800d256:	68b9      	ldr	r1, [r7, #8]
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f000 f9af 	bl	800d5bc <USBH_ParseCfgDesc>
 800d25e:	4603      	mov	r3, r0
 800d260:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d262:	7bfb      	ldrb	r3, [r7, #15]
}
 800d264:	4618      	mov	r0, r3
 800d266:	3710      	adds	r7, #16
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}

0800d26c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b088      	sub	sp, #32
 800d270:	af02      	add	r7, sp, #8
 800d272:	60f8      	str	r0, [r7, #12]
 800d274:	607a      	str	r2, [r7, #4]
 800d276:	461a      	mov	r2, r3
 800d278:	460b      	mov	r3, r1
 800d27a:	72fb      	strb	r3, [r7, #11]
 800d27c:	4613      	mov	r3, r2
 800d27e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800d280:	893b      	ldrh	r3, [r7, #8]
 800d282:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d286:	d802      	bhi.n	800d28e <USBH_Get_StringDesc+0x22>
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d101      	bne.n	800d292 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d28e:	2303      	movs	r3, #3
 800d290:	e01c      	b.n	800d2cc <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800d292:	7afb      	ldrb	r3, [r7, #11]
 800d294:	b29b      	uxth	r3, r3
 800d296:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800d29a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800d2a2:	893b      	ldrh	r3, [r7, #8]
 800d2a4:	9300      	str	r3, [sp, #0]
 800d2a6:	460b      	mov	r3, r1
 800d2a8:	2100      	movs	r1, #0
 800d2aa:	68f8      	ldr	r0, [r7, #12]
 800d2ac:	f000 f812 	bl	800d2d4 <USBH_GetDescriptor>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800d2b4:	7dfb      	ldrb	r3, [r7, #23]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d107      	bne.n	800d2ca <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d2c0:	893a      	ldrh	r2, [r7, #8]
 800d2c2:	6879      	ldr	r1, [r7, #4]
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f000 fb8d 	bl	800d9e4 <USBH_ParseStringDesc>
  }

  return status;
 800d2ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3718      	adds	r7, #24
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b084      	sub	sp, #16
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	60f8      	str	r0, [r7, #12]
 800d2dc:	607b      	str	r3, [r7, #4]
 800d2de:	460b      	mov	r3, r1
 800d2e0:	72fb      	strb	r3, [r7, #11]
 800d2e2:	4613      	mov	r3, r2
 800d2e4:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	789b      	ldrb	r3, [r3, #2]
 800d2ea:	2b01      	cmp	r3, #1
 800d2ec:	d11c      	bne.n	800d328 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d2ee:	7afb      	ldrb	r3, [r7, #11]
 800d2f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d2f4:	b2da      	uxtb	r2, r3
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	2206      	movs	r2, #6
 800d2fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	893a      	ldrh	r2, [r7, #8]
 800d304:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d306:	893b      	ldrh	r3, [r7, #8]
 800d308:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d30c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d310:	d104      	bne.n	800d31c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	f240 4209 	movw	r2, #1033	@ 0x409
 800d318:	829a      	strh	r2, [r3, #20]
 800d31a:	e002      	b.n	800d322 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	2200      	movs	r2, #0
 800d320:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	8b3a      	ldrh	r2, [r7, #24]
 800d326:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d328:	8b3b      	ldrh	r3, [r7, #24]
 800d32a:	461a      	mov	r2, r3
 800d32c:	6879      	ldr	r1, [r7, #4]
 800d32e:	68f8      	ldr	r0, [r7, #12]
 800d330:	f000 fba5 	bl	800da7e <USBH_CtlReq>
 800d334:	4603      	mov	r3, r0
}
 800d336:	4618      	mov	r0, r3
 800d338:	3710      	adds	r7, #16
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}

0800d33e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d33e:	b580      	push	{r7, lr}
 800d340:	b082      	sub	sp, #8
 800d342:	af00      	add	r7, sp, #0
 800d344:	6078      	str	r0, [r7, #4]
 800d346:	460b      	mov	r3, r1
 800d348:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	789b      	ldrb	r3, [r3, #2]
 800d34e:	2b01      	cmp	r3, #1
 800d350:	d10f      	bne.n	800d372 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2200      	movs	r2, #0
 800d356:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2205      	movs	r2, #5
 800d35c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d35e:	78fb      	ldrb	r3, [r7, #3]
 800d360:	b29a      	uxth	r2, r3
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2200      	movs	r2, #0
 800d36a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2200      	movs	r2, #0
 800d370:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d372:	2200      	movs	r2, #0
 800d374:	2100      	movs	r1, #0
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f000 fb81 	bl	800da7e <USBH_CtlReq>
 800d37c:	4603      	mov	r3, r0
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3708      	adds	r7, #8
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}

0800d386 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d386:	b580      	push	{r7, lr}
 800d388:	b082      	sub	sp, #8
 800d38a:	af00      	add	r7, sp, #0
 800d38c:	6078      	str	r0, [r7, #4]
 800d38e:	460b      	mov	r3, r1
 800d390:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	789b      	ldrb	r3, [r3, #2]
 800d396:	2b01      	cmp	r3, #1
 800d398:	d10e      	bne.n	800d3b8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2200      	movs	r2, #0
 800d39e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2209      	movs	r2, #9
 800d3a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	887a      	ldrh	r2, [r7, #2]
 800d3aa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	2100      	movs	r1, #0
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f000 fb5e 	bl	800da7e <USBH_CtlReq>
 800d3c2:	4603      	mov	r3, r0
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3708      	adds	r7, #8
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}

0800d3cc <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b082      	sub	sp, #8
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
 800d3d4:	460b      	mov	r3, r1
 800d3d6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	789b      	ldrb	r3, [r3, #2]
 800d3dc:	2b01      	cmp	r3, #1
 800d3de:	d10f      	bne.n	800d400 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2203      	movs	r2, #3
 800d3ea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d3ec:	78fb      	ldrb	r3, [r7, #3]
 800d3ee:	b29a      	uxth	r2, r3
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d400:	2200      	movs	r2, #0
 800d402:	2100      	movs	r1, #0
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f000 fb3a 	bl	800da7e <USBH_CtlReq>
 800d40a:	4603      	mov	r3, r0
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3708      	adds	r7, #8
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}

0800d414 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b082      	sub	sp, #8
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
 800d41c:	460b      	mov	r3, r1
 800d41e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	789b      	ldrb	r3, [r3, #2]
 800d424:	2b01      	cmp	r3, #1
 800d426:	d10f      	bne.n	800d448 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2202      	movs	r2, #2
 800d42c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2201      	movs	r2, #1
 800d432:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2200      	movs	r2, #0
 800d438:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d43a:	78fb      	ldrb	r3, [r7, #3]
 800d43c:	b29a      	uxth	r2, r3
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2200      	movs	r2, #0
 800d446:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d448:	2200      	movs	r2, #0
 800d44a:	2100      	movs	r1, #0
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f000 fb16 	bl	800da7e <USBH_CtlReq>
 800d452:	4603      	mov	r3, r0
}
 800d454:	4618      	mov	r0, r3
 800d456:	3708      	adds	r7, #8
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}

0800d45c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d45c:	b480      	push	{r7}
 800d45e:	b087      	sub	sp, #28
 800d460:	af00      	add	r7, sp, #0
 800d462:	60f8      	str	r0, [r7, #12]
 800d464:	60b9      	str	r1, [r7, #8]
 800d466:	4613      	mov	r3, r2
 800d468:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800d470:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800d472:	2300      	movs	r3, #0
 800d474:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d101      	bne.n	800d480 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800d47c:	2302      	movs	r3, #2
 800d47e:	e094      	b.n	800d5aa <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	781a      	ldrb	r2, [r3, #0]
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	785a      	ldrb	r2, [r3, #1]
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	3302      	adds	r3, #2
 800d494:	781b      	ldrb	r3, [r3, #0]
 800d496:	461a      	mov	r2, r3
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	3303      	adds	r3, #3
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	021b      	lsls	r3, r3, #8
 800d4a0:	b29b      	uxth	r3, r3
 800d4a2:	4313      	orrs	r3, r2
 800d4a4:	b29a      	uxth	r2, r3
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	791a      	ldrb	r2, [r3, #4]
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	795a      	ldrb	r2, [r3, #5]
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	799a      	ldrb	r2, [r3, #6]
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	79da      	ldrb	r2, [r3, #7]
 800d4c6:	693b      	ldr	r3, [r7, #16]
 800d4c8:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d004      	beq.n	800d4de <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d4da:	2b01      	cmp	r3, #1
 800d4dc:	d11b      	bne.n	800d516 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	79db      	ldrb	r3, [r3, #7]
 800d4e2:	2b20      	cmp	r3, #32
 800d4e4:	dc0f      	bgt.n	800d506 <USBH_ParseDevDesc+0xaa>
 800d4e6:	2b08      	cmp	r3, #8
 800d4e8:	db0f      	blt.n	800d50a <USBH_ParseDevDesc+0xae>
 800d4ea:	3b08      	subs	r3, #8
 800d4ec:	4a32      	ldr	r2, [pc, #200]	@ (800d5b8 <USBH_ParseDevDesc+0x15c>)
 800d4ee:	fa22 f303 	lsr.w	r3, r2, r3
 800d4f2:	f003 0301 	and.w	r3, r3, #1
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	bf14      	ite	ne
 800d4fa:	2301      	movne	r3, #1
 800d4fc:	2300      	moveq	r3, #0
 800d4fe:	b2db      	uxtb	r3, r3
 800d500:	2b00      	cmp	r3, #0
 800d502:	d106      	bne.n	800d512 <USBH_ParseDevDesc+0xb6>
 800d504:	e001      	b.n	800d50a <USBH_ParseDevDesc+0xae>
 800d506:	2b40      	cmp	r3, #64	@ 0x40
 800d508:	d003      	beq.n	800d512 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	2208      	movs	r2, #8
 800d50e:	71da      	strb	r2, [r3, #7]
        break;
 800d510:	e000      	b.n	800d514 <USBH_ParseDevDesc+0xb8>
        break;
 800d512:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800d514:	e00e      	b.n	800d534 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d51c:	2b02      	cmp	r3, #2
 800d51e:	d107      	bne.n	800d530 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	79db      	ldrb	r3, [r3, #7]
 800d524:	2b08      	cmp	r3, #8
 800d526:	d005      	beq.n	800d534 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	2208      	movs	r2, #8
 800d52c:	71da      	strb	r2, [r3, #7]
 800d52e:	e001      	b.n	800d534 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800d530:	2303      	movs	r3, #3
 800d532:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800d534:	88fb      	ldrh	r3, [r7, #6]
 800d536:	2b08      	cmp	r3, #8
 800d538:	d936      	bls.n	800d5a8 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	3308      	adds	r3, #8
 800d53e:	781b      	ldrb	r3, [r3, #0]
 800d540:	461a      	mov	r2, r3
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	3309      	adds	r3, #9
 800d546:	781b      	ldrb	r3, [r3, #0]
 800d548:	021b      	lsls	r3, r3, #8
 800d54a:	b29b      	uxth	r3, r3
 800d54c:	4313      	orrs	r3, r2
 800d54e:	b29a      	uxth	r2, r3
 800d550:	693b      	ldr	r3, [r7, #16]
 800d552:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	330a      	adds	r3, #10
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	461a      	mov	r2, r3
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	330b      	adds	r3, #11
 800d560:	781b      	ldrb	r3, [r3, #0]
 800d562:	021b      	lsls	r3, r3, #8
 800d564:	b29b      	uxth	r3, r3
 800d566:	4313      	orrs	r3, r2
 800d568:	b29a      	uxth	r2, r3
 800d56a:	693b      	ldr	r3, [r7, #16]
 800d56c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	330c      	adds	r3, #12
 800d572:	781b      	ldrb	r3, [r3, #0]
 800d574:	461a      	mov	r2, r3
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	330d      	adds	r3, #13
 800d57a:	781b      	ldrb	r3, [r3, #0]
 800d57c:	021b      	lsls	r3, r3, #8
 800d57e:	b29b      	uxth	r3, r3
 800d580:	4313      	orrs	r3, r2
 800d582:	b29a      	uxth	r2, r3
 800d584:	693b      	ldr	r3, [r7, #16]
 800d586:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	7b9a      	ldrb	r2, [r3, #14]
 800d58c:	693b      	ldr	r3, [r7, #16]
 800d58e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	7bda      	ldrb	r2, [r3, #15]
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	7c1a      	ldrb	r2, [r3, #16]
 800d59c:	693b      	ldr	r3, [r7, #16]
 800d59e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	7c5a      	ldrb	r2, [r3, #17]
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800d5a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	371c      	adds	r7, #28
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b4:	4770      	bx	lr
 800d5b6:	bf00      	nop
 800d5b8:	01000101 	.word	0x01000101

0800d5bc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b08c      	sub	sp, #48	@ 0x30
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	60f8      	str	r0, [r7, #12]
 800d5c4:	60b9      	str	r1, [r7, #8]
 800d5c6:	4613      	mov	r3, r2
 800d5c8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800d5d0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800d5de:	2300      	movs	r3, #0
 800d5e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d101      	bne.n	800d5ee <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800d5ea:	2302      	movs	r3, #2
 800d5ec:	e0da      	b.n	800d7a4 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	781a      	ldrb	r2, [r3, #0]
 800d5f6:	6a3b      	ldr	r3, [r7, #32]
 800d5f8:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	785a      	ldrb	r2, [r3, #1]
 800d5fe:	6a3b      	ldr	r3, [r7, #32]
 800d600:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	3302      	adds	r3, #2
 800d606:	781b      	ldrb	r3, [r3, #0]
 800d608:	461a      	mov	r2, r3
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	3303      	adds	r3, #3
 800d60e:	781b      	ldrb	r3, [r3, #0]
 800d610:	021b      	lsls	r3, r3, #8
 800d612:	b29b      	uxth	r3, r3
 800d614:	4313      	orrs	r3, r2
 800d616:	b29b      	uxth	r3, r3
 800d618:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d61c:	bf28      	it	cs
 800d61e:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800d622:	b29a      	uxth	r2, r3
 800d624:	6a3b      	ldr	r3, [r7, #32]
 800d626:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	791a      	ldrb	r2, [r3, #4]
 800d62c:	6a3b      	ldr	r3, [r7, #32]
 800d62e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	795a      	ldrb	r2, [r3, #5]
 800d634:	6a3b      	ldr	r3, [r7, #32]
 800d636:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	799a      	ldrb	r2, [r3, #6]
 800d63c:	6a3b      	ldr	r3, [r7, #32]
 800d63e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	79da      	ldrb	r2, [r3, #7]
 800d644:	6a3b      	ldr	r3, [r7, #32]
 800d646:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	7a1a      	ldrb	r2, [r3, #8]
 800d64c:	6a3b      	ldr	r3, [r7, #32]
 800d64e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800d650:	6a3b      	ldr	r3, [r7, #32]
 800d652:	781b      	ldrb	r3, [r3, #0]
 800d654:	2b09      	cmp	r3, #9
 800d656:	d002      	beq.n	800d65e <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800d658:	6a3b      	ldr	r3, [r7, #32]
 800d65a:	2209      	movs	r2, #9
 800d65c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d65e:	88fb      	ldrh	r3, [r7, #6]
 800d660:	2b09      	cmp	r3, #9
 800d662:	f240 809d 	bls.w	800d7a0 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800d666:	2309      	movs	r3, #9
 800d668:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d66a:	2300      	movs	r3, #0
 800d66c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d66e:	e081      	b.n	800d774 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d670:	f107 0316 	add.w	r3, r7, #22
 800d674:	4619      	mov	r1, r3
 800d676:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d678:	f000 f9e7 	bl	800da4a <USBH_GetNextDesc>
 800d67c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800d67e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d680:	785b      	ldrb	r3, [r3, #1]
 800d682:	2b04      	cmp	r3, #4
 800d684:	d176      	bne.n	800d774 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800d686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d688:	781b      	ldrb	r3, [r3, #0]
 800d68a:	2b09      	cmp	r3, #9
 800d68c:	d002      	beq.n	800d694 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800d68e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d690:	2209      	movs	r2, #9
 800d692:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800d694:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d698:	221a      	movs	r2, #26
 800d69a:	fb02 f303 	mul.w	r3, r2, r3
 800d69e:	3308      	adds	r3, #8
 800d6a0:	6a3a      	ldr	r2, [r7, #32]
 800d6a2:	4413      	add	r3, r2
 800d6a4:	3302      	adds	r3, #2
 800d6a6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d6a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d6aa:	69f8      	ldr	r0, [r7, #28]
 800d6ac:	f000 f87e 	bl	800d7ac <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d6ba:	e043      	b.n	800d744 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d6bc:	f107 0316 	add.w	r3, r7, #22
 800d6c0:	4619      	mov	r1, r3
 800d6c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d6c4:	f000 f9c1 	bl	800da4a <USBH_GetNextDesc>
 800d6c8:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6cc:	785b      	ldrb	r3, [r3, #1]
 800d6ce:	2b05      	cmp	r3, #5
 800d6d0:	d138      	bne.n	800d744 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800d6d2:	69fb      	ldr	r3, [r7, #28]
 800d6d4:	795b      	ldrb	r3, [r3, #5]
 800d6d6:	2b01      	cmp	r3, #1
 800d6d8:	d113      	bne.n	800d702 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800d6da:	69fb      	ldr	r3, [r7, #28]
 800d6dc:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800d6de:	2b02      	cmp	r3, #2
 800d6e0:	d003      	beq.n	800d6ea <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800d6e2:	69fb      	ldr	r3, [r7, #28]
 800d6e4:	799b      	ldrb	r3, [r3, #6]
 800d6e6:	2b03      	cmp	r3, #3
 800d6e8:	d10b      	bne.n	800d702 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d6ea:	69fb      	ldr	r3, [r7, #28]
 800d6ec:	79db      	ldrb	r3, [r3, #7]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d10b      	bne.n	800d70a <USBH_ParseCfgDesc+0x14e>
 800d6f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6f4:	781b      	ldrb	r3, [r3, #0]
 800d6f6:	2b09      	cmp	r3, #9
 800d6f8:	d007      	beq.n	800d70a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800d6fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6fc:	2209      	movs	r2, #9
 800d6fe:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d700:	e003      	b.n	800d70a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800d702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d704:	2207      	movs	r2, #7
 800d706:	701a      	strb	r2, [r3, #0]
 800d708:	e000      	b.n	800d70c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d70a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d70c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d710:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d714:	3201      	adds	r2, #1
 800d716:	00d2      	lsls	r2, r2, #3
 800d718:	211a      	movs	r1, #26
 800d71a:	fb01 f303 	mul.w	r3, r1, r3
 800d71e:	4413      	add	r3, r2
 800d720:	3308      	adds	r3, #8
 800d722:	6a3a      	ldr	r2, [r7, #32]
 800d724:	4413      	add	r3, r2
 800d726:	3304      	adds	r3, #4
 800d728:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800d72a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d72c:	69b9      	ldr	r1, [r7, #24]
 800d72e:	68f8      	ldr	r0, [r7, #12]
 800d730:	f000 f870 	bl	800d814 <USBH_ParseEPDesc>
 800d734:	4603      	mov	r3, r0
 800d736:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800d73a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d73e:	3301      	adds	r3, #1
 800d740:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d744:	69fb      	ldr	r3, [r7, #28]
 800d746:	791b      	ldrb	r3, [r3, #4]
 800d748:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d204      	bcs.n	800d75a <USBH_ParseCfgDesc+0x19e>
 800d750:	6a3b      	ldr	r3, [r7, #32]
 800d752:	885a      	ldrh	r2, [r3, #2]
 800d754:	8afb      	ldrh	r3, [r7, #22]
 800d756:	429a      	cmp	r2, r3
 800d758:	d8b0      	bhi.n	800d6bc <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800d75a:	69fb      	ldr	r3, [r7, #28]
 800d75c:	791b      	ldrb	r3, [r3, #4]
 800d75e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d762:	429a      	cmp	r2, r3
 800d764:	d201      	bcs.n	800d76a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800d766:	2303      	movs	r3, #3
 800d768:	e01c      	b.n	800d7a4 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800d76a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d76e:	3301      	adds	r3, #1
 800d770:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d774:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d778:	2b01      	cmp	r3, #1
 800d77a:	d805      	bhi.n	800d788 <USBH_ParseCfgDesc+0x1cc>
 800d77c:	6a3b      	ldr	r3, [r7, #32]
 800d77e:	885a      	ldrh	r2, [r3, #2]
 800d780:	8afb      	ldrh	r3, [r7, #22]
 800d782:	429a      	cmp	r2, r3
 800d784:	f63f af74 	bhi.w	800d670 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800d788:	6a3b      	ldr	r3, [r7, #32]
 800d78a:	791b      	ldrb	r3, [r3, #4]
 800d78c:	2b02      	cmp	r3, #2
 800d78e:	bf28      	it	cs
 800d790:	2302      	movcs	r3, #2
 800d792:	b2db      	uxtb	r3, r3
 800d794:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d798:	429a      	cmp	r2, r3
 800d79a:	d201      	bcs.n	800d7a0 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800d79c:	2303      	movs	r3, #3
 800d79e:	e001      	b.n	800d7a4 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800d7a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3730      	adds	r7, #48	@ 0x30
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}

0800d7ac <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b083      	sub	sp, #12
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	781a      	ldrb	r2, [r3, #0]
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	785a      	ldrb	r2, [r3, #1]
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	789a      	ldrb	r2, [r3, #2]
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	78da      	ldrb	r2, [r3, #3]
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	3304      	adds	r3, #4
 800d7da:	781b      	ldrb	r3, [r3, #0]
 800d7dc:	2b02      	cmp	r3, #2
 800d7de:	bf28      	it	cs
 800d7e0:	2302      	movcs	r3, #2
 800d7e2:	b2da      	uxtb	r2, r3
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	795a      	ldrb	r2, [r3, #5]
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	799a      	ldrb	r2, [r3, #6]
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	79da      	ldrb	r2, [r3, #7]
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	7a1a      	ldrb	r2, [r3, #8]
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	721a      	strb	r2, [r3, #8]
}
 800d808:	bf00      	nop
 800d80a:	370c      	adds	r7, #12
 800d80c:	46bd      	mov	sp, r7
 800d80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d812:	4770      	bx	lr

0800d814 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800d814:	b480      	push	{r7}
 800d816:	b087      	sub	sp, #28
 800d818:	af00      	add	r7, sp, #0
 800d81a:	60f8      	str	r0, [r7, #12]
 800d81c:	60b9      	str	r1, [r7, #8]
 800d81e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800d820:	2300      	movs	r3, #0
 800d822:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	781a      	ldrb	r2, [r3, #0]
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	785a      	ldrb	r2, [r3, #1]
 800d830:	68bb      	ldr	r3, [r7, #8]
 800d832:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	789a      	ldrb	r2, [r3, #2]
 800d838:	68bb      	ldr	r3, [r7, #8]
 800d83a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	78da      	ldrb	r2, [r3, #3]
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	3304      	adds	r3, #4
 800d848:	781b      	ldrb	r3, [r3, #0]
 800d84a:	461a      	mov	r2, r3
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	3305      	adds	r3, #5
 800d850:	781b      	ldrb	r3, [r3, #0]
 800d852:	021b      	lsls	r3, r3, #8
 800d854:	b29b      	uxth	r3, r3
 800d856:	4313      	orrs	r3, r2
 800d858:	b29a      	uxth	r2, r3
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	799a      	ldrb	r2, [r3, #6]
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	889b      	ldrh	r3, [r3, #4]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d009      	beq.n	800d882 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800d872:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d876:	d804      	bhi.n	800d882 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800d87c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d880:	d901      	bls.n	800d886 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800d882:	2303      	movs	r3, #3
 800d884:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d136      	bne.n	800d8fe <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	78db      	ldrb	r3, [r3, #3]
 800d894:	f003 0303 	and.w	r3, r3, #3
 800d898:	2b02      	cmp	r3, #2
 800d89a:	d108      	bne.n	800d8ae <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	889b      	ldrh	r3, [r3, #4]
 800d8a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d8a4:	f240 8097 	bls.w	800d9d6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d8a8:	2303      	movs	r3, #3
 800d8aa:	75fb      	strb	r3, [r7, #23]
 800d8ac:	e093      	b.n	800d9d6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	78db      	ldrb	r3, [r3, #3]
 800d8b2:	f003 0303 	and.w	r3, r3, #3
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d107      	bne.n	800d8ca <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	889b      	ldrh	r3, [r3, #4]
 800d8be:	2b40      	cmp	r3, #64	@ 0x40
 800d8c0:	f240 8089 	bls.w	800d9d6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d8c4:	2303      	movs	r3, #3
 800d8c6:	75fb      	strb	r3, [r7, #23]
 800d8c8:	e085      	b.n	800d9d6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	78db      	ldrb	r3, [r3, #3]
 800d8ce:	f003 0303 	and.w	r3, r3, #3
 800d8d2:	2b01      	cmp	r3, #1
 800d8d4:	d005      	beq.n	800d8e2 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	78db      	ldrb	r3, [r3, #3]
 800d8da:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d8de:	2b03      	cmp	r3, #3
 800d8e0:	d10a      	bne.n	800d8f8 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	799b      	ldrb	r3, [r3, #6]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d003      	beq.n	800d8f2 <USBH_ParseEPDesc+0xde>
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	799b      	ldrb	r3, [r3, #6]
 800d8ee:	2b10      	cmp	r3, #16
 800d8f0:	d970      	bls.n	800d9d4 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800d8f2:	2303      	movs	r3, #3
 800d8f4:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d8f6:	e06d      	b.n	800d9d4 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d8f8:	2303      	movs	r3, #3
 800d8fa:	75fb      	strb	r3, [r7, #23]
 800d8fc:	e06b      	b.n	800d9d6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d904:	2b01      	cmp	r3, #1
 800d906:	d13c      	bne.n	800d982 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	78db      	ldrb	r3, [r3, #3]
 800d90c:	f003 0303 	and.w	r3, r3, #3
 800d910:	2b02      	cmp	r3, #2
 800d912:	d005      	beq.n	800d920 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	78db      	ldrb	r3, [r3, #3]
 800d918:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d106      	bne.n	800d92e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	889b      	ldrh	r3, [r3, #4]
 800d924:	2b40      	cmp	r3, #64	@ 0x40
 800d926:	d956      	bls.n	800d9d6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d928:	2303      	movs	r3, #3
 800d92a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d92c:	e053      	b.n	800d9d6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	78db      	ldrb	r3, [r3, #3]
 800d932:	f003 0303 	and.w	r3, r3, #3
 800d936:	2b01      	cmp	r3, #1
 800d938:	d10e      	bne.n	800d958 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	799b      	ldrb	r3, [r3, #6]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d007      	beq.n	800d952 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800d946:	2b10      	cmp	r3, #16
 800d948:	d803      	bhi.n	800d952 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800d94e:	2b40      	cmp	r3, #64	@ 0x40
 800d950:	d941      	bls.n	800d9d6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d952:	2303      	movs	r3, #3
 800d954:	75fb      	strb	r3, [r7, #23]
 800d956:	e03e      	b.n	800d9d6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	78db      	ldrb	r3, [r3, #3]
 800d95c:	f003 0303 	and.w	r3, r3, #3
 800d960:	2b03      	cmp	r3, #3
 800d962:	d10b      	bne.n	800d97c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	799b      	ldrb	r3, [r3, #6]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d004      	beq.n	800d976 <USBH_ParseEPDesc+0x162>
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	889b      	ldrh	r3, [r3, #4]
 800d970:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d974:	d32f      	bcc.n	800d9d6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d976:	2303      	movs	r3, #3
 800d978:	75fb      	strb	r3, [r7, #23]
 800d97a:	e02c      	b.n	800d9d6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d97c:	2303      	movs	r3, #3
 800d97e:	75fb      	strb	r3, [r7, #23]
 800d980:	e029      	b.n	800d9d6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d988:	2b02      	cmp	r3, #2
 800d98a:	d120      	bne.n	800d9ce <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	78db      	ldrb	r3, [r3, #3]
 800d990:	f003 0303 	and.w	r3, r3, #3
 800d994:	2b00      	cmp	r3, #0
 800d996:	d106      	bne.n	800d9a6 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	889b      	ldrh	r3, [r3, #4]
 800d99c:	2b08      	cmp	r3, #8
 800d99e:	d01a      	beq.n	800d9d6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d9a0:	2303      	movs	r3, #3
 800d9a2:	75fb      	strb	r3, [r7, #23]
 800d9a4:	e017      	b.n	800d9d6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	78db      	ldrb	r3, [r3, #3]
 800d9aa:	f003 0303 	and.w	r3, r3, #3
 800d9ae:	2b03      	cmp	r3, #3
 800d9b0:	d10a      	bne.n	800d9c8 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	799b      	ldrb	r3, [r3, #6]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d003      	beq.n	800d9c2 <USBH_ParseEPDesc+0x1ae>
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	889b      	ldrh	r3, [r3, #4]
 800d9be:	2b08      	cmp	r3, #8
 800d9c0:	d909      	bls.n	800d9d6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d9c2:	2303      	movs	r3, #3
 800d9c4:	75fb      	strb	r3, [r7, #23]
 800d9c6:	e006      	b.n	800d9d6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d9c8:	2303      	movs	r3, #3
 800d9ca:	75fb      	strb	r3, [r7, #23]
 800d9cc:	e003      	b.n	800d9d6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800d9ce:	2303      	movs	r3, #3
 800d9d0:	75fb      	strb	r3, [r7, #23]
 800d9d2:	e000      	b.n	800d9d6 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d9d4:	bf00      	nop
  }

  return status;
 800d9d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	371c      	adds	r7, #28
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e2:	4770      	bx	lr

0800d9e4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d9e4:	b480      	push	{r7}
 800d9e6:	b087      	sub	sp, #28
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	60f8      	str	r0, [r7, #12]
 800d9ec:	60b9      	str	r1, [r7, #8]
 800d9ee:	4613      	mov	r3, r2
 800d9f0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	3301      	adds	r3, #1
 800d9f6:	781b      	ldrb	r3, [r3, #0]
 800d9f8:	2b03      	cmp	r3, #3
 800d9fa:	d120      	bne.n	800da3e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	781b      	ldrb	r3, [r3, #0]
 800da00:	1e9a      	subs	r2, r3, #2
 800da02:	88fb      	ldrh	r3, [r7, #6]
 800da04:	4293      	cmp	r3, r2
 800da06:	bf28      	it	cs
 800da08:	4613      	movcs	r3, r2
 800da0a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	3302      	adds	r3, #2
 800da10:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800da12:	2300      	movs	r3, #0
 800da14:	82fb      	strh	r3, [r7, #22]
 800da16:	e00b      	b.n	800da30 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800da18:	8afb      	ldrh	r3, [r7, #22]
 800da1a:	68fa      	ldr	r2, [r7, #12]
 800da1c:	4413      	add	r3, r2
 800da1e:	781a      	ldrb	r2, [r3, #0]
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	701a      	strb	r2, [r3, #0]
      pdest++;
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	3301      	adds	r3, #1
 800da28:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800da2a:	8afb      	ldrh	r3, [r7, #22]
 800da2c:	3302      	adds	r3, #2
 800da2e:	82fb      	strh	r3, [r7, #22]
 800da30:	8afa      	ldrh	r2, [r7, #22]
 800da32:	8abb      	ldrh	r3, [r7, #20]
 800da34:	429a      	cmp	r2, r3
 800da36:	d3ef      	bcc.n	800da18 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	2200      	movs	r2, #0
 800da3c:	701a      	strb	r2, [r3, #0]
  }
}
 800da3e:	bf00      	nop
 800da40:	371c      	adds	r7, #28
 800da42:	46bd      	mov	sp, r7
 800da44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da48:	4770      	bx	lr

0800da4a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800da4a:	b480      	push	{r7}
 800da4c:	b085      	sub	sp, #20
 800da4e:	af00      	add	r7, sp, #0
 800da50:	6078      	str	r0, [r7, #4]
 800da52:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	881b      	ldrh	r3, [r3, #0]
 800da58:	687a      	ldr	r2, [r7, #4]
 800da5a:	7812      	ldrb	r2, [r2, #0]
 800da5c:	4413      	add	r3, r2
 800da5e:	b29a      	uxth	r2, r3
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	4413      	add	r3, r2
 800da6e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800da70:	68fb      	ldr	r3, [r7, #12]
}
 800da72:	4618      	mov	r0, r3
 800da74:	3714      	adds	r7, #20
 800da76:	46bd      	mov	sp, r7
 800da78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7c:	4770      	bx	lr

0800da7e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800da7e:	b580      	push	{r7, lr}
 800da80:	b086      	sub	sp, #24
 800da82:	af00      	add	r7, sp, #0
 800da84:	60f8      	str	r0, [r7, #12]
 800da86:	60b9      	str	r1, [r7, #8]
 800da88:	4613      	mov	r3, r2
 800da8a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800da8c:	2301      	movs	r3, #1
 800da8e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	789b      	ldrb	r3, [r3, #2]
 800da94:	2b01      	cmp	r3, #1
 800da96:	d002      	beq.n	800da9e <USBH_CtlReq+0x20>
 800da98:	2b02      	cmp	r3, #2
 800da9a:	d00f      	beq.n	800dabc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800da9c:	e027      	b.n	800daee <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	68ba      	ldr	r2, [r7, #8]
 800daa2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	88fa      	ldrh	r2, [r7, #6]
 800daa8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	2201      	movs	r2, #1
 800daae:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2202      	movs	r2, #2
 800dab4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800dab6:	2301      	movs	r3, #1
 800dab8:	75fb      	strb	r3, [r7, #23]
      break;
 800daba:	e018      	b.n	800daee <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800dabc:	68f8      	ldr	r0, [r7, #12]
 800dabe:	f000 f81b 	bl	800daf8 <USBH_HandleControl>
 800dac2:	4603      	mov	r3, r0
 800dac4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800dac6:	7dfb      	ldrb	r3, [r7, #23]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d002      	beq.n	800dad2 <USBH_CtlReq+0x54>
 800dacc:	7dfb      	ldrb	r3, [r7, #23]
 800dace:	2b03      	cmp	r3, #3
 800dad0:	d106      	bne.n	800dae0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	2201      	movs	r2, #1
 800dad6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	2200      	movs	r2, #0
 800dadc:	761a      	strb	r2, [r3, #24]
      break;
 800dade:	e005      	b.n	800daec <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800dae0:	7dfb      	ldrb	r3, [r7, #23]
 800dae2:	2b02      	cmp	r3, #2
 800dae4:	d102      	bne.n	800daec <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	2201      	movs	r2, #1
 800daea:	709a      	strb	r2, [r3, #2]
      break;
 800daec:	bf00      	nop
  }
  return status;
 800daee:	7dfb      	ldrb	r3, [r7, #23]
}
 800daf0:	4618      	mov	r0, r3
 800daf2:	3718      	adds	r7, #24
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}

0800daf8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b086      	sub	sp, #24
 800dafc:	af02      	add	r7, sp, #8
 800dafe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800db00:	2301      	movs	r3, #1
 800db02:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800db04:	2300      	movs	r3, #0
 800db06:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	7e1b      	ldrb	r3, [r3, #24]
 800db0c:	3b01      	subs	r3, #1
 800db0e:	2b0a      	cmp	r3, #10
 800db10:	f200 8156 	bhi.w	800ddc0 <USBH_HandleControl+0x2c8>
 800db14:	a201      	add	r2, pc, #4	@ (adr r2, 800db1c <USBH_HandleControl+0x24>)
 800db16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db1a:	bf00      	nop
 800db1c:	0800db49 	.word	0x0800db49
 800db20:	0800db63 	.word	0x0800db63
 800db24:	0800dbcd 	.word	0x0800dbcd
 800db28:	0800dbf3 	.word	0x0800dbf3
 800db2c:	0800dc2b 	.word	0x0800dc2b
 800db30:	0800dc55 	.word	0x0800dc55
 800db34:	0800dca7 	.word	0x0800dca7
 800db38:	0800dcc9 	.word	0x0800dcc9
 800db3c:	0800dd05 	.word	0x0800dd05
 800db40:	0800dd2b 	.word	0x0800dd2b
 800db44:	0800dd69 	.word	0x0800dd69
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f103 0110 	add.w	r1, r3, #16
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	795b      	ldrb	r3, [r3, #5]
 800db52:	461a      	mov	r2, r3
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f000 f943 	bl	800dde0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2202      	movs	r2, #2
 800db5e:	761a      	strb	r2, [r3, #24]
      break;
 800db60:	e139      	b.n	800ddd6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	795b      	ldrb	r3, [r3, #5]
 800db66:	4619      	mov	r1, r3
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f003 f84d 	bl	8010c08 <USBH_LL_GetURBState>
 800db6e:	4603      	mov	r3, r0
 800db70:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800db72:	7bbb      	ldrb	r3, [r7, #14]
 800db74:	2b01      	cmp	r3, #1
 800db76:	d11e      	bne.n	800dbb6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	7c1b      	ldrb	r3, [r3, #16]
 800db7c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800db80:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	8adb      	ldrh	r3, [r3, #22]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d00a      	beq.n	800dba0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800db8a:	7b7b      	ldrb	r3, [r7, #13]
 800db8c:	2b80      	cmp	r3, #128	@ 0x80
 800db8e:	d103      	bne.n	800db98 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2203      	movs	r2, #3
 800db94:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800db96:	e115      	b.n	800ddc4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2205      	movs	r2, #5
 800db9c:	761a      	strb	r2, [r3, #24]
      break;
 800db9e:	e111      	b.n	800ddc4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800dba0:	7b7b      	ldrb	r3, [r7, #13]
 800dba2:	2b80      	cmp	r3, #128	@ 0x80
 800dba4:	d103      	bne.n	800dbae <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2209      	movs	r2, #9
 800dbaa:	761a      	strb	r2, [r3, #24]
      break;
 800dbac:	e10a      	b.n	800ddc4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2207      	movs	r2, #7
 800dbb2:	761a      	strb	r2, [r3, #24]
      break;
 800dbb4:	e106      	b.n	800ddc4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800dbb6:	7bbb      	ldrb	r3, [r7, #14]
 800dbb8:	2b04      	cmp	r3, #4
 800dbba:	d003      	beq.n	800dbc4 <USBH_HandleControl+0xcc>
 800dbbc:	7bbb      	ldrb	r3, [r7, #14]
 800dbbe:	2b02      	cmp	r3, #2
 800dbc0:	f040 8100 	bne.w	800ddc4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	220b      	movs	r2, #11
 800dbc8:	761a      	strb	r2, [r3, #24]
      break;
 800dbca:	e0fb      	b.n	800ddc4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800dbd2:	b29a      	uxth	r2, r3
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6899      	ldr	r1, [r3, #8]
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	899a      	ldrh	r2, [r3, #12]
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	791b      	ldrb	r3, [r3, #4]
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	f000 f93a 	bl	800de5e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2204      	movs	r2, #4
 800dbee:	761a      	strb	r2, [r3, #24]
      break;
 800dbf0:	e0f1      	b.n	800ddd6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	791b      	ldrb	r3, [r3, #4]
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f003 f805 	bl	8010c08 <USBH_LL_GetURBState>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800dc02:	7bbb      	ldrb	r3, [r7, #14]
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	d102      	bne.n	800dc0e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2209      	movs	r2, #9
 800dc0c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800dc0e:	7bbb      	ldrb	r3, [r7, #14]
 800dc10:	2b05      	cmp	r3, #5
 800dc12:	d102      	bne.n	800dc1a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800dc14:	2303      	movs	r3, #3
 800dc16:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dc18:	e0d6      	b.n	800ddc8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800dc1a:	7bbb      	ldrb	r3, [r7, #14]
 800dc1c:	2b04      	cmp	r3, #4
 800dc1e:	f040 80d3 	bne.w	800ddc8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	220b      	movs	r2, #11
 800dc26:	761a      	strb	r2, [r3, #24]
      break;
 800dc28:	e0ce      	b.n	800ddc8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6899      	ldr	r1, [r3, #8]
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	899a      	ldrh	r2, [r3, #12]
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	795b      	ldrb	r3, [r3, #5]
 800dc36:	2001      	movs	r0, #1
 800dc38:	9000      	str	r0, [sp, #0]
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f000 f8ea 	bl	800de14 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800dc46:	b29a      	uxth	r2, r3
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2206      	movs	r2, #6
 800dc50:	761a      	strb	r2, [r3, #24]
      break;
 800dc52:	e0c0      	b.n	800ddd6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	795b      	ldrb	r3, [r3, #5]
 800dc58:	4619      	mov	r1, r3
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f002 ffd4 	bl	8010c08 <USBH_LL_GetURBState>
 800dc60:	4603      	mov	r3, r0
 800dc62:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800dc64:	7bbb      	ldrb	r3, [r7, #14]
 800dc66:	2b01      	cmp	r3, #1
 800dc68:	d103      	bne.n	800dc72 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2207      	movs	r2, #7
 800dc6e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dc70:	e0ac      	b.n	800ddcc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800dc72:	7bbb      	ldrb	r3, [r7, #14]
 800dc74:	2b05      	cmp	r3, #5
 800dc76:	d105      	bne.n	800dc84 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	220c      	movs	r2, #12
 800dc7c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800dc7e:	2303      	movs	r3, #3
 800dc80:	73fb      	strb	r3, [r7, #15]
      break;
 800dc82:	e0a3      	b.n	800ddcc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800dc84:	7bbb      	ldrb	r3, [r7, #14]
 800dc86:	2b02      	cmp	r3, #2
 800dc88:	d103      	bne.n	800dc92 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2205      	movs	r2, #5
 800dc8e:	761a      	strb	r2, [r3, #24]
      break;
 800dc90:	e09c      	b.n	800ddcc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800dc92:	7bbb      	ldrb	r3, [r7, #14]
 800dc94:	2b04      	cmp	r3, #4
 800dc96:	f040 8099 	bne.w	800ddcc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	220b      	movs	r2, #11
 800dc9e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800dca0:	2302      	movs	r3, #2
 800dca2:	73fb      	strb	r3, [r7, #15]
      break;
 800dca4:	e092      	b.n	800ddcc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	791b      	ldrb	r3, [r3, #4]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	2100      	movs	r1, #0
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f000 f8d5 	bl	800de5e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800dcba:	b29a      	uxth	r2, r3
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2208      	movs	r2, #8
 800dcc4:	761a      	strb	r2, [r3, #24]

      break;
 800dcc6:	e086      	b.n	800ddd6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	791b      	ldrb	r3, [r3, #4]
 800dccc:	4619      	mov	r1, r3
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f002 ff9a 	bl	8010c08 <USBH_LL_GetURBState>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800dcd8:	7bbb      	ldrb	r3, [r7, #14]
 800dcda:	2b01      	cmp	r3, #1
 800dcdc:	d105      	bne.n	800dcea <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	220d      	movs	r2, #13
 800dce2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800dce4:	2300      	movs	r3, #0
 800dce6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dce8:	e072      	b.n	800ddd0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800dcea:	7bbb      	ldrb	r3, [r7, #14]
 800dcec:	2b04      	cmp	r3, #4
 800dcee:	d103      	bne.n	800dcf8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	220b      	movs	r2, #11
 800dcf4:	761a      	strb	r2, [r3, #24]
      break;
 800dcf6:	e06b      	b.n	800ddd0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800dcf8:	7bbb      	ldrb	r3, [r7, #14]
 800dcfa:	2b05      	cmp	r3, #5
 800dcfc:	d168      	bne.n	800ddd0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800dcfe:	2303      	movs	r3, #3
 800dd00:	73fb      	strb	r3, [r7, #15]
      break;
 800dd02:	e065      	b.n	800ddd0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	795b      	ldrb	r3, [r3, #5]
 800dd08:	2201      	movs	r2, #1
 800dd0a:	9200      	str	r2, [sp, #0]
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	2100      	movs	r1, #0
 800dd10:	6878      	ldr	r0, [r7, #4]
 800dd12:	f000 f87f 	bl	800de14 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800dd1c:	b29a      	uxth	r2, r3
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	220a      	movs	r2, #10
 800dd26:	761a      	strb	r2, [r3, #24]
      break;
 800dd28:	e055      	b.n	800ddd6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	795b      	ldrb	r3, [r3, #5]
 800dd2e:	4619      	mov	r1, r3
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f002 ff69 	bl	8010c08 <USBH_LL_GetURBState>
 800dd36:	4603      	mov	r3, r0
 800dd38:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800dd3a:	7bbb      	ldrb	r3, [r7, #14]
 800dd3c:	2b01      	cmp	r3, #1
 800dd3e:	d105      	bne.n	800dd4c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800dd40:	2300      	movs	r3, #0
 800dd42:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	220d      	movs	r2, #13
 800dd48:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dd4a:	e043      	b.n	800ddd4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800dd4c:	7bbb      	ldrb	r3, [r7, #14]
 800dd4e:	2b02      	cmp	r3, #2
 800dd50:	d103      	bne.n	800dd5a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	2209      	movs	r2, #9
 800dd56:	761a      	strb	r2, [r3, #24]
      break;
 800dd58:	e03c      	b.n	800ddd4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800dd5a:	7bbb      	ldrb	r3, [r7, #14]
 800dd5c:	2b04      	cmp	r3, #4
 800dd5e:	d139      	bne.n	800ddd4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	220b      	movs	r2, #11
 800dd64:	761a      	strb	r2, [r3, #24]
      break;
 800dd66:	e035      	b.n	800ddd4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	7e5b      	ldrb	r3, [r3, #25]
 800dd6c:	3301      	adds	r3, #1
 800dd6e:	b2da      	uxtb	r2, r3
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	765a      	strb	r2, [r3, #25]
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	7e5b      	ldrb	r3, [r3, #25]
 800dd78:	2b02      	cmp	r3, #2
 800dd7a:	d806      	bhi.n	800dd8a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2201      	movs	r2, #1
 800dd80:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2201      	movs	r2, #1
 800dd86:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800dd88:	e025      	b.n	800ddd6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800dd90:	2106      	movs	r1, #6
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2200      	movs	r2, #0
 800dd9a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	795b      	ldrb	r3, [r3, #5]
 800dda0:	4619      	mov	r1, r3
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f000 f90c 	bl	800dfc0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	791b      	ldrb	r3, [r3, #4]
 800ddac:	4619      	mov	r1, r3
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f000 f906 	bl	800dfc0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ddba:	2302      	movs	r3, #2
 800ddbc:	73fb      	strb	r3, [r7, #15]
      break;
 800ddbe:	e00a      	b.n	800ddd6 <USBH_HandleControl+0x2de>

    default:
      break;
 800ddc0:	bf00      	nop
 800ddc2:	e008      	b.n	800ddd6 <USBH_HandleControl+0x2de>
      break;
 800ddc4:	bf00      	nop
 800ddc6:	e006      	b.n	800ddd6 <USBH_HandleControl+0x2de>
      break;
 800ddc8:	bf00      	nop
 800ddca:	e004      	b.n	800ddd6 <USBH_HandleControl+0x2de>
      break;
 800ddcc:	bf00      	nop
 800ddce:	e002      	b.n	800ddd6 <USBH_HandleControl+0x2de>
      break;
 800ddd0:	bf00      	nop
 800ddd2:	e000      	b.n	800ddd6 <USBH_HandleControl+0x2de>
      break;
 800ddd4:	bf00      	nop
  }

  return status;
 800ddd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3710      	adds	r7, #16
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}

0800dde0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b088      	sub	sp, #32
 800dde4:	af04      	add	r7, sp, #16
 800dde6:	60f8      	str	r0, [r7, #12]
 800dde8:	60b9      	str	r1, [r7, #8]
 800ddea:	4613      	mov	r3, r2
 800ddec:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ddee:	79f9      	ldrb	r1, [r7, #7]
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	9303      	str	r3, [sp, #12]
 800ddf4:	2308      	movs	r3, #8
 800ddf6:	9302      	str	r3, [sp, #8]
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	9301      	str	r3, [sp, #4]
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	9300      	str	r3, [sp, #0]
 800de00:	2300      	movs	r3, #0
 800de02:	2200      	movs	r2, #0
 800de04:	68f8      	ldr	r0, [r7, #12]
 800de06:	f002 fece 	bl	8010ba6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800de0a:	2300      	movs	r3, #0
}
 800de0c:	4618      	mov	r0, r3
 800de0e:	3710      	adds	r7, #16
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}

0800de14 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b088      	sub	sp, #32
 800de18:	af04      	add	r7, sp, #16
 800de1a:	60f8      	str	r0, [r7, #12]
 800de1c:	60b9      	str	r1, [r7, #8]
 800de1e:	4611      	mov	r1, r2
 800de20:	461a      	mov	r2, r3
 800de22:	460b      	mov	r3, r1
 800de24:	80fb      	strh	r3, [r7, #6]
 800de26:	4613      	mov	r3, r2
 800de28:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800de30:	2b00      	cmp	r3, #0
 800de32:	d001      	beq.n	800de38 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800de34:	2300      	movs	r3, #0
 800de36:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800de38:	7979      	ldrb	r1, [r7, #5]
 800de3a:	7e3b      	ldrb	r3, [r7, #24]
 800de3c:	9303      	str	r3, [sp, #12]
 800de3e:	88fb      	ldrh	r3, [r7, #6]
 800de40:	9302      	str	r3, [sp, #8]
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	9301      	str	r3, [sp, #4]
 800de46:	2301      	movs	r3, #1
 800de48:	9300      	str	r3, [sp, #0]
 800de4a:	2300      	movs	r3, #0
 800de4c:	2200      	movs	r2, #0
 800de4e:	68f8      	ldr	r0, [r7, #12]
 800de50:	f002 fea9 	bl	8010ba6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800de54:	2300      	movs	r3, #0
}
 800de56:	4618      	mov	r0, r3
 800de58:	3710      	adds	r7, #16
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}

0800de5e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800de5e:	b580      	push	{r7, lr}
 800de60:	b088      	sub	sp, #32
 800de62:	af04      	add	r7, sp, #16
 800de64:	60f8      	str	r0, [r7, #12]
 800de66:	60b9      	str	r1, [r7, #8]
 800de68:	4611      	mov	r1, r2
 800de6a:	461a      	mov	r2, r3
 800de6c:	460b      	mov	r3, r1
 800de6e:	80fb      	strh	r3, [r7, #6]
 800de70:	4613      	mov	r3, r2
 800de72:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800de74:	7979      	ldrb	r1, [r7, #5]
 800de76:	2300      	movs	r3, #0
 800de78:	9303      	str	r3, [sp, #12]
 800de7a:	88fb      	ldrh	r3, [r7, #6]
 800de7c:	9302      	str	r3, [sp, #8]
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	9301      	str	r3, [sp, #4]
 800de82:	2301      	movs	r3, #1
 800de84:	9300      	str	r3, [sp, #0]
 800de86:	2300      	movs	r3, #0
 800de88:	2201      	movs	r2, #1
 800de8a:	68f8      	ldr	r0, [r7, #12]
 800de8c:	f002 fe8b 	bl	8010ba6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800de90:	2300      	movs	r3, #0

}
 800de92:	4618      	mov	r0, r3
 800de94:	3710      	adds	r7, #16
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}

0800de9a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800de9a:	b580      	push	{r7, lr}
 800de9c:	b088      	sub	sp, #32
 800de9e:	af04      	add	r7, sp, #16
 800dea0:	60f8      	str	r0, [r7, #12]
 800dea2:	60b9      	str	r1, [r7, #8]
 800dea4:	4611      	mov	r1, r2
 800dea6:	461a      	mov	r2, r3
 800dea8:	460b      	mov	r3, r1
 800deaa:	80fb      	strh	r3, [r7, #6]
 800deac:	4613      	mov	r3, r2
 800deae:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d001      	beq.n	800debe <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800deba:	2300      	movs	r3, #0
 800debc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800debe:	7979      	ldrb	r1, [r7, #5]
 800dec0:	7e3b      	ldrb	r3, [r7, #24]
 800dec2:	9303      	str	r3, [sp, #12]
 800dec4:	88fb      	ldrh	r3, [r7, #6]
 800dec6:	9302      	str	r3, [sp, #8]
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	9301      	str	r3, [sp, #4]
 800decc:	2301      	movs	r3, #1
 800dece:	9300      	str	r3, [sp, #0]
 800ded0:	2302      	movs	r3, #2
 800ded2:	2200      	movs	r2, #0
 800ded4:	68f8      	ldr	r0, [r7, #12]
 800ded6:	f002 fe66 	bl	8010ba6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800deda:	2300      	movs	r3, #0
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3710      	adds	r7, #16
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}

0800dee4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b088      	sub	sp, #32
 800dee8:	af04      	add	r7, sp, #16
 800deea:	60f8      	str	r0, [r7, #12]
 800deec:	60b9      	str	r1, [r7, #8]
 800deee:	4611      	mov	r1, r2
 800def0:	461a      	mov	r2, r3
 800def2:	460b      	mov	r3, r1
 800def4:	80fb      	strh	r3, [r7, #6]
 800def6:	4613      	mov	r3, r2
 800def8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800defa:	7979      	ldrb	r1, [r7, #5]
 800defc:	2300      	movs	r3, #0
 800defe:	9303      	str	r3, [sp, #12]
 800df00:	88fb      	ldrh	r3, [r7, #6]
 800df02:	9302      	str	r3, [sp, #8]
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	9301      	str	r3, [sp, #4]
 800df08:	2301      	movs	r3, #1
 800df0a:	9300      	str	r3, [sp, #0]
 800df0c:	2302      	movs	r3, #2
 800df0e:	2201      	movs	r2, #1
 800df10:	68f8      	ldr	r0, [r7, #12]
 800df12:	f002 fe48 	bl	8010ba6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800df16:	2300      	movs	r3, #0
}
 800df18:	4618      	mov	r0, r3
 800df1a:	3710      	adds	r7, #16
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}

0800df20 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b086      	sub	sp, #24
 800df24:	af04      	add	r7, sp, #16
 800df26:	6078      	str	r0, [r7, #4]
 800df28:	4608      	mov	r0, r1
 800df2a:	4611      	mov	r1, r2
 800df2c:	461a      	mov	r2, r3
 800df2e:	4603      	mov	r3, r0
 800df30:	70fb      	strb	r3, [r7, #3]
 800df32:	460b      	mov	r3, r1
 800df34:	70bb      	strb	r3, [r7, #2]
 800df36:	4613      	mov	r3, r2
 800df38:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800df3a:	7878      	ldrb	r0, [r7, #1]
 800df3c:	78ba      	ldrb	r2, [r7, #2]
 800df3e:	78f9      	ldrb	r1, [r7, #3]
 800df40:	8b3b      	ldrh	r3, [r7, #24]
 800df42:	9302      	str	r3, [sp, #8]
 800df44:	7d3b      	ldrb	r3, [r7, #20]
 800df46:	9301      	str	r3, [sp, #4]
 800df48:	7c3b      	ldrb	r3, [r7, #16]
 800df4a:	9300      	str	r3, [sp, #0]
 800df4c:	4603      	mov	r3, r0
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	f002 fddb 	bl	8010b0a <USBH_LL_OpenPipe>

  return USBH_OK;
 800df54:	2300      	movs	r3, #0
}
 800df56:	4618      	mov	r0, r3
 800df58:	3708      	adds	r7, #8
 800df5a:	46bd      	mov	sp, r7
 800df5c:	bd80      	pop	{r7, pc}

0800df5e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800df5e:	b580      	push	{r7, lr}
 800df60:	b082      	sub	sp, #8
 800df62:	af00      	add	r7, sp, #0
 800df64:	6078      	str	r0, [r7, #4]
 800df66:	460b      	mov	r3, r1
 800df68:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800df6a:	78fb      	ldrb	r3, [r7, #3]
 800df6c:	4619      	mov	r1, r3
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f002 fdfa 	bl	8010b68 <USBH_LL_ClosePipe>

  return USBH_OK;
 800df74:	2300      	movs	r3, #0
}
 800df76:	4618      	mov	r0, r3
 800df78:	3708      	adds	r7, #8
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}

0800df7e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800df7e:	b580      	push	{r7, lr}
 800df80:	b084      	sub	sp, #16
 800df82:	af00      	add	r7, sp, #0
 800df84:	6078      	str	r0, [r7, #4]
 800df86:	460b      	mov	r3, r1
 800df88:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f000 f836 	bl	800dffc <USBH_GetFreePipe>
 800df90:	4603      	mov	r3, r0
 800df92:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800df94:	89fb      	ldrh	r3, [r7, #14]
 800df96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800df9a:	4293      	cmp	r3, r2
 800df9c:	d00a      	beq.n	800dfb4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800df9e:	78fa      	ldrb	r2, [r7, #3]
 800dfa0:	89fb      	ldrh	r3, [r7, #14]
 800dfa2:	f003 030f 	and.w	r3, r3, #15
 800dfa6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800dfaa:	6879      	ldr	r1, [r7, #4]
 800dfac:	33e0      	adds	r3, #224	@ 0xe0
 800dfae:	009b      	lsls	r3, r3, #2
 800dfb0:	440b      	add	r3, r1
 800dfb2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800dfb4:	89fb      	ldrh	r3, [r7, #14]
 800dfb6:	b2db      	uxtb	r3, r3
}
 800dfb8:	4618      	mov	r0, r3
 800dfba:	3710      	adds	r7, #16
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}

0800dfc0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800dfc0:	b480      	push	{r7}
 800dfc2:	b083      	sub	sp, #12
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
 800dfc8:	460b      	mov	r3, r1
 800dfca:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800dfcc:	78fb      	ldrb	r3, [r7, #3]
 800dfce:	2b0f      	cmp	r3, #15
 800dfd0:	d80d      	bhi.n	800dfee <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800dfd2:	78fb      	ldrb	r3, [r7, #3]
 800dfd4:	687a      	ldr	r2, [r7, #4]
 800dfd6:	33e0      	adds	r3, #224	@ 0xe0
 800dfd8:	009b      	lsls	r3, r3, #2
 800dfda:	4413      	add	r3, r2
 800dfdc:	685a      	ldr	r2, [r3, #4]
 800dfde:	78fb      	ldrb	r3, [r7, #3]
 800dfe0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800dfe4:	6879      	ldr	r1, [r7, #4]
 800dfe6:	33e0      	adds	r3, #224	@ 0xe0
 800dfe8:	009b      	lsls	r3, r3, #2
 800dfea:	440b      	add	r3, r1
 800dfec:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800dfee:	2300      	movs	r3, #0
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	370c      	adds	r7, #12
 800dff4:	46bd      	mov	sp, r7
 800dff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffa:	4770      	bx	lr

0800dffc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800dffc:	b480      	push	{r7}
 800dffe:	b085      	sub	sp, #20
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e004:	2300      	movs	r3, #0
 800e006:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e008:	2300      	movs	r3, #0
 800e00a:	73fb      	strb	r3, [r7, #15]
 800e00c:	e00f      	b.n	800e02e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e00e:	7bfb      	ldrb	r3, [r7, #15]
 800e010:	687a      	ldr	r2, [r7, #4]
 800e012:	33e0      	adds	r3, #224	@ 0xe0
 800e014:	009b      	lsls	r3, r3, #2
 800e016:	4413      	add	r3, r2
 800e018:	685b      	ldr	r3, [r3, #4]
 800e01a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d102      	bne.n	800e028 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e022:	7bfb      	ldrb	r3, [r7, #15]
 800e024:	b29b      	uxth	r3, r3
 800e026:	e007      	b.n	800e038 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e028:	7bfb      	ldrb	r3, [r7, #15]
 800e02a:	3301      	adds	r3, #1
 800e02c:	73fb      	strb	r3, [r7, #15]
 800e02e:	7bfb      	ldrb	r3, [r7, #15]
 800e030:	2b0f      	cmp	r3, #15
 800e032:	d9ec      	bls.n	800e00e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e034:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3714      	adds	r7, #20
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr

0800e044 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b084      	sub	sp, #16
 800e048:	af00      	add	r7, sp, #0
 800e04a:	4603      	mov	r3, r0
 800e04c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e04e:	79fb      	ldrb	r3, [r7, #7]
 800e050:	4a08      	ldr	r2, [pc, #32]	@ (800e074 <disk_status+0x30>)
 800e052:	009b      	lsls	r3, r3, #2
 800e054:	4413      	add	r3, r2
 800e056:	685b      	ldr	r3, [r3, #4]
 800e058:	685b      	ldr	r3, [r3, #4]
 800e05a:	79fa      	ldrb	r2, [r7, #7]
 800e05c:	4905      	ldr	r1, [pc, #20]	@ (800e074 <disk_status+0x30>)
 800e05e:	440a      	add	r2, r1
 800e060:	7a12      	ldrb	r2, [r2, #8]
 800e062:	4610      	mov	r0, r2
 800e064:	4798      	blx	r3
 800e066:	4603      	mov	r3, r0
 800e068:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e06a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	3710      	adds	r7, #16
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}
 800e074:	20001954 	.word	0x20001954

0800e078 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b084      	sub	sp, #16
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	4603      	mov	r3, r0
 800e080:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e082:	2300      	movs	r3, #0
 800e084:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e086:	79fb      	ldrb	r3, [r7, #7]
 800e088:	4a0e      	ldr	r2, [pc, #56]	@ (800e0c4 <disk_initialize+0x4c>)
 800e08a:	5cd3      	ldrb	r3, [r2, r3]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d114      	bne.n	800e0ba <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e090:	79fb      	ldrb	r3, [r7, #7]
 800e092:	4a0c      	ldr	r2, [pc, #48]	@ (800e0c4 <disk_initialize+0x4c>)
 800e094:	009b      	lsls	r3, r3, #2
 800e096:	4413      	add	r3, r2
 800e098:	685b      	ldr	r3, [r3, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	79fa      	ldrb	r2, [r7, #7]
 800e09e:	4909      	ldr	r1, [pc, #36]	@ (800e0c4 <disk_initialize+0x4c>)
 800e0a0:	440a      	add	r2, r1
 800e0a2:	7a12      	ldrb	r2, [r2, #8]
 800e0a4:	4610      	mov	r0, r2
 800e0a6:	4798      	blx	r3
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800e0ac:	7bfb      	ldrb	r3, [r7, #15]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d103      	bne.n	800e0ba <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800e0b2:	79fb      	ldrb	r3, [r7, #7]
 800e0b4:	4a03      	ldr	r2, [pc, #12]	@ (800e0c4 <disk_initialize+0x4c>)
 800e0b6:	2101      	movs	r1, #1
 800e0b8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800e0ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0bc:	4618      	mov	r0, r3
 800e0be:	3710      	adds	r7, #16
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bd80      	pop	{r7, pc}
 800e0c4:	20001954 	.word	0x20001954

0800e0c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e0c8:	b590      	push	{r4, r7, lr}
 800e0ca:	b087      	sub	sp, #28
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	60b9      	str	r1, [r7, #8]
 800e0d0:	607a      	str	r2, [r7, #4]
 800e0d2:	603b      	str	r3, [r7, #0]
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e0d8:	7bfb      	ldrb	r3, [r7, #15]
 800e0da:	4a0a      	ldr	r2, [pc, #40]	@ (800e104 <disk_read+0x3c>)
 800e0dc:	009b      	lsls	r3, r3, #2
 800e0de:	4413      	add	r3, r2
 800e0e0:	685b      	ldr	r3, [r3, #4]
 800e0e2:	689c      	ldr	r4, [r3, #8]
 800e0e4:	7bfb      	ldrb	r3, [r7, #15]
 800e0e6:	4a07      	ldr	r2, [pc, #28]	@ (800e104 <disk_read+0x3c>)
 800e0e8:	4413      	add	r3, r2
 800e0ea:	7a18      	ldrb	r0, [r3, #8]
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	687a      	ldr	r2, [r7, #4]
 800e0f0:	68b9      	ldr	r1, [r7, #8]
 800e0f2:	47a0      	blx	r4
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	75fb      	strb	r3, [r7, #23]
  return res;
 800e0f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	371c      	adds	r7, #28
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd90      	pop	{r4, r7, pc}
 800e102:	bf00      	nop
 800e104:	20001954 	.word	0x20001954

0800e108 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e108:	b590      	push	{r4, r7, lr}
 800e10a:	b087      	sub	sp, #28
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	60b9      	str	r1, [r7, #8]
 800e110:	607a      	str	r2, [r7, #4]
 800e112:	603b      	str	r3, [r7, #0]
 800e114:	4603      	mov	r3, r0
 800e116:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e118:	7bfb      	ldrb	r3, [r7, #15]
 800e11a:	4a0a      	ldr	r2, [pc, #40]	@ (800e144 <disk_write+0x3c>)
 800e11c:	009b      	lsls	r3, r3, #2
 800e11e:	4413      	add	r3, r2
 800e120:	685b      	ldr	r3, [r3, #4]
 800e122:	68dc      	ldr	r4, [r3, #12]
 800e124:	7bfb      	ldrb	r3, [r7, #15]
 800e126:	4a07      	ldr	r2, [pc, #28]	@ (800e144 <disk_write+0x3c>)
 800e128:	4413      	add	r3, r2
 800e12a:	7a18      	ldrb	r0, [r3, #8]
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	687a      	ldr	r2, [r7, #4]
 800e130:	68b9      	ldr	r1, [r7, #8]
 800e132:	47a0      	blx	r4
 800e134:	4603      	mov	r3, r0
 800e136:	75fb      	strb	r3, [r7, #23]
  return res;
 800e138:	7dfb      	ldrb	r3, [r7, #23]
}
 800e13a:	4618      	mov	r0, r3
 800e13c:	371c      	adds	r7, #28
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd90      	pop	{r4, r7, pc}
 800e142:	bf00      	nop
 800e144:	20001954 	.word	0x20001954

0800e148 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b084      	sub	sp, #16
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	4603      	mov	r3, r0
 800e150:	603a      	str	r2, [r7, #0]
 800e152:	71fb      	strb	r3, [r7, #7]
 800e154:	460b      	mov	r3, r1
 800e156:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e158:	79fb      	ldrb	r3, [r7, #7]
 800e15a:	4a09      	ldr	r2, [pc, #36]	@ (800e180 <disk_ioctl+0x38>)
 800e15c:	009b      	lsls	r3, r3, #2
 800e15e:	4413      	add	r3, r2
 800e160:	685b      	ldr	r3, [r3, #4]
 800e162:	691b      	ldr	r3, [r3, #16]
 800e164:	79fa      	ldrb	r2, [r7, #7]
 800e166:	4906      	ldr	r1, [pc, #24]	@ (800e180 <disk_ioctl+0x38>)
 800e168:	440a      	add	r2, r1
 800e16a:	7a10      	ldrb	r0, [r2, #8]
 800e16c:	79b9      	ldrb	r1, [r7, #6]
 800e16e:	683a      	ldr	r2, [r7, #0]
 800e170:	4798      	blx	r3
 800e172:	4603      	mov	r3, r0
 800e174:	73fb      	strb	r3, [r7, #15]
  return res;
 800e176:	7bfb      	ldrb	r3, [r7, #15]
}
 800e178:	4618      	mov	r0, r3
 800e17a:	3710      	adds	r7, #16
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}
 800e180:	20001954 	.word	0x20001954

0800e184 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e184:	b480      	push	{r7}
 800e186:	b085      	sub	sp, #20
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	3301      	adds	r3, #1
 800e190:	781b      	ldrb	r3, [r3, #0]
 800e192:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e194:	89fb      	ldrh	r3, [r7, #14]
 800e196:	021b      	lsls	r3, r3, #8
 800e198:	b21a      	sxth	r2, r3
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	781b      	ldrb	r3, [r3, #0]
 800e19e:	b21b      	sxth	r3, r3
 800e1a0:	4313      	orrs	r3, r2
 800e1a2:	b21b      	sxth	r3, r3
 800e1a4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e1a6:	89fb      	ldrh	r3, [r7, #14]
}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	3714      	adds	r7, #20
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b2:	4770      	bx	lr

0800e1b4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e1b4:	b480      	push	{r7}
 800e1b6:	b085      	sub	sp, #20
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	3303      	adds	r3, #3
 800e1c0:	781b      	ldrb	r3, [r3, #0]
 800e1c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	021b      	lsls	r3, r3, #8
 800e1c8:	687a      	ldr	r2, [r7, #4]
 800e1ca:	3202      	adds	r2, #2
 800e1cc:	7812      	ldrb	r2, [r2, #0]
 800e1ce:	4313      	orrs	r3, r2
 800e1d0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	021b      	lsls	r3, r3, #8
 800e1d6:	687a      	ldr	r2, [r7, #4]
 800e1d8:	3201      	adds	r2, #1
 800e1da:	7812      	ldrb	r2, [r2, #0]
 800e1dc:	4313      	orrs	r3, r2
 800e1de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	021b      	lsls	r3, r3, #8
 800e1e4:	687a      	ldr	r2, [r7, #4]
 800e1e6:	7812      	ldrb	r2, [r2, #0]
 800e1e8:	4313      	orrs	r3, r2
 800e1ea:	60fb      	str	r3, [r7, #12]
	return rv;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	3714      	adds	r7, #20
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f8:	4770      	bx	lr

0800e1fa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e1fa:	b480      	push	{r7}
 800e1fc:	b083      	sub	sp, #12
 800e1fe:	af00      	add	r7, sp, #0
 800e200:	6078      	str	r0, [r7, #4]
 800e202:	460b      	mov	r3, r1
 800e204:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	1c5a      	adds	r2, r3, #1
 800e20a:	607a      	str	r2, [r7, #4]
 800e20c:	887a      	ldrh	r2, [r7, #2]
 800e20e:	b2d2      	uxtb	r2, r2
 800e210:	701a      	strb	r2, [r3, #0]
 800e212:	887b      	ldrh	r3, [r7, #2]
 800e214:	0a1b      	lsrs	r3, r3, #8
 800e216:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	1c5a      	adds	r2, r3, #1
 800e21c:	607a      	str	r2, [r7, #4]
 800e21e:	887a      	ldrh	r2, [r7, #2]
 800e220:	b2d2      	uxtb	r2, r2
 800e222:	701a      	strb	r2, [r3, #0]
}
 800e224:	bf00      	nop
 800e226:	370c      	adds	r7, #12
 800e228:	46bd      	mov	sp, r7
 800e22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22e:	4770      	bx	lr

0800e230 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e230:	b480      	push	{r7}
 800e232:	b083      	sub	sp, #12
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
 800e238:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	1c5a      	adds	r2, r3, #1
 800e23e:	607a      	str	r2, [r7, #4]
 800e240:	683a      	ldr	r2, [r7, #0]
 800e242:	b2d2      	uxtb	r2, r2
 800e244:	701a      	strb	r2, [r3, #0]
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	0a1b      	lsrs	r3, r3, #8
 800e24a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	1c5a      	adds	r2, r3, #1
 800e250:	607a      	str	r2, [r7, #4]
 800e252:	683a      	ldr	r2, [r7, #0]
 800e254:	b2d2      	uxtb	r2, r2
 800e256:	701a      	strb	r2, [r3, #0]
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	0a1b      	lsrs	r3, r3, #8
 800e25c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	1c5a      	adds	r2, r3, #1
 800e262:	607a      	str	r2, [r7, #4]
 800e264:	683a      	ldr	r2, [r7, #0]
 800e266:	b2d2      	uxtb	r2, r2
 800e268:	701a      	strb	r2, [r3, #0]
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	0a1b      	lsrs	r3, r3, #8
 800e26e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	1c5a      	adds	r2, r3, #1
 800e274:	607a      	str	r2, [r7, #4]
 800e276:	683a      	ldr	r2, [r7, #0]
 800e278:	b2d2      	uxtb	r2, r2
 800e27a:	701a      	strb	r2, [r3, #0]
}
 800e27c:	bf00      	nop
 800e27e:	370c      	adds	r7, #12
 800e280:	46bd      	mov	sp, r7
 800e282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e286:	4770      	bx	lr

0800e288 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e288:	b480      	push	{r7}
 800e28a:	b087      	sub	sp, #28
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	60f8      	str	r0, [r7, #12]
 800e290:	60b9      	str	r1, [r7, #8]
 800e292:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d00d      	beq.n	800e2be <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e2a2:	693a      	ldr	r2, [r7, #16]
 800e2a4:	1c53      	adds	r3, r2, #1
 800e2a6:	613b      	str	r3, [r7, #16]
 800e2a8:	697b      	ldr	r3, [r7, #20]
 800e2aa:	1c59      	adds	r1, r3, #1
 800e2ac:	6179      	str	r1, [r7, #20]
 800e2ae:	7812      	ldrb	r2, [r2, #0]
 800e2b0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	3b01      	subs	r3, #1
 800e2b6:	607b      	str	r3, [r7, #4]
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d1f1      	bne.n	800e2a2 <mem_cpy+0x1a>
	}
}
 800e2be:	bf00      	nop
 800e2c0:	371c      	adds	r7, #28
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c8:	4770      	bx	lr

0800e2ca <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e2ca:	b480      	push	{r7}
 800e2cc:	b087      	sub	sp, #28
 800e2ce:	af00      	add	r7, sp, #0
 800e2d0:	60f8      	str	r0, [r7, #12]
 800e2d2:	60b9      	str	r1, [r7, #8]
 800e2d4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e2da:	697b      	ldr	r3, [r7, #20]
 800e2dc:	1c5a      	adds	r2, r3, #1
 800e2de:	617a      	str	r2, [r7, #20]
 800e2e0:	68ba      	ldr	r2, [r7, #8]
 800e2e2:	b2d2      	uxtb	r2, r2
 800e2e4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	3b01      	subs	r3, #1
 800e2ea:	607b      	str	r3, [r7, #4]
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d1f3      	bne.n	800e2da <mem_set+0x10>
}
 800e2f2:	bf00      	nop
 800e2f4:	bf00      	nop
 800e2f6:	371c      	adds	r7, #28
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fe:	4770      	bx	lr

0800e300 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e300:	b480      	push	{r7}
 800e302:	b089      	sub	sp, #36	@ 0x24
 800e304:	af00      	add	r7, sp, #0
 800e306:	60f8      	str	r0, [r7, #12]
 800e308:	60b9      	str	r1, [r7, #8]
 800e30a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	61fb      	str	r3, [r7, #28]
 800e310:	68bb      	ldr	r3, [r7, #8]
 800e312:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e314:	2300      	movs	r3, #0
 800e316:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e318:	69fb      	ldr	r3, [r7, #28]
 800e31a:	1c5a      	adds	r2, r3, #1
 800e31c:	61fa      	str	r2, [r7, #28]
 800e31e:	781b      	ldrb	r3, [r3, #0]
 800e320:	4619      	mov	r1, r3
 800e322:	69bb      	ldr	r3, [r7, #24]
 800e324:	1c5a      	adds	r2, r3, #1
 800e326:	61ba      	str	r2, [r7, #24]
 800e328:	781b      	ldrb	r3, [r3, #0]
 800e32a:	1acb      	subs	r3, r1, r3
 800e32c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	3b01      	subs	r3, #1
 800e332:	607b      	str	r3, [r7, #4]
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d002      	beq.n	800e340 <mem_cmp+0x40>
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d0eb      	beq.n	800e318 <mem_cmp+0x18>

	return r;
 800e340:	697b      	ldr	r3, [r7, #20]
}
 800e342:	4618      	mov	r0, r3
 800e344:	3724      	adds	r7, #36	@ 0x24
 800e346:	46bd      	mov	sp, r7
 800e348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34c:	4770      	bx	lr

0800e34e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e34e:	b480      	push	{r7}
 800e350:	b083      	sub	sp, #12
 800e352:	af00      	add	r7, sp, #0
 800e354:	6078      	str	r0, [r7, #4]
 800e356:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e358:	e002      	b.n	800e360 <chk_chr+0x12>
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	3301      	adds	r3, #1
 800e35e:	607b      	str	r3, [r7, #4]
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d005      	beq.n	800e374 <chk_chr+0x26>
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	781b      	ldrb	r3, [r3, #0]
 800e36c:	461a      	mov	r2, r3
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	4293      	cmp	r3, r2
 800e372:	d1f2      	bne.n	800e35a <chk_chr+0xc>
	return *str;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	781b      	ldrb	r3, [r3, #0]
}
 800e378:	4618      	mov	r0, r3
 800e37a:	370c      	adds	r7, #12
 800e37c:	46bd      	mov	sp, r7
 800e37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e382:	4770      	bx	lr

0800e384 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e384:	b480      	push	{r7}
 800e386:	b085      	sub	sp, #20
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
 800e38c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e38e:	2300      	movs	r3, #0
 800e390:	60bb      	str	r3, [r7, #8]
 800e392:	68bb      	ldr	r3, [r7, #8]
 800e394:	60fb      	str	r3, [r7, #12]
 800e396:	e029      	b.n	800e3ec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e398:	4a27      	ldr	r2, [pc, #156]	@ (800e438 <chk_lock+0xb4>)
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	011b      	lsls	r3, r3, #4
 800e39e:	4413      	add	r3, r2
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d01d      	beq.n	800e3e2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e3a6:	4a24      	ldr	r2, [pc, #144]	@ (800e438 <chk_lock+0xb4>)
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	011b      	lsls	r3, r3, #4
 800e3ac:	4413      	add	r3, r2
 800e3ae:	681a      	ldr	r2, [r3, #0]
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d116      	bne.n	800e3e6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e3b8:	4a1f      	ldr	r2, [pc, #124]	@ (800e438 <chk_lock+0xb4>)
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	011b      	lsls	r3, r3, #4
 800e3be:	4413      	add	r3, r2
 800e3c0:	3304      	adds	r3, #4
 800e3c2:	681a      	ldr	r2, [r3, #0]
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	d10c      	bne.n	800e3e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e3cc:	4a1a      	ldr	r2, [pc, #104]	@ (800e438 <chk_lock+0xb4>)
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	011b      	lsls	r3, r3, #4
 800e3d2:	4413      	add	r3, r2
 800e3d4:	3308      	adds	r3, #8
 800e3d6:	681a      	ldr	r2, [r3, #0]
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	d102      	bne.n	800e3e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e3e0:	e007      	b.n	800e3f2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e3e2:	2301      	movs	r3, #1
 800e3e4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	3301      	adds	r3, #1
 800e3ea:	60fb      	str	r3, [r7, #12]
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	2b01      	cmp	r3, #1
 800e3f0:	d9d2      	bls.n	800e398 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	2b02      	cmp	r3, #2
 800e3f6:	d109      	bne.n	800e40c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d102      	bne.n	800e404 <chk_lock+0x80>
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	2b02      	cmp	r3, #2
 800e402:	d101      	bne.n	800e408 <chk_lock+0x84>
 800e404:	2300      	movs	r3, #0
 800e406:	e010      	b.n	800e42a <chk_lock+0xa6>
 800e408:	2312      	movs	r3, #18
 800e40a:	e00e      	b.n	800e42a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d108      	bne.n	800e424 <chk_lock+0xa0>
 800e412:	4a09      	ldr	r2, [pc, #36]	@ (800e438 <chk_lock+0xb4>)
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	011b      	lsls	r3, r3, #4
 800e418:	4413      	add	r3, r2
 800e41a:	330c      	adds	r3, #12
 800e41c:	881b      	ldrh	r3, [r3, #0]
 800e41e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e422:	d101      	bne.n	800e428 <chk_lock+0xa4>
 800e424:	2310      	movs	r3, #16
 800e426:	e000      	b.n	800e42a <chk_lock+0xa6>
 800e428:	2300      	movs	r3, #0
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	3714      	adds	r7, #20
 800e42e:	46bd      	mov	sp, r7
 800e430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e434:	4770      	bx	lr
 800e436:	bf00      	nop
 800e438:	20001934 	.word	0x20001934

0800e43c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e43c:	b480      	push	{r7}
 800e43e:	b083      	sub	sp, #12
 800e440:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e442:	2300      	movs	r3, #0
 800e444:	607b      	str	r3, [r7, #4]
 800e446:	e002      	b.n	800e44e <enq_lock+0x12>
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	3301      	adds	r3, #1
 800e44c:	607b      	str	r3, [r7, #4]
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2b01      	cmp	r3, #1
 800e452:	d806      	bhi.n	800e462 <enq_lock+0x26>
 800e454:	4a09      	ldr	r2, [pc, #36]	@ (800e47c <enq_lock+0x40>)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	011b      	lsls	r3, r3, #4
 800e45a:	4413      	add	r3, r2
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d1f2      	bne.n	800e448 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2b02      	cmp	r3, #2
 800e466:	bf14      	ite	ne
 800e468:	2301      	movne	r3, #1
 800e46a:	2300      	moveq	r3, #0
 800e46c:	b2db      	uxtb	r3, r3
}
 800e46e:	4618      	mov	r0, r3
 800e470:	370c      	adds	r7, #12
 800e472:	46bd      	mov	sp, r7
 800e474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e478:	4770      	bx	lr
 800e47a:	bf00      	nop
 800e47c:	20001934 	.word	0x20001934

0800e480 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e480:	b480      	push	{r7}
 800e482:	b085      	sub	sp, #20
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
 800e488:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e48a:	2300      	movs	r3, #0
 800e48c:	60fb      	str	r3, [r7, #12]
 800e48e:	e01f      	b.n	800e4d0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e490:	4a41      	ldr	r2, [pc, #260]	@ (800e598 <inc_lock+0x118>)
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	011b      	lsls	r3, r3, #4
 800e496:	4413      	add	r3, r2
 800e498:	681a      	ldr	r2, [r3, #0]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	d113      	bne.n	800e4ca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e4a2:	4a3d      	ldr	r2, [pc, #244]	@ (800e598 <inc_lock+0x118>)
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	011b      	lsls	r3, r3, #4
 800e4a8:	4413      	add	r3, r2
 800e4aa:	3304      	adds	r3, #4
 800e4ac:	681a      	ldr	r2, [r3, #0]
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d109      	bne.n	800e4ca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e4b6:	4a38      	ldr	r2, [pc, #224]	@ (800e598 <inc_lock+0x118>)
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	011b      	lsls	r3, r3, #4
 800e4bc:	4413      	add	r3, r2
 800e4be:	3308      	adds	r3, #8
 800e4c0:	681a      	ldr	r2, [r3, #0]
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e4c6:	429a      	cmp	r2, r3
 800e4c8:	d006      	beq.n	800e4d8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	3301      	adds	r3, #1
 800e4ce:	60fb      	str	r3, [r7, #12]
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	2b01      	cmp	r3, #1
 800e4d4:	d9dc      	bls.n	800e490 <inc_lock+0x10>
 800e4d6:	e000      	b.n	800e4da <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e4d8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	2b02      	cmp	r3, #2
 800e4de:	d132      	bne.n	800e546 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	60fb      	str	r3, [r7, #12]
 800e4e4:	e002      	b.n	800e4ec <inc_lock+0x6c>
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	3301      	adds	r3, #1
 800e4ea:	60fb      	str	r3, [r7, #12]
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	2b01      	cmp	r3, #1
 800e4f0:	d806      	bhi.n	800e500 <inc_lock+0x80>
 800e4f2:	4a29      	ldr	r2, [pc, #164]	@ (800e598 <inc_lock+0x118>)
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	011b      	lsls	r3, r3, #4
 800e4f8:	4413      	add	r3, r2
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d1f2      	bne.n	800e4e6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	2b02      	cmp	r3, #2
 800e504:	d101      	bne.n	800e50a <inc_lock+0x8a>
 800e506:	2300      	movs	r3, #0
 800e508:	e040      	b.n	800e58c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681a      	ldr	r2, [r3, #0]
 800e50e:	4922      	ldr	r1, [pc, #136]	@ (800e598 <inc_lock+0x118>)
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	011b      	lsls	r3, r3, #4
 800e514:	440b      	add	r3, r1
 800e516:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	689a      	ldr	r2, [r3, #8]
 800e51c:	491e      	ldr	r1, [pc, #120]	@ (800e598 <inc_lock+0x118>)
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	011b      	lsls	r3, r3, #4
 800e522:	440b      	add	r3, r1
 800e524:	3304      	adds	r3, #4
 800e526:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	695a      	ldr	r2, [r3, #20]
 800e52c:	491a      	ldr	r1, [pc, #104]	@ (800e598 <inc_lock+0x118>)
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	011b      	lsls	r3, r3, #4
 800e532:	440b      	add	r3, r1
 800e534:	3308      	adds	r3, #8
 800e536:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e538:	4a17      	ldr	r2, [pc, #92]	@ (800e598 <inc_lock+0x118>)
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	011b      	lsls	r3, r3, #4
 800e53e:	4413      	add	r3, r2
 800e540:	330c      	adds	r3, #12
 800e542:	2200      	movs	r2, #0
 800e544:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d009      	beq.n	800e560 <inc_lock+0xe0>
 800e54c:	4a12      	ldr	r2, [pc, #72]	@ (800e598 <inc_lock+0x118>)
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	011b      	lsls	r3, r3, #4
 800e552:	4413      	add	r3, r2
 800e554:	330c      	adds	r3, #12
 800e556:	881b      	ldrh	r3, [r3, #0]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d001      	beq.n	800e560 <inc_lock+0xe0>
 800e55c:	2300      	movs	r3, #0
 800e55e:	e015      	b.n	800e58c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d108      	bne.n	800e578 <inc_lock+0xf8>
 800e566:	4a0c      	ldr	r2, [pc, #48]	@ (800e598 <inc_lock+0x118>)
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	011b      	lsls	r3, r3, #4
 800e56c:	4413      	add	r3, r2
 800e56e:	330c      	adds	r3, #12
 800e570:	881b      	ldrh	r3, [r3, #0]
 800e572:	3301      	adds	r3, #1
 800e574:	b29a      	uxth	r2, r3
 800e576:	e001      	b.n	800e57c <inc_lock+0xfc>
 800e578:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e57c:	4906      	ldr	r1, [pc, #24]	@ (800e598 <inc_lock+0x118>)
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	011b      	lsls	r3, r3, #4
 800e582:	440b      	add	r3, r1
 800e584:	330c      	adds	r3, #12
 800e586:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	3301      	adds	r3, #1
}
 800e58c:	4618      	mov	r0, r3
 800e58e:	3714      	adds	r7, #20
 800e590:	46bd      	mov	sp, r7
 800e592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e596:	4770      	bx	lr
 800e598:	20001934 	.word	0x20001934

0800e59c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e59c:	b480      	push	{r7}
 800e59e:	b085      	sub	sp, #20
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	3b01      	subs	r3, #1
 800e5a8:	607b      	str	r3, [r7, #4]
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2b01      	cmp	r3, #1
 800e5ae:	d825      	bhi.n	800e5fc <dec_lock+0x60>
		n = Files[i].ctr;
 800e5b0:	4a17      	ldr	r2, [pc, #92]	@ (800e610 <dec_lock+0x74>)
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	011b      	lsls	r3, r3, #4
 800e5b6:	4413      	add	r3, r2
 800e5b8:	330c      	adds	r3, #12
 800e5ba:	881b      	ldrh	r3, [r3, #0]
 800e5bc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e5be:	89fb      	ldrh	r3, [r7, #14]
 800e5c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e5c4:	d101      	bne.n	800e5ca <dec_lock+0x2e>
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e5ca:	89fb      	ldrh	r3, [r7, #14]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d002      	beq.n	800e5d6 <dec_lock+0x3a>
 800e5d0:	89fb      	ldrh	r3, [r7, #14]
 800e5d2:	3b01      	subs	r3, #1
 800e5d4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e5d6:	4a0e      	ldr	r2, [pc, #56]	@ (800e610 <dec_lock+0x74>)
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	011b      	lsls	r3, r3, #4
 800e5dc:	4413      	add	r3, r2
 800e5de:	330c      	adds	r3, #12
 800e5e0:	89fa      	ldrh	r2, [r7, #14]
 800e5e2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e5e4:	89fb      	ldrh	r3, [r7, #14]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d105      	bne.n	800e5f6 <dec_lock+0x5a>
 800e5ea:	4a09      	ldr	r2, [pc, #36]	@ (800e610 <dec_lock+0x74>)
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	011b      	lsls	r3, r3, #4
 800e5f0:	4413      	add	r3, r2
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	737b      	strb	r3, [r7, #13]
 800e5fa:	e001      	b.n	800e600 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e5fc:	2302      	movs	r3, #2
 800e5fe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e600:	7b7b      	ldrb	r3, [r7, #13]
}
 800e602:	4618      	mov	r0, r3
 800e604:	3714      	adds	r7, #20
 800e606:	46bd      	mov	sp, r7
 800e608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60c:	4770      	bx	lr
 800e60e:	bf00      	nop
 800e610:	20001934 	.word	0x20001934

0800e614 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e614:	b480      	push	{r7}
 800e616:	b085      	sub	sp, #20
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e61c:	2300      	movs	r3, #0
 800e61e:	60fb      	str	r3, [r7, #12]
 800e620:	e010      	b.n	800e644 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e622:	4a0d      	ldr	r2, [pc, #52]	@ (800e658 <clear_lock+0x44>)
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	011b      	lsls	r3, r3, #4
 800e628:	4413      	add	r3, r2
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	687a      	ldr	r2, [r7, #4]
 800e62e:	429a      	cmp	r2, r3
 800e630:	d105      	bne.n	800e63e <clear_lock+0x2a>
 800e632:	4a09      	ldr	r2, [pc, #36]	@ (800e658 <clear_lock+0x44>)
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	011b      	lsls	r3, r3, #4
 800e638:	4413      	add	r3, r2
 800e63a:	2200      	movs	r2, #0
 800e63c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	3301      	adds	r3, #1
 800e642:	60fb      	str	r3, [r7, #12]
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	2b01      	cmp	r3, #1
 800e648:	d9eb      	bls.n	800e622 <clear_lock+0xe>
	}
}
 800e64a:	bf00      	nop
 800e64c:	bf00      	nop
 800e64e:	3714      	adds	r7, #20
 800e650:	46bd      	mov	sp, r7
 800e652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e656:	4770      	bx	lr
 800e658:	20001934 	.word	0x20001934

0800e65c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b086      	sub	sp, #24
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e664:	2300      	movs	r3, #0
 800e666:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	78db      	ldrb	r3, [r3, #3]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d034      	beq.n	800e6da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e674:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	7858      	ldrb	r0, [r3, #1]
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e680:	2301      	movs	r3, #1
 800e682:	697a      	ldr	r2, [r7, #20]
 800e684:	f7ff fd40 	bl	800e108 <disk_write>
 800e688:	4603      	mov	r3, r0
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d002      	beq.n	800e694 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e68e:	2301      	movs	r3, #1
 800e690:	73fb      	strb	r3, [r7, #15]
 800e692:	e022      	b.n	800e6da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2200      	movs	r2, #0
 800e698:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	6a1b      	ldr	r3, [r3, #32]
 800e69e:	697a      	ldr	r2, [r7, #20]
 800e6a0:	1ad2      	subs	r2, r2, r3
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	699b      	ldr	r3, [r3, #24]
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	d217      	bcs.n	800e6da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	789b      	ldrb	r3, [r3, #2]
 800e6ae:	613b      	str	r3, [r7, #16]
 800e6b0:	e010      	b.n	800e6d4 <sync_window+0x78>
					wsect += fs->fsize;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	699b      	ldr	r3, [r3, #24]
 800e6b6:	697a      	ldr	r2, [r7, #20]
 800e6b8:	4413      	add	r3, r2
 800e6ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	7858      	ldrb	r0, [r3, #1]
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	697a      	ldr	r2, [r7, #20]
 800e6ca:	f7ff fd1d 	bl	800e108 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e6ce:	693b      	ldr	r3, [r7, #16]
 800e6d0:	3b01      	subs	r3, #1
 800e6d2:	613b      	str	r3, [r7, #16]
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	2b01      	cmp	r3, #1
 800e6d8:	d8eb      	bhi.n	800e6b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e6da:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6dc:	4618      	mov	r0, r3
 800e6de:	3718      	adds	r7, #24
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}

0800e6e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b084      	sub	sp, #16
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
 800e6ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6f6:	683a      	ldr	r2, [r7, #0]
 800e6f8:	429a      	cmp	r2, r3
 800e6fa:	d01b      	beq.n	800e734 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f7ff ffad 	bl	800e65c <sync_window>
 800e702:	4603      	mov	r3, r0
 800e704:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e706:	7bfb      	ldrb	r3, [r7, #15]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d113      	bne.n	800e734 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	7858      	ldrb	r0, [r3, #1]
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e716:	2301      	movs	r3, #1
 800e718:	683a      	ldr	r2, [r7, #0]
 800e71a:	f7ff fcd5 	bl	800e0c8 <disk_read>
 800e71e:	4603      	mov	r3, r0
 800e720:	2b00      	cmp	r3, #0
 800e722:	d004      	beq.n	800e72e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e724:	f04f 33ff 	mov.w	r3, #4294967295
 800e728:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e72a:	2301      	movs	r3, #1
 800e72c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	683a      	ldr	r2, [r7, #0]
 800e732:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800e734:	7bfb      	ldrb	r3, [r7, #15]
}
 800e736:	4618      	mov	r0, r3
 800e738:	3710      	adds	r7, #16
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bd80      	pop	{r7, pc}
	...

0800e740 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b084      	sub	sp, #16
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f7ff ff87 	bl	800e65c <sync_window>
 800e74e:	4603      	mov	r3, r0
 800e750:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e752:	7bfb      	ldrb	r3, [r7, #15]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d158      	bne.n	800e80a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	781b      	ldrb	r3, [r3, #0]
 800e75c:	2b03      	cmp	r3, #3
 800e75e:	d148      	bne.n	800e7f2 <sync_fs+0xb2>
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	791b      	ldrb	r3, [r3, #4]
 800e764:	2b01      	cmp	r3, #1
 800e766:	d144      	bne.n	800e7f2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	3330      	adds	r3, #48	@ 0x30
 800e76c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e770:	2100      	movs	r1, #0
 800e772:	4618      	mov	r0, r3
 800e774:	f7ff fda9 	bl	800e2ca <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	3330      	adds	r3, #48	@ 0x30
 800e77c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e780:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800e784:	4618      	mov	r0, r3
 800e786:	f7ff fd38 	bl	800e1fa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	3330      	adds	r3, #48	@ 0x30
 800e78e:	4921      	ldr	r1, [pc, #132]	@ (800e814 <sync_fs+0xd4>)
 800e790:	4618      	mov	r0, r3
 800e792:	f7ff fd4d 	bl	800e230 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	3330      	adds	r3, #48	@ 0x30
 800e79a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e79e:	491e      	ldr	r1, [pc, #120]	@ (800e818 <sync_fs+0xd8>)
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f7ff fd45 	bl	800e230 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	3330      	adds	r3, #48	@ 0x30
 800e7aa:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	691b      	ldr	r3, [r3, #16]
 800e7b2:	4619      	mov	r1, r3
 800e7b4:	4610      	mov	r0, r2
 800e7b6:	f7ff fd3b 	bl	800e230 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	3330      	adds	r3, #48	@ 0x30
 800e7be:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	68db      	ldr	r3, [r3, #12]
 800e7c6:	4619      	mov	r1, r3
 800e7c8:	4610      	mov	r0, r2
 800e7ca:	f7ff fd31 	bl	800e230 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	69db      	ldr	r3, [r3, #28]
 800e7d2:	1c5a      	adds	r2, r3, #1
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	7858      	ldrb	r0, [r3, #1]
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	f7ff fc8e 	bl	800e108 <disk_write>
			fs->fsi_flag = 0;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	785b      	ldrb	r3, [r3, #1]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	2100      	movs	r1, #0
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f7ff fca4 	bl	800e148 <disk_ioctl>
 800e800:	4603      	mov	r3, r0
 800e802:	2b00      	cmp	r3, #0
 800e804:	d001      	beq.n	800e80a <sync_fs+0xca>
 800e806:	2301      	movs	r3, #1
 800e808:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e80a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e80c:	4618      	mov	r0, r3
 800e80e:	3710      	adds	r7, #16
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}
 800e814:	41615252 	.word	0x41615252
 800e818:	61417272 	.word	0x61417272

0800e81c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e81c:	b480      	push	{r7}
 800e81e:	b083      	sub	sp, #12
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
 800e824:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e826:	683b      	ldr	r3, [r7, #0]
 800e828:	3b02      	subs	r3, #2
 800e82a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	695b      	ldr	r3, [r3, #20]
 800e830:	3b02      	subs	r3, #2
 800e832:	683a      	ldr	r2, [r7, #0]
 800e834:	429a      	cmp	r2, r3
 800e836:	d301      	bcc.n	800e83c <clust2sect+0x20>
 800e838:	2300      	movs	r3, #0
 800e83a:	e008      	b.n	800e84e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	895b      	ldrh	r3, [r3, #10]
 800e840:	461a      	mov	r2, r3
 800e842:	683b      	ldr	r3, [r7, #0]
 800e844:	fb03 f202 	mul.w	r2, r3, r2
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e84c:	4413      	add	r3, r2
}
 800e84e:	4618      	mov	r0, r3
 800e850:	370c      	adds	r7, #12
 800e852:	46bd      	mov	sp, r7
 800e854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e858:	4770      	bx	lr

0800e85a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e85a:	b580      	push	{r7, lr}
 800e85c:	b086      	sub	sp, #24
 800e85e:	af00      	add	r7, sp, #0
 800e860:	6078      	str	r0, [r7, #4]
 800e862:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	2b01      	cmp	r3, #1
 800e86e:	d904      	bls.n	800e87a <get_fat+0x20>
 800e870:	693b      	ldr	r3, [r7, #16]
 800e872:	695b      	ldr	r3, [r3, #20]
 800e874:	683a      	ldr	r2, [r7, #0]
 800e876:	429a      	cmp	r2, r3
 800e878:	d302      	bcc.n	800e880 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e87a:	2301      	movs	r3, #1
 800e87c:	617b      	str	r3, [r7, #20]
 800e87e:	e08e      	b.n	800e99e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e880:	f04f 33ff 	mov.w	r3, #4294967295
 800e884:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e886:	693b      	ldr	r3, [r7, #16]
 800e888:	781b      	ldrb	r3, [r3, #0]
 800e88a:	2b03      	cmp	r3, #3
 800e88c:	d061      	beq.n	800e952 <get_fat+0xf8>
 800e88e:	2b03      	cmp	r3, #3
 800e890:	dc7b      	bgt.n	800e98a <get_fat+0x130>
 800e892:	2b01      	cmp	r3, #1
 800e894:	d002      	beq.n	800e89c <get_fat+0x42>
 800e896:	2b02      	cmp	r3, #2
 800e898:	d041      	beq.n	800e91e <get_fat+0xc4>
 800e89a:	e076      	b.n	800e98a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	60fb      	str	r3, [r7, #12]
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	085b      	lsrs	r3, r3, #1
 800e8a4:	68fa      	ldr	r2, [r7, #12]
 800e8a6:	4413      	add	r3, r2
 800e8a8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e8aa:	693b      	ldr	r3, [r7, #16]
 800e8ac:	6a1a      	ldr	r2, [r3, #32]
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	0a5b      	lsrs	r3, r3, #9
 800e8b2:	4413      	add	r3, r2
 800e8b4:	4619      	mov	r1, r3
 800e8b6:	6938      	ldr	r0, [r7, #16]
 800e8b8:	f7ff ff14 	bl	800e6e4 <move_window>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d166      	bne.n	800e990 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	1c5a      	adds	r2, r3, #1
 800e8c6:	60fa      	str	r2, [r7, #12]
 800e8c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8cc:	693a      	ldr	r2, [r7, #16]
 800e8ce:	4413      	add	r3, r2
 800e8d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e8d4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e8d6:	693b      	ldr	r3, [r7, #16]
 800e8d8:	6a1a      	ldr	r2, [r3, #32]
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	0a5b      	lsrs	r3, r3, #9
 800e8de:	4413      	add	r3, r2
 800e8e0:	4619      	mov	r1, r3
 800e8e2:	6938      	ldr	r0, [r7, #16]
 800e8e4:	f7ff fefe 	bl	800e6e4 <move_window>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d152      	bne.n	800e994 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8f4:	693a      	ldr	r2, [r7, #16]
 800e8f6:	4413      	add	r3, r2
 800e8f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e8fc:	021b      	lsls	r3, r3, #8
 800e8fe:	68ba      	ldr	r2, [r7, #8]
 800e900:	4313      	orrs	r3, r2
 800e902:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	f003 0301 	and.w	r3, r3, #1
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d002      	beq.n	800e914 <get_fat+0xba>
 800e90e:	68bb      	ldr	r3, [r7, #8]
 800e910:	091b      	lsrs	r3, r3, #4
 800e912:	e002      	b.n	800e91a <get_fat+0xc0>
 800e914:	68bb      	ldr	r3, [r7, #8]
 800e916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e91a:	617b      	str	r3, [r7, #20]
			break;
 800e91c:	e03f      	b.n	800e99e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e91e:	693b      	ldr	r3, [r7, #16]
 800e920:	6a1a      	ldr	r2, [r3, #32]
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	0a1b      	lsrs	r3, r3, #8
 800e926:	4413      	add	r3, r2
 800e928:	4619      	mov	r1, r3
 800e92a:	6938      	ldr	r0, [r7, #16]
 800e92c:	f7ff feda 	bl	800e6e4 <move_window>
 800e930:	4603      	mov	r3, r0
 800e932:	2b00      	cmp	r3, #0
 800e934:	d130      	bne.n	800e998 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	005b      	lsls	r3, r3, #1
 800e940:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800e944:	4413      	add	r3, r2
 800e946:	4618      	mov	r0, r3
 800e948:	f7ff fc1c 	bl	800e184 <ld_word>
 800e94c:	4603      	mov	r3, r0
 800e94e:	617b      	str	r3, [r7, #20]
			break;
 800e950:	e025      	b.n	800e99e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e952:	693b      	ldr	r3, [r7, #16]
 800e954:	6a1a      	ldr	r2, [r3, #32]
 800e956:	683b      	ldr	r3, [r7, #0]
 800e958:	09db      	lsrs	r3, r3, #7
 800e95a:	4413      	add	r3, r2
 800e95c:	4619      	mov	r1, r3
 800e95e:	6938      	ldr	r0, [r7, #16]
 800e960:	f7ff fec0 	bl	800e6e4 <move_window>
 800e964:	4603      	mov	r3, r0
 800e966:	2b00      	cmp	r3, #0
 800e968:	d118      	bne.n	800e99c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e96a:	693b      	ldr	r3, [r7, #16]
 800e96c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	009b      	lsls	r3, r3, #2
 800e974:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e978:	4413      	add	r3, r2
 800e97a:	4618      	mov	r0, r3
 800e97c:	f7ff fc1a 	bl	800e1b4 <ld_dword>
 800e980:	4603      	mov	r3, r0
 800e982:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800e986:	617b      	str	r3, [r7, #20]
			break;
 800e988:	e009      	b.n	800e99e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e98a:	2301      	movs	r3, #1
 800e98c:	617b      	str	r3, [r7, #20]
 800e98e:	e006      	b.n	800e99e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e990:	bf00      	nop
 800e992:	e004      	b.n	800e99e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e994:	bf00      	nop
 800e996:	e002      	b.n	800e99e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e998:	bf00      	nop
 800e99a:	e000      	b.n	800e99e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e99c:	bf00      	nop
		}
	}

	return val;
 800e99e:	697b      	ldr	r3, [r7, #20]
}
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	3718      	adds	r7, #24
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}

0800e9a8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e9a8:	b590      	push	{r4, r7, lr}
 800e9aa:	b089      	sub	sp, #36	@ 0x24
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	60f8      	str	r0, [r7, #12]
 800e9b0:	60b9      	str	r1, [r7, #8]
 800e9b2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e9b4:	2302      	movs	r3, #2
 800e9b6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e9b8:	68bb      	ldr	r3, [r7, #8]
 800e9ba:	2b01      	cmp	r3, #1
 800e9bc:	f240 80d9 	bls.w	800eb72 <put_fat+0x1ca>
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	695b      	ldr	r3, [r3, #20]
 800e9c4:	68ba      	ldr	r2, [r7, #8]
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	f080 80d3 	bcs.w	800eb72 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	781b      	ldrb	r3, [r3, #0]
 800e9d0:	2b03      	cmp	r3, #3
 800e9d2:	f000 8096 	beq.w	800eb02 <put_fat+0x15a>
 800e9d6:	2b03      	cmp	r3, #3
 800e9d8:	f300 80cb 	bgt.w	800eb72 <put_fat+0x1ca>
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	d002      	beq.n	800e9e6 <put_fat+0x3e>
 800e9e0:	2b02      	cmp	r3, #2
 800e9e2:	d06e      	beq.n	800eac2 <put_fat+0x11a>
 800e9e4:	e0c5      	b.n	800eb72 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e9e6:	68bb      	ldr	r3, [r7, #8]
 800e9e8:	61bb      	str	r3, [r7, #24]
 800e9ea:	69bb      	ldr	r3, [r7, #24]
 800e9ec:	085b      	lsrs	r3, r3, #1
 800e9ee:	69ba      	ldr	r2, [r7, #24]
 800e9f0:	4413      	add	r3, r2
 800e9f2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	6a1a      	ldr	r2, [r3, #32]
 800e9f8:	69bb      	ldr	r3, [r7, #24]
 800e9fa:	0a5b      	lsrs	r3, r3, #9
 800e9fc:	4413      	add	r3, r2
 800e9fe:	4619      	mov	r1, r3
 800ea00:	68f8      	ldr	r0, [r7, #12]
 800ea02:	f7ff fe6f 	bl	800e6e4 <move_window>
 800ea06:	4603      	mov	r3, r0
 800ea08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ea0a:	7ffb      	ldrb	r3, [r7, #31]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	f040 80a9 	bne.w	800eb64 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ea18:	69bb      	ldr	r3, [r7, #24]
 800ea1a:	1c59      	adds	r1, r3, #1
 800ea1c:	61b9      	str	r1, [r7, #24]
 800ea1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea22:	4413      	add	r3, r2
 800ea24:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ea26:	68bb      	ldr	r3, [r7, #8]
 800ea28:	f003 0301 	and.w	r3, r3, #1
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d00d      	beq.n	800ea4c <put_fat+0xa4>
 800ea30:	697b      	ldr	r3, [r7, #20]
 800ea32:	781b      	ldrb	r3, [r3, #0]
 800ea34:	b25b      	sxtb	r3, r3
 800ea36:	f003 030f 	and.w	r3, r3, #15
 800ea3a:	b25a      	sxtb	r2, r3
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	b2db      	uxtb	r3, r3
 800ea40:	011b      	lsls	r3, r3, #4
 800ea42:	b25b      	sxtb	r3, r3
 800ea44:	4313      	orrs	r3, r2
 800ea46:	b25b      	sxtb	r3, r3
 800ea48:	b2db      	uxtb	r3, r3
 800ea4a:	e001      	b.n	800ea50 <put_fat+0xa8>
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	b2db      	uxtb	r3, r3
 800ea50:	697a      	ldr	r2, [r7, #20]
 800ea52:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	2201      	movs	r2, #1
 800ea58:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	6a1a      	ldr	r2, [r3, #32]
 800ea5e:	69bb      	ldr	r3, [r7, #24]
 800ea60:	0a5b      	lsrs	r3, r3, #9
 800ea62:	4413      	add	r3, r2
 800ea64:	4619      	mov	r1, r3
 800ea66:	68f8      	ldr	r0, [r7, #12]
 800ea68:	f7ff fe3c 	bl	800e6e4 <move_window>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ea70:	7ffb      	ldrb	r3, [r7, #31]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d178      	bne.n	800eb68 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ea7c:	69bb      	ldr	r3, [r7, #24]
 800ea7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea82:	4413      	add	r3, r2
 800ea84:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	f003 0301 	and.w	r3, r3, #1
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d003      	beq.n	800ea98 <put_fat+0xf0>
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	091b      	lsrs	r3, r3, #4
 800ea94:	b2db      	uxtb	r3, r3
 800ea96:	e00e      	b.n	800eab6 <put_fat+0x10e>
 800ea98:	697b      	ldr	r3, [r7, #20]
 800ea9a:	781b      	ldrb	r3, [r3, #0]
 800ea9c:	b25b      	sxtb	r3, r3
 800ea9e:	f023 030f 	bic.w	r3, r3, #15
 800eaa2:	b25a      	sxtb	r2, r3
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	0a1b      	lsrs	r3, r3, #8
 800eaa8:	b25b      	sxtb	r3, r3
 800eaaa:	f003 030f 	and.w	r3, r3, #15
 800eaae:	b25b      	sxtb	r3, r3
 800eab0:	4313      	orrs	r3, r2
 800eab2:	b25b      	sxtb	r3, r3
 800eab4:	b2db      	uxtb	r3, r3
 800eab6:	697a      	ldr	r2, [r7, #20]
 800eab8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	2201      	movs	r2, #1
 800eabe:	70da      	strb	r2, [r3, #3]
			break;
 800eac0:	e057      	b.n	800eb72 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	6a1a      	ldr	r2, [r3, #32]
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	0a1b      	lsrs	r3, r3, #8
 800eaca:	4413      	add	r3, r2
 800eacc:	4619      	mov	r1, r3
 800eace:	68f8      	ldr	r0, [r7, #12]
 800ead0:	f7ff fe08 	bl	800e6e4 <move_window>
 800ead4:	4603      	mov	r3, r0
 800ead6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ead8:	7ffb      	ldrb	r3, [r7, #31]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d146      	bne.n	800eb6c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800eae4:	68bb      	ldr	r3, [r7, #8]
 800eae6:	005b      	lsls	r3, r3, #1
 800eae8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800eaec:	4413      	add	r3, r2
 800eaee:	687a      	ldr	r2, [r7, #4]
 800eaf0:	b292      	uxth	r2, r2
 800eaf2:	4611      	mov	r1, r2
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	f7ff fb80 	bl	800e1fa <st_word>
			fs->wflag = 1;
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	2201      	movs	r2, #1
 800eafe:	70da      	strb	r2, [r3, #3]
			break;
 800eb00:	e037      	b.n	800eb72 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	6a1a      	ldr	r2, [r3, #32]
 800eb06:	68bb      	ldr	r3, [r7, #8]
 800eb08:	09db      	lsrs	r3, r3, #7
 800eb0a:	4413      	add	r3, r2
 800eb0c:	4619      	mov	r1, r3
 800eb0e:	68f8      	ldr	r0, [r7, #12]
 800eb10:	f7ff fde8 	bl	800e6e4 <move_window>
 800eb14:	4603      	mov	r3, r0
 800eb16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eb18:	7ffb      	ldrb	r3, [r7, #31]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d128      	bne.n	800eb70 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	009b      	lsls	r3, r3, #2
 800eb2e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800eb32:	4413      	add	r3, r2
 800eb34:	4618      	mov	r0, r3
 800eb36:	f7ff fb3d 	bl	800e1b4 <ld_dword>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800eb40:	4323      	orrs	r3, r4
 800eb42:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	009b      	lsls	r3, r3, #2
 800eb4e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800eb52:	4413      	add	r3, r2
 800eb54:	6879      	ldr	r1, [r7, #4]
 800eb56:	4618      	mov	r0, r3
 800eb58:	f7ff fb6a 	bl	800e230 <st_dword>
			fs->wflag = 1;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	2201      	movs	r2, #1
 800eb60:	70da      	strb	r2, [r3, #3]
			break;
 800eb62:	e006      	b.n	800eb72 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800eb64:	bf00      	nop
 800eb66:	e004      	b.n	800eb72 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800eb68:	bf00      	nop
 800eb6a:	e002      	b.n	800eb72 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800eb6c:	bf00      	nop
 800eb6e:	e000      	b.n	800eb72 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800eb70:	bf00      	nop
		}
	}
	return res;
 800eb72:	7ffb      	ldrb	r3, [r7, #31]
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	3724      	adds	r7, #36	@ 0x24
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd90      	pop	{r4, r7, pc}

0800eb7c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b088      	sub	sp, #32
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	60f8      	str	r0, [r7, #12]
 800eb84:	60b9      	str	r1, [r7, #8]
 800eb86:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800eb88:	2300      	movs	r3, #0
 800eb8a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	2b01      	cmp	r3, #1
 800eb96:	d904      	bls.n	800eba2 <remove_chain+0x26>
 800eb98:	69bb      	ldr	r3, [r7, #24]
 800eb9a:	695b      	ldr	r3, [r3, #20]
 800eb9c:	68ba      	ldr	r2, [r7, #8]
 800eb9e:	429a      	cmp	r2, r3
 800eba0:	d301      	bcc.n	800eba6 <remove_chain+0x2a>
 800eba2:	2302      	movs	r3, #2
 800eba4:	e04b      	b.n	800ec3e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d00c      	beq.n	800ebc6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ebac:	f04f 32ff 	mov.w	r2, #4294967295
 800ebb0:	6879      	ldr	r1, [r7, #4]
 800ebb2:	69b8      	ldr	r0, [r7, #24]
 800ebb4:	f7ff fef8 	bl	800e9a8 <put_fat>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ebbc:	7ffb      	ldrb	r3, [r7, #31]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d001      	beq.n	800ebc6 <remove_chain+0x4a>
 800ebc2:	7ffb      	ldrb	r3, [r7, #31]
 800ebc4:	e03b      	b.n	800ec3e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ebc6:	68b9      	ldr	r1, [r7, #8]
 800ebc8:	68f8      	ldr	r0, [r7, #12]
 800ebca:	f7ff fe46 	bl	800e85a <get_fat>
 800ebce:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ebd0:	697b      	ldr	r3, [r7, #20]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d031      	beq.n	800ec3a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ebd6:	697b      	ldr	r3, [r7, #20]
 800ebd8:	2b01      	cmp	r3, #1
 800ebda:	d101      	bne.n	800ebe0 <remove_chain+0x64>
 800ebdc:	2302      	movs	r3, #2
 800ebde:	e02e      	b.n	800ec3e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebe6:	d101      	bne.n	800ebec <remove_chain+0x70>
 800ebe8:	2301      	movs	r3, #1
 800ebea:	e028      	b.n	800ec3e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ebec:	2200      	movs	r2, #0
 800ebee:	68b9      	ldr	r1, [r7, #8]
 800ebf0:	69b8      	ldr	r0, [r7, #24]
 800ebf2:	f7ff fed9 	bl	800e9a8 <put_fat>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ebfa:	7ffb      	ldrb	r3, [r7, #31]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d001      	beq.n	800ec04 <remove_chain+0x88>
 800ec00:	7ffb      	ldrb	r3, [r7, #31]
 800ec02:	e01c      	b.n	800ec3e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ec04:	69bb      	ldr	r3, [r7, #24]
 800ec06:	691a      	ldr	r2, [r3, #16]
 800ec08:	69bb      	ldr	r3, [r7, #24]
 800ec0a:	695b      	ldr	r3, [r3, #20]
 800ec0c:	3b02      	subs	r3, #2
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d20b      	bcs.n	800ec2a <remove_chain+0xae>
			fs->free_clst++;
 800ec12:	69bb      	ldr	r3, [r7, #24]
 800ec14:	691b      	ldr	r3, [r3, #16]
 800ec16:	1c5a      	adds	r2, r3, #1
 800ec18:	69bb      	ldr	r3, [r7, #24]
 800ec1a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800ec1c:	69bb      	ldr	r3, [r7, #24]
 800ec1e:	791b      	ldrb	r3, [r3, #4]
 800ec20:	f043 0301 	orr.w	r3, r3, #1
 800ec24:	b2da      	uxtb	r2, r3
 800ec26:	69bb      	ldr	r3, [r7, #24]
 800ec28:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ec2e:	69bb      	ldr	r3, [r7, #24]
 800ec30:	695b      	ldr	r3, [r3, #20]
 800ec32:	68ba      	ldr	r2, [r7, #8]
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d3c6      	bcc.n	800ebc6 <remove_chain+0x4a>
 800ec38:	e000      	b.n	800ec3c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ec3a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ec3c:	2300      	movs	r3, #0
}
 800ec3e:	4618      	mov	r0, r3
 800ec40:	3720      	adds	r7, #32
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}

0800ec46 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ec46:	b580      	push	{r7, lr}
 800ec48:	b088      	sub	sp, #32
 800ec4a:	af00      	add	r7, sp, #0
 800ec4c:	6078      	str	r0, [r7, #4]
 800ec4e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d10d      	bne.n	800ec78 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	68db      	ldr	r3, [r3, #12]
 800ec60:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ec62:	69bb      	ldr	r3, [r7, #24]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d004      	beq.n	800ec72 <create_chain+0x2c>
 800ec68:	693b      	ldr	r3, [r7, #16]
 800ec6a:	695b      	ldr	r3, [r3, #20]
 800ec6c:	69ba      	ldr	r2, [r7, #24]
 800ec6e:	429a      	cmp	r2, r3
 800ec70:	d31b      	bcc.n	800ecaa <create_chain+0x64>
 800ec72:	2301      	movs	r3, #1
 800ec74:	61bb      	str	r3, [r7, #24]
 800ec76:	e018      	b.n	800ecaa <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ec78:	6839      	ldr	r1, [r7, #0]
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f7ff fded 	bl	800e85a <get_fat>
 800ec80:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	2b01      	cmp	r3, #1
 800ec86:	d801      	bhi.n	800ec8c <create_chain+0x46>
 800ec88:	2301      	movs	r3, #1
 800ec8a:	e070      	b.n	800ed6e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec92:	d101      	bne.n	800ec98 <create_chain+0x52>
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	e06a      	b.n	800ed6e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ec98:	693b      	ldr	r3, [r7, #16]
 800ec9a:	695b      	ldr	r3, [r3, #20]
 800ec9c:	68fa      	ldr	r2, [r7, #12]
 800ec9e:	429a      	cmp	r2, r3
 800eca0:	d201      	bcs.n	800eca6 <create_chain+0x60>
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	e063      	b.n	800ed6e <create_chain+0x128>
		scl = clst;
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ecaa:	69bb      	ldr	r3, [r7, #24]
 800ecac:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ecae:	69fb      	ldr	r3, [r7, #28]
 800ecb0:	3301      	adds	r3, #1
 800ecb2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ecb4:	693b      	ldr	r3, [r7, #16]
 800ecb6:	695b      	ldr	r3, [r3, #20]
 800ecb8:	69fa      	ldr	r2, [r7, #28]
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	d307      	bcc.n	800ecce <create_chain+0x88>
				ncl = 2;
 800ecbe:	2302      	movs	r3, #2
 800ecc0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ecc2:	69fa      	ldr	r2, [r7, #28]
 800ecc4:	69bb      	ldr	r3, [r7, #24]
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	d901      	bls.n	800ecce <create_chain+0x88>
 800ecca:	2300      	movs	r3, #0
 800eccc:	e04f      	b.n	800ed6e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ecce:	69f9      	ldr	r1, [r7, #28]
 800ecd0:	6878      	ldr	r0, [r7, #4]
 800ecd2:	f7ff fdc2 	bl	800e85a <get_fat>
 800ecd6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d00e      	beq.n	800ecfc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	2b01      	cmp	r3, #1
 800ece2:	d003      	beq.n	800ecec <create_chain+0xa6>
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecea:	d101      	bne.n	800ecf0 <create_chain+0xaa>
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	e03e      	b.n	800ed6e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ecf0:	69fa      	ldr	r2, [r7, #28]
 800ecf2:	69bb      	ldr	r3, [r7, #24]
 800ecf4:	429a      	cmp	r2, r3
 800ecf6:	d1da      	bne.n	800ecae <create_chain+0x68>
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	e038      	b.n	800ed6e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ecfc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ecfe:	f04f 32ff 	mov.w	r2, #4294967295
 800ed02:	69f9      	ldr	r1, [r7, #28]
 800ed04:	6938      	ldr	r0, [r7, #16]
 800ed06:	f7ff fe4f 	bl	800e9a8 <put_fat>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ed0e:	7dfb      	ldrb	r3, [r7, #23]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d109      	bne.n	800ed28 <create_chain+0xe2>
 800ed14:	683b      	ldr	r3, [r7, #0]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d006      	beq.n	800ed28 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ed1a:	69fa      	ldr	r2, [r7, #28]
 800ed1c:	6839      	ldr	r1, [r7, #0]
 800ed1e:	6938      	ldr	r0, [r7, #16]
 800ed20:	f7ff fe42 	bl	800e9a8 <put_fat>
 800ed24:	4603      	mov	r3, r0
 800ed26:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ed28:	7dfb      	ldrb	r3, [r7, #23]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d116      	bne.n	800ed5c <create_chain+0x116>
		fs->last_clst = ncl;
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	69fa      	ldr	r2, [r7, #28]
 800ed32:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	691a      	ldr	r2, [r3, #16]
 800ed38:	693b      	ldr	r3, [r7, #16]
 800ed3a:	695b      	ldr	r3, [r3, #20]
 800ed3c:	3b02      	subs	r3, #2
 800ed3e:	429a      	cmp	r2, r3
 800ed40:	d804      	bhi.n	800ed4c <create_chain+0x106>
 800ed42:	693b      	ldr	r3, [r7, #16]
 800ed44:	691b      	ldr	r3, [r3, #16]
 800ed46:	1e5a      	subs	r2, r3, #1
 800ed48:	693b      	ldr	r3, [r7, #16]
 800ed4a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	791b      	ldrb	r3, [r3, #4]
 800ed50:	f043 0301 	orr.w	r3, r3, #1
 800ed54:	b2da      	uxtb	r2, r3
 800ed56:	693b      	ldr	r3, [r7, #16]
 800ed58:	711a      	strb	r2, [r3, #4]
 800ed5a:	e007      	b.n	800ed6c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ed5c:	7dfb      	ldrb	r3, [r7, #23]
 800ed5e:	2b01      	cmp	r3, #1
 800ed60:	d102      	bne.n	800ed68 <create_chain+0x122>
 800ed62:	f04f 33ff 	mov.w	r3, #4294967295
 800ed66:	e000      	b.n	800ed6a <create_chain+0x124>
 800ed68:	2301      	movs	r3, #1
 800ed6a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ed6c:	69fb      	ldr	r3, [r7, #28]
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3720      	adds	r7, #32
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}

0800ed76 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ed76:	b480      	push	{r7}
 800ed78:	b087      	sub	sp, #28
 800ed7a:	af00      	add	r7, sp, #0
 800ed7c:	6078      	str	r0, [r7, #4]
 800ed7e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed8a:	3304      	adds	r3, #4
 800ed8c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	0a5b      	lsrs	r3, r3, #9
 800ed92:	68fa      	ldr	r2, [r7, #12]
 800ed94:	8952      	ldrh	r2, [r2, #10]
 800ed96:	fbb3 f3f2 	udiv	r3, r3, r2
 800ed9a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ed9c:	693b      	ldr	r3, [r7, #16]
 800ed9e:	1d1a      	adds	r2, r3, #4
 800eda0:	613a      	str	r2, [r7, #16]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d101      	bne.n	800edb0 <clmt_clust+0x3a>
 800edac:	2300      	movs	r3, #0
 800edae:	e010      	b.n	800edd2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800edb0:	697a      	ldr	r2, [r7, #20]
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	429a      	cmp	r2, r3
 800edb6:	d307      	bcc.n	800edc8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800edb8:	697a      	ldr	r2, [r7, #20]
 800edba:	68bb      	ldr	r3, [r7, #8]
 800edbc:	1ad3      	subs	r3, r2, r3
 800edbe:	617b      	str	r3, [r7, #20]
 800edc0:	693b      	ldr	r3, [r7, #16]
 800edc2:	3304      	adds	r3, #4
 800edc4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800edc6:	e7e9      	b.n	800ed9c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800edc8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800edca:	693b      	ldr	r3, [r7, #16]
 800edcc:	681a      	ldr	r2, [r3, #0]
 800edce:	697b      	ldr	r3, [r7, #20]
 800edd0:	4413      	add	r3, r2
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	371c      	adds	r7, #28
 800edd6:	46bd      	mov	sp, r7
 800edd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eddc:	4770      	bx	lr

0800edde <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800edde:	b580      	push	{r7, lr}
 800ede0:	b086      	sub	sp, #24
 800ede2:	af00      	add	r7, sp, #0
 800ede4:	6078      	str	r0, [r7, #4]
 800ede6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800edf4:	d204      	bcs.n	800ee00 <dir_sdi+0x22>
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	f003 031f 	and.w	r3, r3, #31
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d001      	beq.n	800ee04 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ee00:	2302      	movs	r3, #2
 800ee02:	e063      	b.n	800eecc <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	683a      	ldr	r2, [r7, #0]
 800ee08:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	689b      	ldr	r3, [r3, #8]
 800ee0e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d106      	bne.n	800ee24 <dir_sdi+0x46>
 800ee16:	693b      	ldr	r3, [r7, #16]
 800ee18:	781b      	ldrb	r3, [r3, #0]
 800ee1a:	2b02      	cmp	r3, #2
 800ee1c:	d902      	bls.n	800ee24 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ee1e:	693b      	ldr	r3, [r7, #16]
 800ee20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee22:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ee24:	697b      	ldr	r3, [r7, #20]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d10c      	bne.n	800ee44 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	095b      	lsrs	r3, r3, #5
 800ee2e:	693a      	ldr	r2, [r7, #16]
 800ee30:	8912      	ldrh	r2, [r2, #8]
 800ee32:	4293      	cmp	r3, r2
 800ee34:	d301      	bcc.n	800ee3a <dir_sdi+0x5c>
 800ee36:	2302      	movs	r3, #2
 800ee38:	e048      	b.n	800eecc <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ee3a:	693b      	ldr	r3, [r7, #16]
 800ee3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	61da      	str	r2, [r3, #28]
 800ee42:	e029      	b.n	800ee98 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ee44:	693b      	ldr	r3, [r7, #16]
 800ee46:	895b      	ldrh	r3, [r3, #10]
 800ee48:	025b      	lsls	r3, r3, #9
 800ee4a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ee4c:	e019      	b.n	800ee82 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	6979      	ldr	r1, [r7, #20]
 800ee52:	4618      	mov	r0, r3
 800ee54:	f7ff fd01 	bl	800e85a <get_fat>
 800ee58:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee60:	d101      	bne.n	800ee66 <dir_sdi+0x88>
 800ee62:	2301      	movs	r3, #1
 800ee64:	e032      	b.n	800eecc <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ee66:	697b      	ldr	r3, [r7, #20]
 800ee68:	2b01      	cmp	r3, #1
 800ee6a:	d904      	bls.n	800ee76 <dir_sdi+0x98>
 800ee6c:	693b      	ldr	r3, [r7, #16]
 800ee6e:	695b      	ldr	r3, [r3, #20]
 800ee70:	697a      	ldr	r2, [r7, #20]
 800ee72:	429a      	cmp	r2, r3
 800ee74:	d301      	bcc.n	800ee7a <dir_sdi+0x9c>
 800ee76:	2302      	movs	r3, #2
 800ee78:	e028      	b.n	800eecc <dir_sdi+0xee>
			ofs -= csz;
 800ee7a:	683a      	ldr	r2, [r7, #0]
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	1ad3      	subs	r3, r2, r3
 800ee80:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ee82:	683a      	ldr	r2, [r7, #0]
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	429a      	cmp	r2, r3
 800ee88:	d2e1      	bcs.n	800ee4e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ee8a:	6979      	ldr	r1, [r7, #20]
 800ee8c:	6938      	ldr	r0, [r7, #16]
 800ee8e:	f7ff fcc5 	bl	800e81c <clust2sect>
 800ee92:	4602      	mov	r2, r0
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	697a      	ldr	r2, [r7, #20]
 800ee9c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	69db      	ldr	r3, [r3, #28]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d101      	bne.n	800eeaa <dir_sdi+0xcc>
 800eea6:	2302      	movs	r3, #2
 800eea8:	e010      	b.n	800eecc <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	69da      	ldr	r2, [r3, #28]
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	0a5b      	lsrs	r3, r3, #9
 800eeb2:	441a      	add	r2, r3
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800eeb8:	693b      	ldr	r3, [r7, #16]
 800eeba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800eebe:	683b      	ldr	r3, [r7, #0]
 800eec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eec4:	441a      	add	r2, r3
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800eeca:	2300      	movs	r3, #0
}
 800eecc:	4618      	mov	r0, r3
 800eece:	3718      	adds	r7, #24
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd80      	pop	{r7, pc}

0800eed4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b086      	sub	sp, #24
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
 800eedc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	695b      	ldr	r3, [r3, #20]
 800eee8:	3320      	adds	r3, #32
 800eeea:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	69db      	ldr	r3, [r3, #28]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d003      	beq.n	800eefc <dir_next+0x28>
 800eef4:	68bb      	ldr	r3, [r7, #8]
 800eef6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800eefa:	d301      	bcc.n	800ef00 <dir_next+0x2c>
 800eefc:	2304      	movs	r3, #4
 800eefe:	e0aa      	b.n	800f056 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	f040 8098 	bne.w	800f03c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	69db      	ldr	r3, [r3, #28]
 800ef10:	1c5a      	adds	r2, r3, #1
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	699b      	ldr	r3, [r3, #24]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d10b      	bne.n	800ef36 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ef1e:	68bb      	ldr	r3, [r7, #8]
 800ef20:	095b      	lsrs	r3, r3, #5
 800ef22:	68fa      	ldr	r2, [r7, #12]
 800ef24:	8912      	ldrh	r2, [r2, #8]
 800ef26:	4293      	cmp	r3, r2
 800ef28:	f0c0 8088 	bcc.w	800f03c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2200      	movs	r2, #0
 800ef30:	61da      	str	r2, [r3, #28]
 800ef32:	2304      	movs	r3, #4
 800ef34:	e08f      	b.n	800f056 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	0a5b      	lsrs	r3, r3, #9
 800ef3a:	68fa      	ldr	r2, [r7, #12]
 800ef3c:	8952      	ldrh	r2, [r2, #10]
 800ef3e:	3a01      	subs	r2, #1
 800ef40:	4013      	ands	r3, r2
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d17a      	bne.n	800f03c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ef46:	687a      	ldr	r2, [r7, #4]
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	699b      	ldr	r3, [r3, #24]
 800ef4c:	4619      	mov	r1, r3
 800ef4e:	4610      	mov	r0, r2
 800ef50:	f7ff fc83 	bl	800e85a <get_fat>
 800ef54:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	2b01      	cmp	r3, #1
 800ef5a:	d801      	bhi.n	800ef60 <dir_next+0x8c>
 800ef5c:	2302      	movs	r3, #2
 800ef5e:	e07a      	b.n	800f056 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ef60:	697b      	ldr	r3, [r7, #20]
 800ef62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef66:	d101      	bne.n	800ef6c <dir_next+0x98>
 800ef68:	2301      	movs	r3, #1
 800ef6a:	e074      	b.n	800f056 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	695b      	ldr	r3, [r3, #20]
 800ef70:	697a      	ldr	r2, [r7, #20]
 800ef72:	429a      	cmp	r2, r3
 800ef74:	d358      	bcc.n	800f028 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d104      	bne.n	800ef86 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2200      	movs	r2, #0
 800ef80:	61da      	str	r2, [r3, #28]
 800ef82:	2304      	movs	r3, #4
 800ef84:	e067      	b.n	800f056 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ef86:	687a      	ldr	r2, [r7, #4]
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	699b      	ldr	r3, [r3, #24]
 800ef8c:	4619      	mov	r1, r3
 800ef8e:	4610      	mov	r0, r2
 800ef90:	f7ff fe59 	bl	800ec46 <create_chain>
 800ef94:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d101      	bne.n	800efa0 <dir_next+0xcc>
 800ef9c:	2307      	movs	r3, #7
 800ef9e:	e05a      	b.n	800f056 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800efa0:	697b      	ldr	r3, [r7, #20]
 800efa2:	2b01      	cmp	r3, #1
 800efa4:	d101      	bne.n	800efaa <dir_next+0xd6>
 800efa6:	2302      	movs	r3, #2
 800efa8:	e055      	b.n	800f056 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800efaa:	697b      	ldr	r3, [r7, #20]
 800efac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efb0:	d101      	bne.n	800efb6 <dir_next+0xe2>
 800efb2:	2301      	movs	r3, #1
 800efb4:	e04f      	b.n	800f056 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800efb6:	68f8      	ldr	r0, [r7, #12]
 800efb8:	f7ff fb50 	bl	800e65c <sync_window>
 800efbc:	4603      	mov	r3, r0
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d001      	beq.n	800efc6 <dir_next+0xf2>
 800efc2:	2301      	movs	r3, #1
 800efc4:	e047      	b.n	800f056 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	3330      	adds	r3, #48	@ 0x30
 800efca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800efce:	2100      	movs	r1, #0
 800efd0:	4618      	mov	r0, r3
 800efd2:	f7ff f97a 	bl	800e2ca <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800efd6:	2300      	movs	r3, #0
 800efd8:	613b      	str	r3, [r7, #16]
 800efda:	6979      	ldr	r1, [r7, #20]
 800efdc:	68f8      	ldr	r0, [r7, #12]
 800efde:	f7ff fc1d 	bl	800e81c <clust2sect>
 800efe2:	4602      	mov	r2, r0
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800efe8:	e012      	b.n	800f010 <dir_next+0x13c>
						fs->wflag = 1;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	2201      	movs	r2, #1
 800efee:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800eff0:	68f8      	ldr	r0, [r7, #12]
 800eff2:	f7ff fb33 	bl	800e65c <sync_window>
 800eff6:	4603      	mov	r3, r0
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d001      	beq.n	800f000 <dir_next+0x12c>
 800effc:	2301      	movs	r3, #1
 800effe:	e02a      	b.n	800f056 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f000:	693b      	ldr	r3, [r7, #16]
 800f002:	3301      	adds	r3, #1
 800f004:	613b      	str	r3, [r7, #16]
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f00a:	1c5a      	adds	r2, r3, #1
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	895b      	ldrh	r3, [r3, #10]
 800f014:	461a      	mov	r2, r3
 800f016:	693b      	ldr	r3, [r7, #16]
 800f018:	4293      	cmp	r3, r2
 800f01a:	d3e6      	bcc.n	800efea <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f020:	693b      	ldr	r3, [r7, #16]
 800f022:	1ad2      	subs	r2, r2, r3
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	697a      	ldr	r2, [r7, #20]
 800f02c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f02e:	6979      	ldr	r1, [r7, #20]
 800f030:	68f8      	ldr	r0, [r7, #12]
 800f032:	f7ff fbf3 	bl	800e81c <clust2sect>
 800f036:	4602      	mov	r2, r0
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	68ba      	ldr	r2, [r7, #8]
 800f040:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f048:	68bb      	ldr	r3, [r7, #8]
 800f04a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f04e:	441a      	add	r2, r3
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f054:	2300      	movs	r3, #0
}
 800f056:	4618      	mov	r0, r3
 800f058:	3718      	adds	r7, #24
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}

0800f05e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f05e:	b580      	push	{r7, lr}
 800f060:	b086      	sub	sp, #24
 800f062:	af00      	add	r7, sp, #0
 800f064:	6078      	str	r0, [r7, #4]
 800f066:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f06e:	2100      	movs	r1, #0
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	f7ff feb4 	bl	800edde <dir_sdi>
 800f076:	4603      	mov	r3, r0
 800f078:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f07a:	7dfb      	ldrb	r3, [r7, #23]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d12b      	bne.n	800f0d8 <dir_alloc+0x7a>
		n = 0;
 800f080:	2300      	movs	r3, #0
 800f082:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	69db      	ldr	r3, [r3, #28]
 800f088:	4619      	mov	r1, r3
 800f08a:	68f8      	ldr	r0, [r7, #12]
 800f08c:	f7ff fb2a 	bl	800e6e4 <move_window>
 800f090:	4603      	mov	r3, r0
 800f092:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f094:	7dfb      	ldrb	r3, [r7, #23]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d11d      	bne.n	800f0d6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	6a1b      	ldr	r3, [r3, #32]
 800f09e:	781b      	ldrb	r3, [r3, #0]
 800f0a0:	2be5      	cmp	r3, #229	@ 0xe5
 800f0a2:	d004      	beq.n	800f0ae <dir_alloc+0x50>
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	6a1b      	ldr	r3, [r3, #32]
 800f0a8:	781b      	ldrb	r3, [r3, #0]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d107      	bne.n	800f0be <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f0ae:	693b      	ldr	r3, [r7, #16]
 800f0b0:	3301      	adds	r3, #1
 800f0b2:	613b      	str	r3, [r7, #16]
 800f0b4:	693a      	ldr	r2, [r7, #16]
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	429a      	cmp	r2, r3
 800f0ba:	d102      	bne.n	800f0c2 <dir_alloc+0x64>
 800f0bc:	e00c      	b.n	800f0d8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f0be:	2300      	movs	r3, #0
 800f0c0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f0c2:	2101      	movs	r1, #1
 800f0c4:	6878      	ldr	r0, [r7, #4]
 800f0c6:	f7ff ff05 	bl	800eed4 <dir_next>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f0ce:	7dfb      	ldrb	r3, [r7, #23]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d0d7      	beq.n	800f084 <dir_alloc+0x26>
 800f0d4:	e000      	b.n	800f0d8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f0d6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f0d8:	7dfb      	ldrb	r3, [r7, #23]
 800f0da:	2b04      	cmp	r3, #4
 800f0dc:	d101      	bne.n	800f0e2 <dir_alloc+0x84>
 800f0de:	2307      	movs	r3, #7
 800f0e0:	75fb      	strb	r3, [r7, #23]
	return res;
 800f0e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	3718      	adds	r7, #24
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}

0800f0ec <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b084      	sub	sp, #16
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	331a      	adds	r3, #26
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f7ff f842 	bl	800e184 <ld_word>
 800f100:	4603      	mov	r3, r0
 800f102:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	781b      	ldrb	r3, [r3, #0]
 800f108:	2b03      	cmp	r3, #3
 800f10a:	d109      	bne.n	800f120 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	3314      	adds	r3, #20
 800f110:	4618      	mov	r0, r3
 800f112:	f7ff f837 	bl	800e184 <ld_word>
 800f116:	4603      	mov	r3, r0
 800f118:	041b      	lsls	r3, r3, #16
 800f11a:	68fa      	ldr	r2, [r7, #12]
 800f11c:	4313      	orrs	r3, r2
 800f11e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f120:	68fb      	ldr	r3, [r7, #12]
}
 800f122:	4618      	mov	r0, r3
 800f124:	3710      	adds	r7, #16
 800f126:	46bd      	mov	sp, r7
 800f128:	bd80      	pop	{r7, pc}

0800f12a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f12a:	b580      	push	{r7, lr}
 800f12c:	b084      	sub	sp, #16
 800f12e:	af00      	add	r7, sp, #0
 800f130:	60f8      	str	r0, [r7, #12]
 800f132:	60b9      	str	r1, [r7, #8]
 800f134:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f136:	68bb      	ldr	r3, [r7, #8]
 800f138:	331a      	adds	r3, #26
 800f13a:	687a      	ldr	r2, [r7, #4]
 800f13c:	b292      	uxth	r2, r2
 800f13e:	4611      	mov	r1, r2
 800f140:	4618      	mov	r0, r3
 800f142:	f7ff f85a 	bl	800e1fa <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	781b      	ldrb	r3, [r3, #0]
 800f14a:	2b03      	cmp	r3, #3
 800f14c:	d109      	bne.n	800f162 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f14e:	68bb      	ldr	r3, [r7, #8]
 800f150:	f103 0214 	add.w	r2, r3, #20
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	0c1b      	lsrs	r3, r3, #16
 800f158:	b29b      	uxth	r3, r3
 800f15a:	4619      	mov	r1, r3
 800f15c:	4610      	mov	r0, r2
 800f15e:	f7ff f84c 	bl	800e1fa <st_word>
	}
}
 800f162:	bf00      	nop
 800f164:	3710      	adds	r7, #16
 800f166:	46bd      	mov	sp, r7
 800f168:	bd80      	pop	{r7, pc}

0800f16a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f16a:	b580      	push	{r7, lr}
 800f16c:	b086      	sub	sp, #24
 800f16e:	af00      	add	r7, sp, #0
 800f170:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f178:	2100      	movs	r1, #0
 800f17a:	6878      	ldr	r0, [r7, #4]
 800f17c:	f7ff fe2f 	bl	800edde <dir_sdi>
 800f180:	4603      	mov	r3, r0
 800f182:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f184:	7dfb      	ldrb	r3, [r7, #23]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d001      	beq.n	800f18e <dir_find+0x24>
 800f18a:	7dfb      	ldrb	r3, [r7, #23]
 800f18c:	e03e      	b.n	800f20c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	69db      	ldr	r3, [r3, #28]
 800f192:	4619      	mov	r1, r3
 800f194:	6938      	ldr	r0, [r7, #16]
 800f196:	f7ff faa5 	bl	800e6e4 <move_window>
 800f19a:	4603      	mov	r3, r0
 800f19c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f19e:	7dfb      	ldrb	r3, [r7, #23]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d12f      	bne.n	800f204 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	6a1b      	ldr	r3, [r3, #32]
 800f1a8:	781b      	ldrb	r3, [r3, #0]
 800f1aa:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f1ac:	7bfb      	ldrb	r3, [r7, #15]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d102      	bne.n	800f1b8 <dir_find+0x4e>
 800f1b2:	2304      	movs	r3, #4
 800f1b4:	75fb      	strb	r3, [r7, #23]
 800f1b6:	e028      	b.n	800f20a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	6a1b      	ldr	r3, [r3, #32]
 800f1bc:	330b      	adds	r3, #11
 800f1be:	781b      	ldrb	r3, [r3, #0]
 800f1c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f1c4:	b2da      	uxtb	r2, r3
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	6a1b      	ldr	r3, [r3, #32]
 800f1ce:	330b      	adds	r3, #11
 800f1d0:	781b      	ldrb	r3, [r3, #0]
 800f1d2:	f003 0308 	and.w	r3, r3, #8
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d10a      	bne.n	800f1f0 <dir_find+0x86>
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	6a18      	ldr	r0, [r3, #32]
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	3324      	adds	r3, #36	@ 0x24
 800f1e2:	220b      	movs	r2, #11
 800f1e4:	4619      	mov	r1, r3
 800f1e6:	f7ff f88b 	bl	800e300 <mem_cmp>
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d00b      	beq.n	800f208 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f1f0:	2100      	movs	r1, #0
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	f7ff fe6e 	bl	800eed4 <dir_next>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f1fc:	7dfb      	ldrb	r3, [r7, #23]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d0c5      	beq.n	800f18e <dir_find+0x24>
 800f202:	e002      	b.n	800f20a <dir_find+0xa0>
		if (res != FR_OK) break;
 800f204:	bf00      	nop
 800f206:	e000      	b.n	800f20a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f208:	bf00      	nop

	return res;
 800f20a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	3718      	adds	r7, #24
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}

0800f214 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b084      	sub	sp, #16
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f222:	2101      	movs	r1, #1
 800f224:	6878      	ldr	r0, [r7, #4]
 800f226:	f7ff ff1a 	bl	800f05e <dir_alloc>
 800f22a:	4603      	mov	r3, r0
 800f22c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f22e:	7bfb      	ldrb	r3, [r7, #15]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d11c      	bne.n	800f26e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	69db      	ldr	r3, [r3, #28]
 800f238:	4619      	mov	r1, r3
 800f23a:	68b8      	ldr	r0, [r7, #8]
 800f23c:	f7ff fa52 	bl	800e6e4 <move_window>
 800f240:	4603      	mov	r3, r0
 800f242:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f244:	7bfb      	ldrb	r3, [r7, #15]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d111      	bne.n	800f26e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	6a1b      	ldr	r3, [r3, #32]
 800f24e:	2220      	movs	r2, #32
 800f250:	2100      	movs	r1, #0
 800f252:	4618      	mov	r0, r3
 800f254:	f7ff f839 	bl	800e2ca <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	6a18      	ldr	r0, [r3, #32]
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	3324      	adds	r3, #36	@ 0x24
 800f260:	220b      	movs	r2, #11
 800f262:	4619      	mov	r1, r3
 800f264:	f7ff f810 	bl	800e288 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	2201      	movs	r2, #1
 800f26c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f26e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f270:	4618      	mov	r0, r3
 800f272:	3710      	adds	r7, #16
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}

0800f278 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b088      	sub	sp, #32
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
 800f280:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	60fb      	str	r3, [r7, #12]
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	3324      	adds	r3, #36	@ 0x24
 800f28c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f28e:	220b      	movs	r2, #11
 800f290:	2120      	movs	r1, #32
 800f292:	68b8      	ldr	r0, [r7, #8]
 800f294:	f7ff f819 	bl	800e2ca <mem_set>
	si = i = 0; ni = 8;
 800f298:	2300      	movs	r3, #0
 800f29a:	613b      	str	r3, [r7, #16]
 800f29c:	693b      	ldr	r3, [r7, #16]
 800f29e:	61fb      	str	r3, [r7, #28]
 800f2a0:	2308      	movs	r3, #8
 800f2a2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f2a4:	69fb      	ldr	r3, [r7, #28]
 800f2a6:	1c5a      	adds	r2, r3, #1
 800f2a8:	61fa      	str	r2, [r7, #28]
 800f2aa:	68fa      	ldr	r2, [r7, #12]
 800f2ac:	4413      	add	r3, r2
 800f2ae:	781b      	ldrb	r3, [r3, #0]
 800f2b0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f2b2:	7efb      	ldrb	r3, [r7, #27]
 800f2b4:	2b20      	cmp	r3, #32
 800f2b6:	d94e      	bls.n	800f356 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f2b8:	7efb      	ldrb	r3, [r7, #27]
 800f2ba:	2b2f      	cmp	r3, #47	@ 0x2f
 800f2bc:	d006      	beq.n	800f2cc <create_name+0x54>
 800f2be:	7efb      	ldrb	r3, [r7, #27]
 800f2c0:	2b5c      	cmp	r3, #92	@ 0x5c
 800f2c2:	d110      	bne.n	800f2e6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f2c4:	e002      	b.n	800f2cc <create_name+0x54>
 800f2c6:	69fb      	ldr	r3, [r7, #28]
 800f2c8:	3301      	adds	r3, #1
 800f2ca:	61fb      	str	r3, [r7, #28]
 800f2cc:	68fa      	ldr	r2, [r7, #12]
 800f2ce:	69fb      	ldr	r3, [r7, #28]
 800f2d0:	4413      	add	r3, r2
 800f2d2:	781b      	ldrb	r3, [r3, #0]
 800f2d4:	2b2f      	cmp	r3, #47	@ 0x2f
 800f2d6:	d0f6      	beq.n	800f2c6 <create_name+0x4e>
 800f2d8:	68fa      	ldr	r2, [r7, #12]
 800f2da:	69fb      	ldr	r3, [r7, #28]
 800f2dc:	4413      	add	r3, r2
 800f2de:	781b      	ldrb	r3, [r3, #0]
 800f2e0:	2b5c      	cmp	r3, #92	@ 0x5c
 800f2e2:	d0f0      	beq.n	800f2c6 <create_name+0x4e>
			break;
 800f2e4:	e038      	b.n	800f358 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f2e6:	7efb      	ldrb	r3, [r7, #27]
 800f2e8:	2b2e      	cmp	r3, #46	@ 0x2e
 800f2ea:	d003      	beq.n	800f2f4 <create_name+0x7c>
 800f2ec:	693a      	ldr	r2, [r7, #16]
 800f2ee:	697b      	ldr	r3, [r7, #20]
 800f2f0:	429a      	cmp	r2, r3
 800f2f2:	d30c      	bcc.n	800f30e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f2f4:	697b      	ldr	r3, [r7, #20]
 800f2f6:	2b0b      	cmp	r3, #11
 800f2f8:	d002      	beq.n	800f300 <create_name+0x88>
 800f2fa:	7efb      	ldrb	r3, [r7, #27]
 800f2fc:	2b2e      	cmp	r3, #46	@ 0x2e
 800f2fe:	d001      	beq.n	800f304 <create_name+0x8c>
 800f300:	2306      	movs	r3, #6
 800f302:	e044      	b.n	800f38e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800f304:	2308      	movs	r3, #8
 800f306:	613b      	str	r3, [r7, #16]
 800f308:	230b      	movs	r3, #11
 800f30a:	617b      	str	r3, [r7, #20]
			continue;
 800f30c:	e022      	b.n	800f354 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f30e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f312:	2b00      	cmp	r3, #0
 800f314:	da04      	bge.n	800f320 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f316:	7efb      	ldrb	r3, [r7, #27]
 800f318:	3b80      	subs	r3, #128	@ 0x80
 800f31a:	4a1f      	ldr	r2, [pc, #124]	@ (800f398 <create_name+0x120>)
 800f31c:	5cd3      	ldrb	r3, [r2, r3]
 800f31e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f320:	7efb      	ldrb	r3, [r7, #27]
 800f322:	4619      	mov	r1, r3
 800f324:	481d      	ldr	r0, [pc, #116]	@ (800f39c <create_name+0x124>)
 800f326:	f7ff f812 	bl	800e34e <chk_chr>
 800f32a:	4603      	mov	r3, r0
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d001      	beq.n	800f334 <create_name+0xbc>
 800f330:	2306      	movs	r3, #6
 800f332:	e02c      	b.n	800f38e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f334:	7efb      	ldrb	r3, [r7, #27]
 800f336:	2b60      	cmp	r3, #96	@ 0x60
 800f338:	d905      	bls.n	800f346 <create_name+0xce>
 800f33a:	7efb      	ldrb	r3, [r7, #27]
 800f33c:	2b7a      	cmp	r3, #122	@ 0x7a
 800f33e:	d802      	bhi.n	800f346 <create_name+0xce>
 800f340:	7efb      	ldrb	r3, [r7, #27]
 800f342:	3b20      	subs	r3, #32
 800f344:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800f346:	693b      	ldr	r3, [r7, #16]
 800f348:	1c5a      	adds	r2, r3, #1
 800f34a:	613a      	str	r2, [r7, #16]
 800f34c:	68ba      	ldr	r2, [r7, #8]
 800f34e:	4413      	add	r3, r2
 800f350:	7efa      	ldrb	r2, [r7, #27]
 800f352:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f354:	e7a6      	b.n	800f2a4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f356:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f358:	68fa      	ldr	r2, [r7, #12]
 800f35a:	69fb      	ldr	r3, [r7, #28]
 800f35c:	441a      	add	r2, r3
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f362:	693b      	ldr	r3, [r7, #16]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d101      	bne.n	800f36c <create_name+0xf4>
 800f368:	2306      	movs	r3, #6
 800f36a:	e010      	b.n	800f38e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f36c:	68bb      	ldr	r3, [r7, #8]
 800f36e:	781b      	ldrb	r3, [r3, #0]
 800f370:	2be5      	cmp	r3, #229	@ 0xe5
 800f372:	d102      	bne.n	800f37a <create_name+0x102>
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	2205      	movs	r2, #5
 800f378:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f37a:	7efb      	ldrb	r3, [r7, #27]
 800f37c:	2b20      	cmp	r3, #32
 800f37e:	d801      	bhi.n	800f384 <create_name+0x10c>
 800f380:	2204      	movs	r2, #4
 800f382:	e000      	b.n	800f386 <create_name+0x10e>
 800f384:	2200      	movs	r2, #0
 800f386:	68bb      	ldr	r3, [r7, #8]
 800f388:	330b      	adds	r3, #11
 800f38a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f38c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f38e:	4618      	mov	r0, r3
 800f390:	3720      	adds	r7, #32
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}
 800f396:	bf00      	nop
 800f398:	0801191c 	.word	0x0801191c
 800f39c:	08011844 	.word	0x08011844

0800f3a0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b086      	sub	sp, #24
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
 800f3a8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f3ae:	693b      	ldr	r3, [r7, #16]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f3b4:	e002      	b.n	800f3bc <follow_path+0x1c>
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	3301      	adds	r3, #1
 800f3ba:	603b      	str	r3, [r7, #0]
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	781b      	ldrb	r3, [r3, #0]
 800f3c0:	2b2f      	cmp	r3, #47	@ 0x2f
 800f3c2:	d0f8      	beq.n	800f3b6 <follow_path+0x16>
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	781b      	ldrb	r3, [r3, #0]
 800f3c8:	2b5c      	cmp	r3, #92	@ 0x5c
 800f3ca:	d0f4      	beq.n	800f3b6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f3cc:	693b      	ldr	r3, [r7, #16]
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	781b      	ldrb	r3, [r3, #0]
 800f3d6:	2b1f      	cmp	r3, #31
 800f3d8:	d80a      	bhi.n	800f3f0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2280      	movs	r2, #128	@ 0x80
 800f3de:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800f3e2:	2100      	movs	r1, #0
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f7ff fcfa 	bl	800edde <dir_sdi>
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	75fb      	strb	r3, [r7, #23]
 800f3ee:	e043      	b.n	800f478 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f3f0:	463b      	mov	r3, r7
 800f3f2:	4619      	mov	r1, r3
 800f3f4:	6878      	ldr	r0, [r7, #4]
 800f3f6:	f7ff ff3f 	bl	800f278 <create_name>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f3fe:	7dfb      	ldrb	r3, [r7, #23]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d134      	bne.n	800f46e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f7ff feb0 	bl	800f16a <dir_find>
 800f40a:	4603      	mov	r3, r0
 800f40c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f414:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f416:	7dfb      	ldrb	r3, [r7, #23]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d00a      	beq.n	800f432 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f41c:	7dfb      	ldrb	r3, [r7, #23]
 800f41e:	2b04      	cmp	r3, #4
 800f420:	d127      	bne.n	800f472 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f422:	7afb      	ldrb	r3, [r7, #11]
 800f424:	f003 0304 	and.w	r3, r3, #4
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d122      	bne.n	800f472 <follow_path+0xd2>
 800f42c:	2305      	movs	r3, #5
 800f42e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f430:	e01f      	b.n	800f472 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f432:	7afb      	ldrb	r3, [r7, #11]
 800f434:	f003 0304 	and.w	r3, r3, #4
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d11c      	bne.n	800f476 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f43c:	693b      	ldr	r3, [r7, #16]
 800f43e:	799b      	ldrb	r3, [r3, #6]
 800f440:	f003 0310 	and.w	r3, r3, #16
 800f444:	2b00      	cmp	r3, #0
 800f446:	d102      	bne.n	800f44e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f448:	2305      	movs	r3, #5
 800f44a:	75fb      	strb	r3, [r7, #23]
 800f44c:	e014      	b.n	800f478 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	695b      	ldr	r3, [r3, #20]
 800f458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f45c:	4413      	add	r3, r2
 800f45e:	4619      	mov	r1, r3
 800f460:	68f8      	ldr	r0, [r7, #12]
 800f462:	f7ff fe43 	bl	800f0ec <ld_clust>
 800f466:	4602      	mov	r2, r0
 800f468:	693b      	ldr	r3, [r7, #16]
 800f46a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f46c:	e7c0      	b.n	800f3f0 <follow_path+0x50>
			if (res != FR_OK) break;
 800f46e:	bf00      	nop
 800f470:	e002      	b.n	800f478 <follow_path+0xd8>
				break;
 800f472:	bf00      	nop
 800f474:	e000      	b.n	800f478 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f476:	bf00      	nop
			}
		}
	}

	return res;
 800f478:	7dfb      	ldrb	r3, [r7, #23]
}
 800f47a:	4618      	mov	r0, r3
 800f47c:	3718      	adds	r7, #24
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}

0800f482 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f482:	b480      	push	{r7}
 800f484:	b087      	sub	sp, #28
 800f486:	af00      	add	r7, sp, #0
 800f488:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f48a:	f04f 33ff 	mov.w	r3, #4294967295
 800f48e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d031      	beq.n	800f4fc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	617b      	str	r3, [r7, #20]
 800f49e:	e002      	b.n	800f4a6 <get_ldnumber+0x24>
 800f4a0:	697b      	ldr	r3, [r7, #20]
 800f4a2:	3301      	adds	r3, #1
 800f4a4:	617b      	str	r3, [r7, #20]
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	781b      	ldrb	r3, [r3, #0]
 800f4aa:	2b20      	cmp	r3, #32
 800f4ac:	d903      	bls.n	800f4b6 <get_ldnumber+0x34>
 800f4ae:	697b      	ldr	r3, [r7, #20]
 800f4b0:	781b      	ldrb	r3, [r3, #0]
 800f4b2:	2b3a      	cmp	r3, #58	@ 0x3a
 800f4b4:	d1f4      	bne.n	800f4a0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f4b6:	697b      	ldr	r3, [r7, #20]
 800f4b8:	781b      	ldrb	r3, [r3, #0]
 800f4ba:	2b3a      	cmp	r3, #58	@ 0x3a
 800f4bc:	d11c      	bne.n	800f4f8 <get_ldnumber+0x76>
			tp = *path;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	1c5a      	adds	r2, r3, #1
 800f4c8:	60fa      	str	r2, [r7, #12]
 800f4ca:	781b      	ldrb	r3, [r3, #0]
 800f4cc:	3b30      	subs	r3, #48	@ 0x30
 800f4ce:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	2b09      	cmp	r3, #9
 800f4d4:	d80e      	bhi.n	800f4f4 <get_ldnumber+0x72>
 800f4d6:	68fa      	ldr	r2, [r7, #12]
 800f4d8:	697b      	ldr	r3, [r7, #20]
 800f4da:	429a      	cmp	r2, r3
 800f4dc:	d10a      	bne.n	800f4f4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f4de:	68bb      	ldr	r3, [r7, #8]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d107      	bne.n	800f4f4 <get_ldnumber+0x72>
					vol = (int)i;
 800f4e4:	68bb      	ldr	r3, [r7, #8]
 800f4e6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	3301      	adds	r3, #1
 800f4ec:	617b      	str	r3, [r7, #20]
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	697a      	ldr	r2, [r7, #20]
 800f4f2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f4f4:	693b      	ldr	r3, [r7, #16]
 800f4f6:	e002      	b.n	800f4fe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f4fc:	693b      	ldr	r3, [r7, #16]
}
 800f4fe:	4618      	mov	r0, r3
 800f500:	371c      	adds	r7, #28
 800f502:	46bd      	mov	sp, r7
 800f504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f508:	4770      	bx	lr
	...

0800f50c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b082      	sub	sp, #8
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
 800f514:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	2200      	movs	r2, #0
 800f51a:	70da      	strb	r2, [r3, #3]
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	f04f 32ff 	mov.w	r2, #4294967295
 800f522:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f524:	6839      	ldr	r1, [r7, #0]
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	f7ff f8dc 	bl	800e6e4 <move_window>
 800f52c:	4603      	mov	r3, r0
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d001      	beq.n	800f536 <check_fs+0x2a>
 800f532:	2304      	movs	r3, #4
 800f534:	e038      	b.n	800f5a8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	3330      	adds	r3, #48	@ 0x30
 800f53a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f53e:	4618      	mov	r0, r3
 800f540:	f7fe fe20 	bl	800e184 <ld_word>
 800f544:	4603      	mov	r3, r0
 800f546:	461a      	mov	r2, r3
 800f548:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f54c:	429a      	cmp	r2, r3
 800f54e:	d001      	beq.n	800f554 <check_fs+0x48>
 800f550:	2303      	movs	r3, #3
 800f552:	e029      	b.n	800f5a8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f55a:	2be9      	cmp	r3, #233	@ 0xe9
 800f55c:	d009      	beq.n	800f572 <check_fs+0x66>
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f564:	2beb      	cmp	r3, #235	@ 0xeb
 800f566:	d11e      	bne.n	800f5a6 <check_fs+0x9a>
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800f56e:	2b90      	cmp	r3, #144	@ 0x90
 800f570:	d119      	bne.n	800f5a6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	3330      	adds	r3, #48	@ 0x30
 800f576:	3336      	adds	r3, #54	@ 0x36
 800f578:	4618      	mov	r0, r3
 800f57a:	f7fe fe1b 	bl	800e1b4 <ld_dword>
 800f57e:	4603      	mov	r3, r0
 800f580:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f584:	4a0a      	ldr	r2, [pc, #40]	@ (800f5b0 <check_fs+0xa4>)
 800f586:	4293      	cmp	r3, r2
 800f588:	d101      	bne.n	800f58e <check_fs+0x82>
 800f58a:	2300      	movs	r3, #0
 800f58c:	e00c      	b.n	800f5a8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	3330      	adds	r3, #48	@ 0x30
 800f592:	3352      	adds	r3, #82	@ 0x52
 800f594:	4618      	mov	r0, r3
 800f596:	f7fe fe0d 	bl	800e1b4 <ld_dword>
 800f59a:	4603      	mov	r3, r0
 800f59c:	4a05      	ldr	r2, [pc, #20]	@ (800f5b4 <check_fs+0xa8>)
 800f59e:	4293      	cmp	r3, r2
 800f5a0:	d101      	bne.n	800f5a6 <check_fs+0x9a>
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	e000      	b.n	800f5a8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f5a6:	2302      	movs	r3, #2
}
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	3708      	adds	r7, #8
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bd80      	pop	{r7, pc}
 800f5b0:	00544146 	.word	0x00544146
 800f5b4:	33544146 	.word	0x33544146

0800f5b8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b096      	sub	sp, #88	@ 0x58
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	60f8      	str	r0, [r7, #12]
 800f5c0:	60b9      	str	r1, [r7, #8]
 800f5c2:	4613      	mov	r3, r2
 800f5c4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f5c6:	68bb      	ldr	r3, [r7, #8]
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f5cc:	68f8      	ldr	r0, [r7, #12]
 800f5ce:	f7ff ff58 	bl	800f482 <get_ldnumber>
 800f5d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f5d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	da01      	bge.n	800f5de <find_volume+0x26>
 800f5da:	230b      	movs	r3, #11
 800f5dc:	e22d      	b.n	800fa3a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f5de:	4aa1      	ldr	r2, [pc, #644]	@ (800f864 <find_volume+0x2ac>)
 800f5e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5e6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f5e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d101      	bne.n	800f5f2 <find_volume+0x3a>
 800f5ee:	230c      	movs	r3, #12
 800f5f0:	e223      	b.n	800fa3a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f5f2:	68bb      	ldr	r3, [r7, #8]
 800f5f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f5f6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f5f8:	79fb      	ldrb	r3, [r7, #7]
 800f5fa:	f023 0301 	bic.w	r3, r3, #1
 800f5fe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f602:	781b      	ldrb	r3, [r3, #0]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d01a      	beq.n	800f63e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f60a:	785b      	ldrb	r3, [r3, #1]
 800f60c:	4618      	mov	r0, r3
 800f60e:	f7fe fd19 	bl	800e044 <disk_status>
 800f612:	4603      	mov	r3, r0
 800f614:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f618:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f61c:	f003 0301 	and.w	r3, r3, #1
 800f620:	2b00      	cmp	r3, #0
 800f622:	d10c      	bne.n	800f63e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f624:	79fb      	ldrb	r3, [r7, #7]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d007      	beq.n	800f63a <find_volume+0x82>
 800f62a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f62e:	f003 0304 	and.w	r3, r3, #4
 800f632:	2b00      	cmp	r3, #0
 800f634:	d001      	beq.n	800f63a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f636:	230a      	movs	r3, #10
 800f638:	e1ff      	b.n	800fa3a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800f63a:	2300      	movs	r3, #0
 800f63c:	e1fd      	b.n	800fa3a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f640:	2200      	movs	r2, #0
 800f642:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f646:	b2da      	uxtb	r2, r3
 800f648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f64a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f64e:	785b      	ldrb	r3, [r3, #1]
 800f650:	4618      	mov	r0, r3
 800f652:	f7fe fd11 	bl	800e078 <disk_initialize>
 800f656:	4603      	mov	r3, r0
 800f658:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f65c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f660:	f003 0301 	and.w	r3, r3, #1
 800f664:	2b00      	cmp	r3, #0
 800f666:	d001      	beq.n	800f66c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f668:	2303      	movs	r3, #3
 800f66a:	e1e6      	b.n	800fa3a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f66c:	79fb      	ldrb	r3, [r7, #7]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d007      	beq.n	800f682 <find_volume+0xca>
 800f672:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f676:	f003 0304 	and.w	r3, r3, #4
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d001      	beq.n	800f682 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f67e:	230a      	movs	r3, #10
 800f680:	e1db      	b.n	800fa3a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f682:	2300      	movs	r3, #0
 800f684:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f686:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f688:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f68a:	f7ff ff3f 	bl	800f50c <check_fs>
 800f68e:	4603      	mov	r3, r0
 800f690:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f694:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f698:	2b02      	cmp	r3, #2
 800f69a:	d149      	bne.n	800f730 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f69c:	2300      	movs	r3, #0
 800f69e:	643b      	str	r3, [r7, #64]	@ 0x40
 800f6a0:	e01e      	b.n	800f6e0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f6a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6a4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f6a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f6aa:	011b      	lsls	r3, r3, #4
 800f6ac:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800f6b0:	4413      	add	r3, r2
 800f6b2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6b6:	3304      	adds	r3, #4
 800f6b8:	781b      	ldrb	r3, [r3, #0]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d006      	beq.n	800f6cc <find_volume+0x114>
 800f6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6c0:	3308      	adds	r3, #8
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	f7fe fd76 	bl	800e1b4 <ld_dword>
 800f6c8:	4602      	mov	r2, r0
 800f6ca:	e000      	b.n	800f6ce <find_volume+0x116>
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f6d0:	009b      	lsls	r3, r3, #2
 800f6d2:	3358      	adds	r3, #88	@ 0x58
 800f6d4:	443b      	add	r3, r7
 800f6d6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f6da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f6dc:	3301      	adds	r3, #1
 800f6de:	643b      	str	r3, [r7, #64]	@ 0x40
 800f6e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f6e2:	2b03      	cmp	r3, #3
 800f6e4:	d9dd      	bls.n	800f6a2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800f6ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d002      	beq.n	800f6f6 <find_volume+0x13e>
 800f6f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f6f2:	3b01      	subs	r3, #1
 800f6f4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f6f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f6f8:	009b      	lsls	r3, r3, #2
 800f6fa:	3358      	adds	r3, #88	@ 0x58
 800f6fc:	443b      	add	r3, r7
 800f6fe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f702:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f704:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f706:	2b00      	cmp	r3, #0
 800f708:	d005      	beq.n	800f716 <find_volume+0x15e>
 800f70a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f70c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f70e:	f7ff fefd 	bl	800f50c <check_fs>
 800f712:	4603      	mov	r3, r0
 800f714:	e000      	b.n	800f718 <find_volume+0x160>
 800f716:	2303      	movs	r3, #3
 800f718:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f71c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f720:	2b01      	cmp	r3, #1
 800f722:	d905      	bls.n	800f730 <find_volume+0x178>
 800f724:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f726:	3301      	adds	r3, #1
 800f728:	643b      	str	r3, [r7, #64]	@ 0x40
 800f72a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f72c:	2b03      	cmp	r3, #3
 800f72e:	d9e2      	bls.n	800f6f6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f730:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f734:	2b04      	cmp	r3, #4
 800f736:	d101      	bne.n	800f73c <find_volume+0x184>
 800f738:	2301      	movs	r3, #1
 800f73a:	e17e      	b.n	800fa3a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f73c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f740:	2b01      	cmp	r3, #1
 800f742:	d901      	bls.n	800f748 <find_volume+0x190>
 800f744:	230d      	movs	r3, #13
 800f746:	e178      	b.n	800fa3a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f74a:	3330      	adds	r3, #48	@ 0x30
 800f74c:	330b      	adds	r3, #11
 800f74e:	4618      	mov	r0, r3
 800f750:	f7fe fd18 	bl	800e184 <ld_word>
 800f754:	4603      	mov	r3, r0
 800f756:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f75a:	d001      	beq.n	800f760 <find_volume+0x1a8>
 800f75c:	230d      	movs	r3, #13
 800f75e:	e16c      	b.n	800fa3a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f762:	3330      	adds	r3, #48	@ 0x30
 800f764:	3316      	adds	r3, #22
 800f766:	4618      	mov	r0, r3
 800f768:	f7fe fd0c 	bl	800e184 <ld_word>
 800f76c:	4603      	mov	r3, r0
 800f76e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f770:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f772:	2b00      	cmp	r3, #0
 800f774:	d106      	bne.n	800f784 <find_volume+0x1cc>
 800f776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f778:	3330      	adds	r3, #48	@ 0x30
 800f77a:	3324      	adds	r3, #36	@ 0x24
 800f77c:	4618      	mov	r0, r3
 800f77e:	f7fe fd19 	bl	800e1b4 <ld_dword>
 800f782:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800f784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f786:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f788:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f78a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f78c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800f790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f792:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f796:	789b      	ldrb	r3, [r3, #2]
 800f798:	2b01      	cmp	r3, #1
 800f79a:	d005      	beq.n	800f7a8 <find_volume+0x1f0>
 800f79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f79e:	789b      	ldrb	r3, [r3, #2]
 800f7a0:	2b02      	cmp	r3, #2
 800f7a2:	d001      	beq.n	800f7a8 <find_volume+0x1f0>
 800f7a4:	230d      	movs	r3, #13
 800f7a6:	e148      	b.n	800fa3a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7aa:	789b      	ldrb	r3, [r3, #2]
 800f7ac:	461a      	mov	r2, r3
 800f7ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f7b0:	fb02 f303 	mul.w	r3, r2, r3
 800f7b4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f7b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f7bc:	461a      	mov	r2, r3
 800f7be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7c0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f7c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7c4:	895b      	ldrh	r3, [r3, #10]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d008      	beq.n	800f7dc <find_volume+0x224>
 800f7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7cc:	895b      	ldrh	r3, [r3, #10]
 800f7ce:	461a      	mov	r2, r3
 800f7d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7d2:	895b      	ldrh	r3, [r3, #10]
 800f7d4:	3b01      	subs	r3, #1
 800f7d6:	4013      	ands	r3, r2
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d001      	beq.n	800f7e0 <find_volume+0x228>
 800f7dc:	230d      	movs	r3, #13
 800f7de:	e12c      	b.n	800fa3a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f7e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7e2:	3330      	adds	r3, #48	@ 0x30
 800f7e4:	3311      	adds	r3, #17
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f7fe fccc 	bl	800e184 <ld_word>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	461a      	mov	r2, r3
 800f7f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7f2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f7f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7f6:	891b      	ldrh	r3, [r3, #8]
 800f7f8:	f003 030f 	and.w	r3, r3, #15
 800f7fc:	b29b      	uxth	r3, r3
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d001      	beq.n	800f806 <find_volume+0x24e>
 800f802:	230d      	movs	r3, #13
 800f804:	e119      	b.n	800fa3a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f808:	3330      	adds	r3, #48	@ 0x30
 800f80a:	3313      	adds	r3, #19
 800f80c:	4618      	mov	r0, r3
 800f80e:	f7fe fcb9 	bl	800e184 <ld_word>
 800f812:	4603      	mov	r3, r0
 800f814:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d106      	bne.n	800f82a <find_volume+0x272>
 800f81c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f81e:	3330      	adds	r3, #48	@ 0x30
 800f820:	3320      	adds	r3, #32
 800f822:	4618      	mov	r0, r3
 800f824:	f7fe fcc6 	bl	800e1b4 <ld_dword>
 800f828:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f82a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f82c:	3330      	adds	r3, #48	@ 0x30
 800f82e:	330e      	adds	r3, #14
 800f830:	4618      	mov	r0, r3
 800f832:	f7fe fca7 	bl	800e184 <ld_word>
 800f836:	4603      	mov	r3, r0
 800f838:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f83a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d101      	bne.n	800f844 <find_volume+0x28c>
 800f840:	230d      	movs	r3, #13
 800f842:	e0fa      	b.n	800fa3a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f844:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f846:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f848:	4413      	add	r3, r2
 800f84a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f84c:	8912      	ldrh	r2, [r2, #8]
 800f84e:	0912      	lsrs	r2, r2, #4
 800f850:	b292      	uxth	r2, r2
 800f852:	4413      	add	r3, r2
 800f854:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f856:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f85a:	429a      	cmp	r2, r3
 800f85c:	d204      	bcs.n	800f868 <find_volume+0x2b0>
 800f85e:	230d      	movs	r3, #13
 800f860:	e0eb      	b.n	800fa3a <find_volume+0x482>
 800f862:	bf00      	nop
 800f864:	2000192c 	.word	0x2000192c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f868:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f86a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f86c:	1ad3      	subs	r3, r2, r3
 800f86e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f870:	8952      	ldrh	r2, [r2, #10]
 800f872:	fbb3 f3f2 	udiv	r3, r3, r2
 800f876:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d101      	bne.n	800f882 <find_volume+0x2ca>
 800f87e:	230d      	movs	r3, #13
 800f880:	e0db      	b.n	800fa3a <find_volume+0x482>
		fmt = FS_FAT32;
 800f882:	2303      	movs	r3, #3
 800f884:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f88a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800f88e:	4293      	cmp	r3, r2
 800f890:	d802      	bhi.n	800f898 <find_volume+0x2e0>
 800f892:	2302      	movs	r3, #2
 800f894:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f89a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800f89e:	4293      	cmp	r3, r2
 800f8a0:	d802      	bhi.n	800f8a8 <find_volume+0x2f0>
 800f8a2:	2301      	movs	r3, #1
 800f8a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8aa:	1c9a      	adds	r2, r3, #2
 800f8ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8ae:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800f8b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8b2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f8b4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f8b6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f8b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f8ba:	441a      	add	r2, r3
 800f8bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8be:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800f8c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f8c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8c4:	441a      	add	r2, r3
 800f8c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8c8:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800f8ca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f8ce:	2b03      	cmp	r3, #3
 800f8d0:	d11e      	bne.n	800f910 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f8d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8d4:	3330      	adds	r3, #48	@ 0x30
 800f8d6:	332a      	adds	r3, #42	@ 0x2a
 800f8d8:	4618      	mov	r0, r3
 800f8da:	f7fe fc53 	bl	800e184 <ld_word>
 800f8de:	4603      	mov	r3, r0
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d001      	beq.n	800f8e8 <find_volume+0x330>
 800f8e4:	230d      	movs	r3, #13
 800f8e6:	e0a8      	b.n	800fa3a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f8e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8ea:	891b      	ldrh	r3, [r3, #8]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d001      	beq.n	800f8f4 <find_volume+0x33c>
 800f8f0:	230d      	movs	r3, #13
 800f8f2:	e0a2      	b.n	800fa3a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f8f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8f6:	3330      	adds	r3, #48	@ 0x30
 800f8f8:	332c      	adds	r3, #44	@ 0x2c
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f7fe fc5a 	bl	800e1b4 <ld_dword>
 800f900:	4602      	mov	r2, r0
 800f902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f904:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f908:	695b      	ldr	r3, [r3, #20]
 800f90a:	009b      	lsls	r3, r3, #2
 800f90c:	647b      	str	r3, [r7, #68]	@ 0x44
 800f90e:	e01f      	b.n	800f950 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f912:	891b      	ldrh	r3, [r3, #8]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d101      	bne.n	800f91c <find_volume+0x364>
 800f918:	230d      	movs	r3, #13
 800f91a:	e08e      	b.n	800fa3a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f91c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f91e:	6a1a      	ldr	r2, [r3, #32]
 800f920:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f922:	441a      	add	r2, r3
 800f924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f926:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f928:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f92c:	2b02      	cmp	r3, #2
 800f92e:	d103      	bne.n	800f938 <find_volume+0x380>
 800f930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f932:	695b      	ldr	r3, [r3, #20]
 800f934:	005b      	lsls	r3, r3, #1
 800f936:	e00a      	b.n	800f94e <find_volume+0x396>
 800f938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f93a:	695a      	ldr	r2, [r3, #20]
 800f93c:	4613      	mov	r3, r2
 800f93e:	005b      	lsls	r3, r3, #1
 800f940:	4413      	add	r3, r2
 800f942:	085a      	lsrs	r2, r3, #1
 800f944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f946:	695b      	ldr	r3, [r3, #20]
 800f948:	f003 0301 	and.w	r3, r3, #1
 800f94c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f94e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f952:	699a      	ldr	r2, [r3, #24]
 800f954:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f956:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800f95a:	0a5b      	lsrs	r3, r3, #9
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d201      	bcs.n	800f964 <find_volume+0x3ac>
 800f960:	230d      	movs	r3, #13
 800f962:	e06a      	b.n	800fa3a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f966:	f04f 32ff 	mov.w	r2, #4294967295
 800f96a:	611a      	str	r2, [r3, #16]
 800f96c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f96e:	691a      	ldr	r2, [r3, #16]
 800f970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f972:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800f974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f976:	2280      	movs	r2, #128	@ 0x80
 800f978:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f97a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f97e:	2b03      	cmp	r3, #3
 800f980:	d149      	bne.n	800fa16 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f984:	3330      	adds	r3, #48	@ 0x30
 800f986:	3330      	adds	r3, #48	@ 0x30
 800f988:	4618      	mov	r0, r3
 800f98a:	f7fe fbfb 	bl	800e184 <ld_word>
 800f98e:	4603      	mov	r3, r0
 800f990:	2b01      	cmp	r3, #1
 800f992:	d140      	bne.n	800fa16 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f994:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f996:	3301      	adds	r3, #1
 800f998:	4619      	mov	r1, r3
 800f99a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f99c:	f7fe fea2 	bl	800e6e4 <move_window>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d137      	bne.n	800fa16 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800f9a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f9ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9ae:	3330      	adds	r3, #48	@ 0x30
 800f9b0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f7fe fbe5 	bl	800e184 <ld_word>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	461a      	mov	r2, r3
 800f9be:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f9c2:	429a      	cmp	r2, r3
 800f9c4:	d127      	bne.n	800fa16 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f9c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9c8:	3330      	adds	r3, #48	@ 0x30
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	f7fe fbf2 	bl	800e1b4 <ld_dword>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	4a1c      	ldr	r2, [pc, #112]	@ (800fa44 <find_volume+0x48c>)
 800f9d4:	4293      	cmp	r3, r2
 800f9d6:	d11e      	bne.n	800fa16 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f9d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9da:	3330      	adds	r3, #48	@ 0x30
 800f9dc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	f7fe fbe7 	bl	800e1b4 <ld_dword>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	4a17      	ldr	r2, [pc, #92]	@ (800fa48 <find_volume+0x490>)
 800f9ea:	4293      	cmp	r3, r2
 800f9ec:	d113      	bne.n	800fa16 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f9ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9f0:	3330      	adds	r3, #48	@ 0x30
 800f9f2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7fe fbdc 	bl	800e1b4 <ld_dword>
 800f9fc:	4602      	mov	r2, r0
 800f9fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa00:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800fa02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa04:	3330      	adds	r3, #48	@ 0x30
 800fa06:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f7fe fbd2 	bl	800e1b4 <ld_dword>
 800fa10:	4602      	mov	r2, r0
 800fa12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa14:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800fa16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa18:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800fa1c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800fa1e:	4b0b      	ldr	r3, [pc, #44]	@ (800fa4c <find_volume+0x494>)
 800fa20:	881b      	ldrh	r3, [r3, #0]
 800fa22:	3301      	adds	r3, #1
 800fa24:	b29a      	uxth	r2, r3
 800fa26:	4b09      	ldr	r3, [pc, #36]	@ (800fa4c <find_volume+0x494>)
 800fa28:	801a      	strh	r2, [r3, #0]
 800fa2a:	4b08      	ldr	r3, [pc, #32]	@ (800fa4c <find_volume+0x494>)
 800fa2c:	881a      	ldrh	r2, [r3, #0]
 800fa2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa30:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800fa32:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fa34:	f7fe fdee 	bl	800e614 <clear_lock>
#endif
	return FR_OK;
 800fa38:	2300      	movs	r3, #0
}
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	3758      	adds	r7, #88	@ 0x58
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd80      	pop	{r7, pc}
 800fa42:	bf00      	nop
 800fa44:	41615252 	.word	0x41615252
 800fa48:	61417272 	.word	0x61417272
 800fa4c:	20001930 	.word	0x20001930

0800fa50 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b084      	sub	sp, #16
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
 800fa58:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800fa5a:	2309      	movs	r3, #9
 800fa5c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d01c      	beq.n	800fa9e <validate+0x4e>
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d018      	beq.n	800fa9e <validate+0x4e>
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	781b      	ldrb	r3, [r3, #0]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d013      	beq.n	800fa9e <validate+0x4e>
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	889a      	ldrh	r2, [r3, #4]
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	88db      	ldrh	r3, [r3, #6]
 800fa80:	429a      	cmp	r2, r3
 800fa82:	d10c      	bne.n	800fa9e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	785b      	ldrb	r3, [r3, #1]
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f7fe fada 	bl	800e044 <disk_status>
 800fa90:	4603      	mov	r3, r0
 800fa92:	f003 0301 	and.w	r3, r3, #1
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d101      	bne.n	800fa9e <validate+0x4e>
			res = FR_OK;
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fa9e:	7bfb      	ldrb	r3, [r7, #15]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d102      	bne.n	800faaa <validate+0x5a>
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	e000      	b.n	800faac <validate+0x5c>
 800faaa:	2300      	movs	r3, #0
 800faac:	683a      	ldr	r2, [r7, #0]
 800faae:	6013      	str	r3, [r2, #0]
	return res;
 800fab0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fab2:	4618      	mov	r0, r3
 800fab4:	3710      	adds	r7, #16
 800fab6:	46bd      	mov	sp, r7
 800fab8:	bd80      	pop	{r7, pc}
	...

0800fabc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b088      	sub	sp, #32
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	60f8      	str	r0, [r7, #12]
 800fac4:	60b9      	str	r1, [r7, #8]
 800fac6:	4613      	mov	r3, r2
 800fac8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800faca:	68bb      	ldr	r3, [r7, #8]
 800facc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800face:	f107 0310 	add.w	r3, r7, #16
 800fad2:	4618      	mov	r0, r3
 800fad4:	f7ff fcd5 	bl	800f482 <get_ldnumber>
 800fad8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fada:	69fb      	ldr	r3, [r7, #28]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	da01      	bge.n	800fae4 <f_mount+0x28>
 800fae0:	230b      	movs	r3, #11
 800fae2:	e02b      	b.n	800fb3c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fae4:	4a17      	ldr	r2, [pc, #92]	@ (800fb44 <f_mount+0x88>)
 800fae6:	69fb      	ldr	r3, [r7, #28]
 800fae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800faec:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800faee:	69bb      	ldr	r3, [r7, #24]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d005      	beq.n	800fb00 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800faf4:	69b8      	ldr	r0, [r7, #24]
 800faf6:	f7fe fd8d 	bl	800e614 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fafa:	69bb      	ldr	r3, [r7, #24]
 800fafc:	2200      	movs	r2, #0
 800fafe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d002      	beq.n	800fb0c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	2200      	movs	r2, #0
 800fb0a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fb0c:	68fa      	ldr	r2, [r7, #12]
 800fb0e:	490d      	ldr	r1, [pc, #52]	@ (800fb44 <f_mount+0x88>)
 800fb10:	69fb      	ldr	r3, [r7, #28]
 800fb12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d002      	beq.n	800fb22 <f_mount+0x66>
 800fb1c:	79fb      	ldrb	r3, [r7, #7]
 800fb1e:	2b01      	cmp	r3, #1
 800fb20:	d001      	beq.n	800fb26 <f_mount+0x6a>
 800fb22:	2300      	movs	r3, #0
 800fb24:	e00a      	b.n	800fb3c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fb26:	f107 010c 	add.w	r1, r7, #12
 800fb2a:	f107 0308 	add.w	r3, r7, #8
 800fb2e:	2200      	movs	r2, #0
 800fb30:	4618      	mov	r0, r3
 800fb32:	f7ff fd41 	bl	800f5b8 <find_volume>
 800fb36:	4603      	mov	r3, r0
 800fb38:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fb3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	3720      	adds	r7, #32
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}
 800fb44:	2000192c 	.word	0x2000192c

0800fb48 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b098      	sub	sp, #96	@ 0x60
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	60f8      	str	r0, [r7, #12]
 800fb50:	60b9      	str	r1, [r7, #8]
 800fb52:	4613      	mov	r3, r2
 800fb54:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d101      	bne.n	800fb60 <f_open+0x18>
 800fb5c:	2309      	movs	r3, #9
 800fb5e:	e1a9      	b.n	800feb4 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fb60:	79fb      	ldrb	r3, [r7, #7]
 800fb62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fb66:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800fb68:	79fa      	ldrb	r2, [r7, #7]
 800fb6a:	f107 0110 	add.w	r1, r7, #16
 800fb6e:	f107 0308 	add.w	r3, r7, #8
 800fb72:	4618      	mov	r0, r3
 800fb74:	f7ff fd20 	bl	800f5b8 <find_volume>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800fb7e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	f040 818d 	bne.w	800fea2 <f_open+0x35a>
		dj.obj.fs = fs;
 800fb88:	693b      	ldr	r3, [r7, #16]
 800fb8a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800fb8c:	68ba      	ldr	r2, [r7, #8]
 800fb8e:	f107 0314 	add.w	r3, r7, #20
 800fb92:	4611      	mov	r1, r2
 800fb94:	4618      	mov	r0, r3
 800fb96:	f7ff fc03 	bl	800f3a0 <follow_path>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fba0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d118      	bne.n	800fbda <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800fba8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fbac:	b25b      	sxtb	r3, r3
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	da03      	bge.n	800fbba <f_open+0x72>
				res = FR_INVALID_NAME;
 800fbb2:	2306      	movs	r3, #6
 800fbb4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800fbb8:	e00f      	b.n	800fbda <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fbba:	79fb      	ldrb	r3, [r7, #7]
 800fbbc:	2b01      	cmp	r3, #1
 800fbbe:	bf8c      	ite	hi
 800fbc0:	2301      	movhi	r3, #1
 800fbc2:	2300      	movls	r3, #0
 800fbc4:	b2db      	uxtb	r3, r3
 800fbc6:	461a      	mov	r2, r3
 800fbc8:	f107 0314 	add.w	r3, r7, #20
 800fbcc:	4611      	mov	r1, r2
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f7fe fbd8 	bl	800e384 <chk_lock>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fbda:	79fb      	ldrb	r3, [r7, #7]
 800fbdc:	f003 031c 	and.w	r3, r3, #28
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d07f      	beq.n	800fce4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800fbe4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d017      	beq.n	800fc1c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fbec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fbf0:	2b04      	cmp	r3, #4
 800fbf2:	d10e      	bne.n	800fc12 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fbf4:	f7fe fc22 	bl	800e43c <enq_lock>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d006      	beq.n	800fc0c <f_open+0xc4>
 800fbfe:	f107 0314 	add.w	r3, r7, #20
 800fc02:	4618      	mov	r0, r3
 800fc04:	f7ff fb06 	bl	800f214 <dir_register>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	e000      	b.n	800fc0e <f_open+0xc6>
 800fc0c:	2312      	movs	r3, #18
 800fc0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fc12:	79fb      	ldrb	r3, [r7, #7]
 800fc14:	f043 0308 	orr.w	r3, r3, #8
 800fc18:	71fb      	strb	r3, [r7, #7]
 800fc1a:	e010      	b.n	800fc3e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fc1c:	7ebb      	ldrb	r3, [r7, #26]
 800fc1e:	f003 0311 	and.w	r3, r3, #17
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d003      	beq.n	800fc2e <f_open+0xe6>
					res = FR_DENIED;
 800fc26:	2307      	movs	r3, #7
 800fc28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800fc2c:	e007      	b.n	800fc3e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fc2e:	79fb      	ldrb	r3, [r7, #7]
 800fc30:	f003 0304 	and.w	r3, r3, #4
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d002      	beq.n	800fc3e <f_open+0xf6>
 800fc38:	2308      	movs	r3, #8
 800fc3a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fc3e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d168      	bne.n	800fd18 <f_open+0x1d0>
 800fc46:	79fb      	ldrb	r3, [r7, #7]
 800fc48:	f003 0308 	and.w	r3, r3, #8
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d063      	beq.n	800fd18 <f_open+0x1d0>
				dw = GET_FATTIME();
 800fc50:	f7fb f85c 	bl	800ad0c <get_fattime>
 800fc54:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fc56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc58:	330e      	adds	r3, #14
 800fc5a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f7fe fae7 	bl	800e230 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fc62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc64:	3316      	adds	r3, #22
 800fc66:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fc68:	4618      	mov	r0, r3
 800fc6a:	f7fe fae1 	bl	800e230 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fc6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc70:	330b      	adds	r3, #11
 800fc72:	2220      	movs	r2, #32
 800fc74:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fc76:	693b      	ldr	r3, [r7, #16]
 800fc78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fc7a:	4611      	mov	r1, r2
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	f7ff fa35 	bl	800f0ec <ld_clust>
 800fc82:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fc84:	693b      	ldr	r3, [r7, #16]
 800fc86:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800fc88:	2200      	movs	r2, #0
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f7ff fa4d 	bl	800f12a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fc90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc92:	331c      	adds	r3, #28
 800fc94:	2100      	movs	r1, #0
 800fc96:	4618      	mov	r0, r3
 800fc98:	f7fe faca 	bl	800e230 <st_dword>
					fs->wflag = 1;
 800fc9c:	693b      	ldr	r3, [r7, #16]
 800fc9e:	2201      	movs	r2, #1
 800fca0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fca2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d037      	beq.n	800fd18 <f_open+0x1d0>
						dw = fs->winsect;
 800fca8:	693b      	ldr	r3, [r7, #16]
 800fcaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcac:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800fcae:	f107 0314 	add.w	r3, r7, #20
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f7fe ff60 	bl	800eb7c <remove_chain>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800fcc2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d126      	bne.n	800fd18 <f_open+0x1d0>
							res = move_window(fs, dw);
 800fcca:	693b      	ldr	r3, [r7, #16]
 800fccc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fcce:	4618      	mov	r0, r3
 800fcd0:	f7fe fd08 	bl	800e6e4 <move_window>
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fcda:	693b      	ldr	r3, [r7, #16]
 800fcdc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fcde:	3a01      	subs	r2, #1
 800fce0:	60da      	str	r2, [r3, #12]
 800fce2:	e019      	b.n	800fd18 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fce4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d115      	bne.n	800fd18 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fcec:	7ebb      	ldrb	r3, [r7, #26]
 800fcee:	f003 0310 	and.w	r3, r3, #16
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d003      	beq.n	800fcfe <f_open+0x1b6>
					res = FR_NO_FILE;
 800fcf6:	2304      	movs	r3, #4
 800fcf8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800fcfc:	e00c      	b.n	800fd18 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fcfe:	79fb      	ldrb	r3, [r7, #7]
 800fd00:	f003 0302 	and.w	r3, r3, #2
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d007      	beq.n	800fd18 <f_open+0x1d0>
 800fd08:	7ebb      	ldrb	r3, [r7, #26]
 800fd0a:	f003 0301 	and.w	r3, r3, #1
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d002      	beq.n	800fd18 <f_open+0x1d0>
						res = FR_DENIED;
 800fd12:	2307      	movs	r3, #7
 800fd14:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800fd18:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d126      	bne.n	800fd6e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fd20:	79fb      	ldrb	r3, [r7, #7]
 800fd22:	f003 0308 	and.w	r3, r3, #8
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d003      	beq.n	800fd32 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800fd2a:	79fb      	ldrb	r3, [r7, #7]
 800fd2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd30:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fd32:	693b      	ldr	r3, [r7, #16]
 800fd34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800fd3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fd40:	79fb      	ldrb	r3, [r7, #7]
 800fd42:	2b01      	cmp	r3, #1
 800fd44:	bf8c      	ite	hi
 800fd46:	2301      	movhi	r3, #1
 800fd48:	2300      	movls	r3, #0
 800fd4a:	b2db      	uxtb	r3, r3
 800fd4c:	461a      	mov	r2, r3
 800fd4e:	f107 0314 	add.w	r3, r7, #20
 800fd52:	4611      	mov	r1, r2
 800fd54:	4618      	mov	r0, r3
 800fd56:	f7fe fb93 	bl	800e480 <inc_lock>
 800fd5a:	4602      	mov	r2, r0
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	691b      	ldr	r3, [r3, #16]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d102      	bne.n	800fd6e <f_open+0x226>
 800fd68:	2302      	movs	r3, #2
 800fd6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fd6e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	f040 8095 	bne.w	800fea2 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fd78:	693b      	ldr	r3, [r7, #16]
 800fd7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fd7c:	4611      	mov	r1, r2
 800fd7e:	4618      	mov	r0, r3
 800fd80:	f7ff f9b4 	bl	800f0ec <ld_clust>
 800fd84:	4602      	mov	r2, r0
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fd8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd8c:	331c      	adds	r3, #28
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f7fe fa10 	bl	800e1b4 <ld_dword>
 800fd94:	4602      	mov	r2, r0
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fda0:	693a      	ldr	r2, [r7, #16]
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fda6:	693b      	ldr	r3, [r7, #16]
 800fda8:	88da      	ldrh	r2, [r3, #6]
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	79fa      	ldrb	r2, [r7, #7]
 800fdb2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	3330      	adds	r3, #48	@ 0x30
 800fdca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fdce:	2100      	movs	r1, #0
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	f7fe fa7a 	bl	800e2ca <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fdd6:	79fb      	ldrb	r3, [r7, #7]
 800fdd8:	f003 0320 	and.w	r3, r3, #32
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d060      	beq.n	800fea2 <f_open+0x35a>
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	68db      	ldr	r3, [r3, #12]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d05c      	beq.n	800fea2 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	68da      	ldr	r2, [r3, #12]
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fdf0:	693b      	ldr	r3, [r7, #16]
 800fdf2:	895b      	ldrh	r3, [r3, #10]
 800fdf4:	025b      	lsls	r3, r3, #9
 800fdf6:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	689b      	ldr	r3, [r3, #8]
 800fdfc:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	68db      	ldr	r3, [r3, #12]
 800fe02:	657b      	str	r3, [r7, #84]	@ 0x54
 800fe04:	e016      	b.n	800fe34 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	f7fe fd25 	bl	800e85a <get_fat>
 800fe10:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800fe12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fe14:	2b01      	cmp	r3, #1
 800fe16:	d802      	bhi.n	800fe1e <f_open+0x2d6>
 800fe18:	2302      	movs	r3, #2
 800fe1a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fe1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fe20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe24:	d102      	bne.n	800fe2c <f_open+0x2e4>
 800fe26:	2301      	movs	r3, #1
 800fe28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fe2c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fe2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fe30:	1ad3      	subs	r3, r2, r3
 800fe32:	657b      	str	r3, [r7, #84]	@ 0x54
 800fe34:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d103      	bne.n	800fe44 <f_open+0x2fc>
 800fe3c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fe3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fe40:	429a      	cmp	r2, r3
 800fe42:	d8e0      	bhi.n	800fe06 <f_open+0x2be>
				}
				fp->clust = clst;
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fe48:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fe4a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d127      	bne.n	800fea2 <f_open+0x35a>
 800fe52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d022      	beq.n	800fea2 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fe5c:	693b      	ldr	r3, [r7, #16]
 800fe5e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800fe60:	4618      	mov	r0, r3
 800fe62:	f7fe fcdb 	bl	800e81c <clust2sect>
 800fe66:	6478      	str	r0, [r7, #68]	@ 0x44
 800fe68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d103      	bne.n	800fe76 <f_open+0x32e>
						res = FR_INT_ERR;
 800fe6e:	2302      	movs	r3, #2
 800fe70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800fe74:	e015      	b.n	800fea2 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fe76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe78:	0a5a      	lsrs	r2, r3, #9
 800fe7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe7c:	441a      	add	r2, r3
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fe82:	693b      	ldr	r3, [r7, #16]
 800fe84:	7858      	ldrb	r0, [r3, #1]
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	6a1a      	ldr	r2, [r3, #32]
 800fe90:	2301      	movs	r3, #1
 800fe92:	f7fe f919 	bl	800e0c8 <disk_read>
 800fe96:	4603      	mov	r3, r0
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d002      	beq.n	800fea2 <f_open+0x35a>
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fea2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d002      	beq.n	800feb0 <f_open+0x368>
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	2200      	movs	r2, #0
 800feae:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800feb0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800feb4:	4618      	mov	r0, r3
 800feb6:	3760      	adds	r7, #96	@ 0x60
 800feb8:	46bd      	mov	sp, r7
 800feba:	bd80      	pop	{r7, pc}

0800febc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b08e      	sub	sp, #56	@ 0x38
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	60f8      	str	r0, [r7, #12]
 800fec4:	60b9      	str	r1, [r7, #8]
 800fec6:	607a      	str	r2, [r7, #4]
 800fec8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800feca:	68bb      	ldr	r3, [r7, #8]
 800fecc:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800fece:	683b      	ldr	r3, [r7, #0]
 800fed0:	2200      	movs	r2, #0
 800fed2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	f107 0214 	add.w	r2, r7, #20
 800feda:	4611      	mov	r1, r2
 800fedc:	4618      	mov	r0, r3
 800fede:	f7ff fdb7 	bl	800fa50 <validate>
 800fee2:	4603      	mov	r3, r0
 800fee4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fee8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800feec:	2b00      	cmp	r3, #0
 800feee:	d107      	bne.n	800ff00 <f_read+0x44>
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	7d5b      	ldrb	r3, [r3, #21]
 800fef4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800fef8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d002      	beq.n	800ff06 <f_read+0x4a>
 800ff00:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ff04:	e115      	b.n	8010132 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	7d1b      	ldrb	r3, [r3, #20]
 800ff0a:	f003 0301 	and.w	r3, r3, #1
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d101      	bne.n	800ff16 <f_read+0x5a>
 800ff12:	2307      	movs	r3, #7
 800ff14:	e10d      	b.n	8010132 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	68da      	ldr	r2, [r3, #12]
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	699b      	ldr	r3, [r3, #24]
 800ff1e:	1ad3      	subs	r3, r2, r3
 800ff20:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ff22:	687a      	ldr	r2, [r7, #4]
 800ff24:	6a3b      	ldr	r3, [r7, #32]
 800ff26:	429a      	cmp	r2, r3
 800ff28:	f240 80fe 	bls.w	8010128 <f_read+0x26c>
 800ff2c:	6a3b      	ldr	r3, [r7, #32]
 800ff2e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ff30:	e0fa      	b.n	8010128 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	699b      	ldr	r3, [r3, #24]
 800ff36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	f040 80c6 	bne.w	80100cc <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	699b      	ldr	r3, [r3, #24]
 800ff44:	0a5b      	lsrs	r3, r3, #9
 800ff46:	697a      	ldr	r2, [r7, #20]
 800ff48:	8952      	ldrh	r2, [r2, #10]
 800ff4a:	3a01      	subs	r2, #1
 800ff4c:	4013      	ands	r3, r2
 800ff4e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ff50:	69fb      	ldr	r3, [r7, #28]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d12f      	bne.n	800ffb6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	699b      	ldr	r3, [r3, #24]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d103      	bne.n	800ff66 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	689b      	ldr	r3, [r3, #8]
 800ff62:	633b      	str	r3, [r7, #48]	@ 0x30
 800ff64:	e013      	b.n	800ff8e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d007      	beq.n	800ff7e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	699b      	ldr	r3, [r3, #24]
 800ff72:	4619      	mov	r1, r3
 800ff74:	68f8      	ldr	r0, [r7, #12]
 800ff76:	f7fe fefe 	bl	800ed76 <clmt_clust>
 800ff7a:	6338      	str	r0, [r7, #48]	@ 0x30
 800ff7c:	e007      	b.n	800ff8e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ff7e:	68fa      	ldr	r2, [r7, #12]
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	69db      	ldr	r3, [r3, #28]
 800ff84:	4619      	mov	r1, r3
 800ff86:	4610      	mov	r0, r2
 800ff88:	f7fe fc67 	bl	800e85a <get_fat>
 800ff8c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ff8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff90:	2b01      	cmp	r3, #1
 800ff92:	d804      	bhi.n	800ff9e <f_read+0xe2>
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	2202      	movs	r2, #2
 800ff98:	755a      	strb	r2, [r3, #21]
 800ff9a:	2302      	movs	r3, #2
 800ff9c:	e0c9      	b.n	8010132 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ff9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffa4:	d104      	bne.n	800ffb0 <f_read+0xf4>
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	2201      	movs	r2, #1
 800ffaa:	755a      	strb	r2, [r3, #21]
 800ffac:	2301      	movs	r3, #1
 800ffae:	e0c0      	b.n	8010132 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ffb4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ffb6:	697a      	ldr	r2, [r7, #20]
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	69db      	ldr	r3, [r3, #28]
 800ffbc:	4619      	mov	r1, r3
 800ffbe:	4610      	mov	r0, r2
 800ffc0:	f7fe fc2c 	bl	800e81c <clust2sect>
 800ffc4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ffc6:	69bb      	ldr	r3, [r7, #24]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d104      	bne.n	800ffd6 <f_read+0x11a>
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	2202      	movs	r2, #2
 800ffd0:	755a      	strb	r2, [r3, #21]
 800ffd2:	2302      	movs	r3, #2
 800ffd4:	e0ad      	b.n	8010132 <f_read+0x276>
			sect += csect;
 800ffd6:	69ba      	ldr	r2, [r7, #24]
 800ffd8:	69fb      	ldr	r3, [r7, #28]
 800ffda:	4413      	add	r3, r2
 800ffdc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	0a5b      	lsrs	r3, r3, #9
 800ffe2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ffe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d039      	beq.n	801005e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ffea:	69fa      	ldr	r2, [r7, #28]
 800ffec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffee:	4413      	add	r3, r2
 800fff0:	697a      	ldr	r2, [r7, #20]
 800fff2:	8952      	ldrh	r2, [r2, #10]
 800fff4:	4293      	cmp	r3, r2
 800fff6:	d905      	bls.n	8010004 <f_read+0x148>
					cc = fs->csize - csect;
 800fff8:	697b      	ldr	r3, [r7, #20]
 800fffa:	895b      	ldrh	r3, [r3, #10]
 800fffc:	461a      	mov	r2, r3
 800fffe:	69fb      	ldr	r3, [r7, #28]
 8010000:	1ad3      	subs	r3, r2, r3
 8010002:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010004:	697b      	ldr	r3, [r7, #20]
 8010006:	7858      	ldrb	r0, [r3, #1]
 8010008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801000a:	69ba      	ldr	r2, [r7, #24]
 801000c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801000e:	f7fe f85b 	bl	800e0c8 <disk_read>
 8010012:	4603      	mov	r3, r0
 8010014:	2b00      	cmp	r3, #0
 8010016:	d004      	beq.n	8010022 <f_read+0x166>
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	2201      	movs	r2, #1
 801001c:	755a      	strb	r2, [r3, #21]
 801001e:	2301      	movs	r3, #1
 8010020:	e087      	b.n	8010132 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	7d1b      	ldrb	r3, [r3, #20]
 8010026:	b25b      	sxtb	r3, r3
 8010028:	2b00      	cmp	r3, #0
 801002a:	da14      	bge.n	8010056 <f_read+0x19a>
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	6a1a      	ldr	r2, [r3, #32]
 8010030:	69bb      	ldr	r3, [r7, #24]
 8010032:	1ad3      	subs	r3, r2, r3
 8010034:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010036:	429a      	cmp	r2, r3
 8010038:	d90d      	bls.n	8010056 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	6a1a      	ldr	r2, [r3, #32]
 801003e:	69bb      	ldr	r3, [r7, #24]
 8010040:	1ad3      	subs	r3, r2, r3
 8010042:	025b      	lsls	r3, r3, #9
 8010044:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010046:	18d0      	adds	r0, r2, r3
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	3330      	adds	r3, #48	@ 0x30
 801004c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010050:	4619      	mov	r1, r3
 8010052:	f7fe f919 	bl	800e288 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8010056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010058:	025b      	lsls	r3, r3, #9
 801005a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 801005c:	e050      	b.n	8010100 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	6a1b      	ldr	r3, [r3, #32]
 8010062:	69ba      	ldr	r2, [r7, #24]
 8010064:	429a      	cmp	r2, r3
 8010066:	d02e      	beq.n	80100c6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	7d1b      	ldrb	r3, [r3, #20]
 801006c:	b25b      	sxtb	r3, r3
 801006e:	2b00      	cmp	r3, #0
 8010070:	da18      	bge.n	80100a4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	7858      	ldrb	r0, [r3, #1]
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	6a1a      	ldr	r2, [r3, #32]
 8010080:	2301      	movs	r3, #1
 8010082:	f7fe f841 	bl	800e108 <disk_write>
 8010086:	4603      	mov	r3, r0
 8010088:	2b00      	cmp	r3, #0
 801008a:	d004      	beq.n	8010096 <f_read+0x1da>
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	2201      	movs	r2, #1
 8010090:	755a      	strb	r2, [r3, #21]
 8010092:	2301      	movs	r3, #1
 8010094:	e04d      	b.n	8010132 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	7d1b      	ldrb	r3, [r3, #20]
 801009a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801009e:	b2da      	uxtb	r2, r3
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80100a4:	697b      	ldr	r3, [r7, #20]
 80100a6:	7858      	ldrb	r0, [r3, #1]
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80100ae:	2301      	movs	r3, #1
 80100b0:	69ba      	ldr	r2, [r7, #24]
 80100b2:	f7fe f809 	bl	800e0c8 <disk_read>
 80100b6:	4603      	mov	r3, r0
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d004      	beq.n	80100c6 <f_read+0x20a>
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	2201      	movs	r2, #1
 80100c0:	755a      	strb	r2, [r3, #21]
 80100c2:	2301      	movs	r3, #1
 80100c4:	e035      	b.n	8010132 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	69ba      	ldr	r2, [r7, #24]
 80100ca:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	699b      	ldr	r3, [r3, #24]
 80100d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100d4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80100d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80100da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	429a      	cmp	r2, r3
 80100e0:	d901      	bls.n	80100e6 <f_read+0x22a>
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	699b      	ldr	r3, [r3, #24]
 80100f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100f4:	4413      	add	r3, r2
 80100f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80100f8:	4619      	mov	r1, r3
 80100fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80100fc:	f7fe f8c4 	bl	800e288 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010100:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010104:	4413      	add	r3, r2
 8010106:	627b      	str	r3, [r7, #36]	@ 0x24
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	699a      	ldr	r2, [r3, #24]
 801010c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801010e:	441a      	add	r2, r3
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	619a      	str	r2, [r3, #24]
 8010114:	683b      	ldr	r3, [r7, #0]
 8010116:	681a      	ldr	r2, [r3, #0]
 8010118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801011a:	441a      	add	r2, r3
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	601a      	str	r2, [r3, #0]
 8010120:	687a      	ldr	r2, [r7, #4]
 8010122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010124:	1ad3      	subs	r3, r2, r3
 8010126:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2b00      	cmp	r3, #0
 801012c:	f47f af01 	bne.w	800ff32 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010130:	2300      	movs	r3, #0
}
 8010132:	4618      	mov	r0, r3
 8010134:	3738      	adds	r7, #56	@ 0x38
 8010136:	46bd      	mov	sp, r7
 8010138:	bd80      	pop	{r7, pc}

0801013a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801013a:	b580      	push	{r7, lr}
 801013c:	b086      	sub	sp, #24
 801013e:	af00      	add	r7, sp, #0
 8010140:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	f107 0208 	add.w	r2, r7, #8
 8010148:	4611      	mov	r1, r2
 801014a:	4618      	mov	r0, r3
 801014c:	f7ff fc80 	bl	800fa50 <validate>
 8010150:	4603      	mov	r3, r0
 8010152:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010154:	7dfb      	ldrb	r3, [r7, #23]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d168      	bne.n	801022c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	7d1b      	ldrb	r3, [r3, #20]
 801015e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010162:	2b00      	cmp	r3, #0
 8010164:	d062      	beq.n	801022c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	7d1b      	ldrb	r3, [r3, #20]
 801016a:	b25b      	sxtb	r3, r3
 801016c:	2b00      	cmp	r3, #0
 801016e:	da15      	bge.n	801019c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010170:	68bb      	ldr	r3, [r7, #8]
 8010172:	7858      	ldrb	r0, [r3, #1]
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	6a1a      	ldr	r2, [r3, #32]
 801017e:	2301      	movs	r3, #1
 8010180:	f7fd ffc2 	bl	800e108 <disk_write>
 8010184:	4603      	mov	r3, r0
 8010186:	2b00      	cmp	r3, #0
 8010188:	d001      	beq.n	801018e <f_sync+0x54>
 801018a:	2301      	movs	r3, #1
 801018c:	e04f      	b.n	801022e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	7d1b      	ldrb	r3, [r3, #20]
 8010192:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010196:	b2da      	uxtb	r2, r3
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801019c:	f7fa fdb6 	bl	800ad0c <get_fattime>
 80101a0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80101a2:	68ba      	ldr	r2, [r7, #8]
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101a8:	4619      	mov	r1, r3
 80101aa:	4610      	mov	r0, r2
 80101ac:	f7fe fa9a 	bl	800e6e4 <move_window>
 80101b0:	4603      	mov	r3, r0
 80101b2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80101b4:	7dfb      	ldrb	r3, [r7, #23]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d138      	bne.n	801022c <f_sync+0xf2>
					dir = fp->dir_ptr;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101be:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	330b      	adds	r3, #11
 80101c4:	781a      	ldrb	r2, [r3, #0]
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	330b      	adds	r3, #11
 80101ca:	f042 0220 	orr.w	r2, r2, #32
 80101ce:	b2d2      	uxtb	r2, r2
 80101d0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	6818      	ldr	r0, [r3, #0]
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	689b      	ldr	r3, [r3, #8]
 80101da:	461a      	mov	r2, r3
 80101dc:	68f9      	ldr	r1, [r7, #12]
 80101de:	f7fe ffa4 	bl	800f12a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	f103 021c 	add.w	r2, r3, #28
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	68db      	ldr	r3, [r3, #12]
 80101ec:	4619      	mov	r1, r3
 80101ee:	4610      	mov	r0, r2
 80101f0:	f7fe f81e 	bl	800e230 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	3316      	adds	r3, #22
 80101f8:	6939      	ldr	r1, [r7, #16]
 80101fa:	4618      	mov	r0, r3
 80101fc:	f7fe f818 	bl	800e230 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	3312      	adds	r3, #18
 8010204:	2100      	movs	r1, #0
 8010206:	4618      	mov	r0, r3
 8010208:	f7fd fff7 	bl	800e1fa <st_word>
					fs->wflag = 1;
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	2201      	movs	r2, #1
 8010210:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010212:	68bb      	ldr	r3, [r7, #8]
 8010214:	4618      	mov	r0, r3
 8010216:	f7fe fa93 	bl	800e740 <sync_fs>
 801021a:	4603      	mov	r3, r0
 801021c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	7d1b      	ldrb	r3, [r3, #20]
 8010222:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010226:	b2da      	uxtb	r2, r3
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801022c:	7dfb      	ldrb	r3, [r7, #23]
}
 801022e:	4618      	mov	r0, r3
 8010230:	3718      	adds	r7, #24
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}

08010236 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010236:	b580      	push	{r7, lr}
 8010238:	b084      	sub	sp, #16
 801023a:	af00      	add	r7, sp, #0
 801023c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801023e:	6878      	ldr	r0, [r7, #4]
 8010240:	f7ff ff7b 	bl	801013a <f_sync>
 8010244:	4603      	mov	r3, r0
 8010246:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010248:	7bfb      	ldrb	r3, [r7, #15]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d118      	bne.n	8010280 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f107 0208 	add.w	r2, r7, #8
 8010254:	4611      	mov	r1, r2
 8010256:	4618      	mov	r0, r3
 8010258:	f7ff fbfa 	bl	800fa50 <validate>
 801025c:	4603      	mov	r3, r0
 801025e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010260:	7bfb      	ldrb	r3, [r7, #15]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d10c      	bne.n	8010280 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	691b      	ldr	r3, [r3, #16]
 801026a:	4618      	mov	r0, r3
 801026c:	f7fe f996 	bl	800e59c <dec_lock>
 8010270:	4603      	mov	r3, r0
 8010272:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010274:	7bfb      	ldrb	r3, [r7, #15]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d102      	bne.n	8010280 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	2200      	movs	r2, #0
 801027e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010280:	7bfb      	ldrb	r3, [r7, #15]
}
 8010282:	4618      	mov	r0, r3
 8010284:	3710      	adds	r7, #16
 8010286:	46bd      	mov	sp, r7
 8010288:	bd80      	pop	{r7, pc}

0801028a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801028a:	b580      	push	{r7, lr}
 801028c:	b090      	sub	sp, #64	@ 0x40
 801028e:	af00      	add	r7, sp, #0
 8010290:	6078      	str	r0, [r7, #4]
 8010292:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	f107 0208 	add.w	r2, r7, #8
 801029a:	4611      	mov	r1, r2
 801029c:	4618      	mov	r0, r3
 801029e:	f7ff fbd7 	bl	800fa50 <validate>
 80102a2:	4603      	mov	r3, r0
 80102a4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80102a8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d103      	bne.n	80102b8 <f_lseek+0x2e>
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	7d5b      	ldrb	r3, [r3, #21]
 80102b4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80102b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d002      	beq.n	80102c6 <f_lseek+0x3c>
 80102c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80102c4:	e1e6      	b.n	8010694 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	f000 80d1 	beq.w	8010472 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80102d0:	683b      	ldr	r3, [r7, #0]
 80102d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102d6:	d15a      	bne.n	801038e <f_lseek+0x104>
			tbl = fp->cltbl;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102dc:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80102de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102e0:	1d1a      	adds	r2, r3, #4
 80102e2:	627a      	str	r2, [r7, #36]	@ 0x24
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	617b      	str	r3, [r7, #20]
 80102e8:	2302      	movs	r3, #2
 80102ea:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	689b      	ldr	r3, [r3, #8]
 80102f0:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 80102f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d03a      	beq.n	801036e <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80102f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102fa:	613b      	str	r3, [r7, #16]
 80102fc:	2300      	movs	r3, #0
 80102fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010302:	3302      	adds	r3, #2
 8010304:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8010306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010308:	60fb      	str	r3, [r7, #12]
 801030a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801030c:	3301      	adds	r3, #1
 801030e:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010314:	4618      	mov	r0, r3
 8010316:	f7fe faa0 	bl	800e85a <get_fat>
 801031a:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801031c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801031e:	2b01      	cmp	r3, #1
 8010320:	d804      	bhi.n	801032c <f_lseek+0xa2>
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	2202      	movs	r2, #2
 8010326:	755a      	strb	r2, [r3, #21]
 8010328:	2302      	movs	r3, #2
 801032a:	e1b3      	b.n	8010694 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801032c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801032e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010332:	d104      	bne.n	801033e <f_lseek+0xb4>
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	2201      	movs	r2, #1
 8010338:	755a      	strb	r2, [r3, #21]
 801033a:	2301      	movs	r3, #1
 801033c:	e1aa      	b.n	8010694 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	3301      	adds	r3, #1
 8010342:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010344:	429a      	cmp	r2, r3
 8010346:	d0de      	beq.n	8010306 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010348:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801034a:	697b      	ldr	r3, [r7, #20]
 801034c:	429a      	cmp	r2, r3
 801034e:	d809      	bhi.n	8010364 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8010350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010352:	1d1a      	adds	r2, r3, #4
 8010354:	627a      	str	r2, [r7, #36]	@ 0x24
 8010356:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010358:	601a      	str	r2, [r3, #0]
 801035a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801035c:	1d1a      	adds	r2, r3, #4
 801035e:	627a      	str	r2, [r7, #36]	@ 0x24
 8010360:	693a      	ldr	r2, [r7, #16]
 8010362:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	695b      	ldr	r3, [r3, #20]
 8010368:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801036a:	429a      	cmp	r2, r3
 801036c:	d3c4      	bcc.n	80102f8 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010372:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010374:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010376:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010378:	697b      	ldr	r3, [r7, #20]
 801037a:	429a      	cmp	r2, r3
 801037c:	d803      	bhi.n	8010386 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 801037e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010380:	2200      	movs	r2, #0
 8010382:	601a      	str	r2, [r3, #0]
 8010384:	e184      	b.n	8010690 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010386:	2311      	movs	r3, #17
 8010388:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801038c:	e180      	b.n	8010690 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	68db      	ldr	r3, [r3, #12]
 8010392:	683a      	ldr	r2, [r7, #0]
 8010394:	429a      	cmp	r2, r3
 8010396:	d902      	bls.n	801039e <f_lseek+0x114>
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	68db      	ldr	r3, [r3, #12]
 801039c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	683a      	ldr	r2, [r7, #0]
 80103a2:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	f000 8172 	beq.w	8010690 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 80103ac:	683b      	ldr	r3, [r7, #0]
 80103ae:	3b01      	subs	r3, #1
 80103b0:	4619      	mov	r1, r3
 80103b2:	6878      	ldr	r0, [r7, #4]
 80103b4:	f7fe fcdf 	bl	800ed76 <clmt_clust>
 80103b8:	4602      	mov	r2, r0
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80103be:	68ba      	ldr	r2, [r7, #8]
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	69db      	ldr	r3, [r3, #28]
 80103c4:	4619      	mov	r1, r3
 80103c6:	4610      	mov	r0, r2
 80103c8:	f7fe fa28 	bl	800e81c <clust2sect>
 80103cc:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80103ce:	69bb      	ldr	r3, [r7, #24]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d104      	bne.n	80103de <f_lseek+0x154>
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	2202      	movs	r2, #2
 80103d8:	755a      	strb	r2, [r3, #21]
 80103da:	2302      	movs	r3, #2
 80103dc:	e15a      	b.n	8010694 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80103de:	683b      	ldr	r3, [r7, #0]
 80103e0:	3b01      	subs	r3, #1
 80103e2:	0a5b      	lsrs	r3, r3, #9
 80103e4:	68ba      	ldr	r2, [r7, #8]
 80103e6:	8952      	ldrh	r2, [r2, #10]
 80103e8:	3a01      	subs	r2, #1
 80103ea:	4013      	ands	r3, r2
 80103ec:	69ba      	ldr	r2, [r7, #24]
 80103ee:	4413      	add	r3, r2
 80103f0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	699b      	ldr	r3, [r3, #24]
 80103f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	f000 8148 	beq.w	8010690 <f_lseek+0x406>
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	6a1b      	ldr	r3, [r3, #32]
 8010404:	69ba      	ldr	r2, [r7, #24]
 8010406:	429a      	cmp	r2, r3
 8010408:	f000 8142 	beq.w	8010690 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	7d1b      	ldrb	r3, [r3, #20]
 8010410:	b25b      	sxtb	r3, r3
 8010412:	2b00      	cmp	r3, #0
 8010414:	da18      	bge.n	8010448 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	7858      	ldrb	r0, [r3, #1]
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	6a1a      	ldr	r2, [r3, #32]
 8010424:	2301      	movs	r3, #1
 8010426:	f7fd fe6f 	bl	800e108 <disk_write>
 801042a:	4603      	mov	r3, r0
 801042c:	2b00      	cmp	r3, #0
 801042e:	d004      	beq.n	801043a <f_lseek+0x1b0>
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	2201      	movs	r2, #1
 8010434:	755a      	strb	r2, [r3, #21]
 8010436:	2301      	movs	r3, #1
 8010438:	e12c      	b.n	8010694 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	7d1b      	ldrb	r3, [r3, #20]
 801043e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010442:	b2da      	uxtb	r2, r3
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010448:	68bb      	ldr	r3, [r7, #8]
 801044a:	7858      	ldrb	r0, [r3, #1]
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010452:	2301      	movs	r3, #1
 8010454:	69ba      	ldr	r2, [r7, #24]
 8010456:	f7fd fe37 	bl	800e0c8 <disk_read>
 801045a:	4603      	mov	r3, r0
 801045c:	2b00      	cmp	r3, #0
 801045e:	d004      	beq.n	801046a <f_lseek+0x1e0>
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	2201      	movs	r2, #1
 8010464:	755a      	strb	r2, [r3, #21]
 8010466:	2301      	movs	r3, #1
 8010468:	e114      	b.n	8010694 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	69ba      	ldr	r2, [r7, #24]
 801046e:	621a      	str	r2, [r3, #32]
 8010470:	e10e      	b.n	8010690 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	68db      	ldr	r3, [r3, #12]
 8010476:	683a      	ldr	r2, [r7, #0]
 8010478:	429a      	cmp	r2, r3
 801047a:	d908      	bls.n	801048e <f_lseek+0x204>
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	7d1b      	ldrb	r3, [r3, #20]
 8010480:	f003 0302 	and.w	r3, r3, #2
 8010484:	2b00      	cmp	r3, #0
 8010486:	d102      	bne.n	801048e <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	68db      	ldr	r3, [r3, #12]
 801048c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	699b      	ldr	r3, [r3, #24]
 8010492:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010494:	2300      	movs	r3, #0
 8010496:	637b      	str	r3, [r7, #52]	@ 0x34
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801049c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	f000 80a7 	beq.w	80105f4 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80104a6:	68bb      	ldr	r3, [r7, #8]
 80104a8:	895b      	ldrh	r3, [r3, #10]
 80104aa:	025b      	lsls	r3, r3, #9
 80104ac:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80104ae:	6a3b      	ldr	r3, [r7, #32]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d01b      	beq.n	80104ec <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80104b4:	683b      	ldr	r3, [r7, #0]
 80104b6:	1e5a      	subs	r2, r3, #1
 80104b8:	69fb      	ldr	r3, [r7, #28]
 80104ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80104be:	6a3b      	ldr	r3, [r7, #32]
 80104c0:	1e59      	subs	r1, r3, #1
 80104c2:	69fb      	ldr	r3, [r7, #28]
 80104c4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80104c8:	429a      	cmp	r2, r3
 80104ca:	d30f      	bcc.n	80104ec <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80104cc:	6a3b      	ldr	r3, [r7, #32]
 80104ce:	1e5a      	subs	r2, r3, #1
 80104d0:	69fb      	ldr	r3, [r7, #28]
 80104d2:	425b      	negs	r3, r3
 80104d4:	401a      	ands	r2, r3
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	699b      	ldr	r3, [r3, #24]
 80104de:	683a      	ldr	r2, [r7, #0]
 80104e0:	1ad3      	subs	r3, r2, r3
 80104e2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	69db      	ldr	r3, [r3, #28]
 80104e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80104ea:	e022      	b.n	8010532 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	689b      	ldr	r3, [r3, #8]
 80104f0:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80104f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d119      	bne.n	801052c <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2100      	movs	r1, #0
 80104fc:	4618      	mov	r0, r3
 80104fe:	f7fe fba2 	bl	800ec46 <create_chain>
 8010502:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010506:	2b01      	cmp	r3, #1
 8010508:	d104      	bne.n	8010514 <f_lseek+0x28a>
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	2202      	movs	r2, #2
 801050e:	755a      	strb	r2, [r3, #21]
 8010510:	2302      	movs	r3, #2
 8010512:	e0bf      	b.n	8010694 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010516:	f1b3 3fff 	cmp.w	r3, #4294967295
 801051a:	d104      	bne.n	8010526 <f_lseek+0x29c>
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2201      	movs	r2, #1
 8010520:	755a      	strb	r2, [r3, #21]
 8010522:	2301      	movs	r3, #1
 8010524:	e0b6      	b.n	8010694 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801052a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010530:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8010532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010534:	2b00      	cmp	r3, #0
 8010536:	d05d      	beq.n	80105f4 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8010538:	e03a      	b.n	80105b0 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 801053a:	683a      	ldr	r2, [r7, #0]
 801053c:	69fb      	ldr	r3, [r7, #28]
 801053e:	1ad3      	subs	r3, r2, r3
 8010540:	603b      	str	r3, [r7, #0]
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	699a      	ldr	r2, [r3, #24]
 8010546:	69fb      	ldr	r3, [r7, #28]
 8010548:	441a      	add	r2, r3
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	7d1b      	ldrb	r3, [r3, #20]
 8010552:	f003 0302 	and.w	r3, r3, #2
 8010556:	2b00      	cmp	r3, #0
 8010558:	d00b      	beq.n	8010572 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801055e:	4618      	mov	r0, r3
 8010560:	f7fe fb71 	bl	800ec46 <create_chain>
 8010564:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8010566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010568:	2b00      	cmp	r3, #0
 801056a:	d108      	bne.n	801057e <f_lseek+0x2f4>
							ofs = 0; break;
 801056c:	2300      	movs	r3, #0
 801056e:	603b      	str	r3, [r7, #0]
 8010570:	e022      	b.n	80105b8 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010576:	4618      	mov	r0, r3
 8010578:	f7fe f96f 	bl	800e85a <get_fat>
 801057c:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801057e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010584:	d104      	bne.n	8010590 <f_lseek+0x306>
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	2201      	movs	r2, #1
 801058a:	755a      	strb	r2, [r3, #21]
 801058c:	2301      	movs	r3, #1
 801058e:	e081      	b.n	8010694 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8010590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010592:	2b01      	cmp	r3, #1
 8010594:	d904      	bls.n	80105a0 <f_lseek+0x316>
 8010596:	68bb      	ldr	r3, [r7, #8]
 8010598:	695b      	ldr	r3, [r3, #20]
 801059a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801059c:	429a      	cmp	r2, r3
 801059e:	d304      	bcc.n	80105aa <f_lseek+0x320>
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	2202      	movs	r2, #2
 80105a4:	755a      	strb	r2, [r3, #21]
 80105a6:	2302      	movs	r3, #2
 80105a8:	e074      	b.n	8010694 <f_lseek+0x40a>
					fp->clust = clst;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80105ae:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80105b0:	683a      	ldr	r2, [r7, #0]
 80105b2:	69fb      	ldr	r3, [r7, #28]
 80105b4:	429a      	cmp	r2, r3
 80105b6:	d8c0      	bhi.n	801053a <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	699a      	ldr	r2, [r3, #24]
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	441a      	add	r2, r3
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80105c4:	683b      	ldr	r3, [r7, #0]
 80105c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d012      	beq.n	80105f4 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80105ce:	68bb      	ldr	r3, [r7, #8]
 80105d0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80105d2:	4618      	mov	r0, r3
 80105d4:	f7fe f922 	bl	800e81c <clust2sect>
 80105d8:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80105da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d104      	bne.n	80105ea <f_lseek+0x360>
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2202      	movs	r2, #2
 80105e4:	755a      	strb	r2, [r3, #21]
 80105e6:	2302      	movs	r3, #2
 80105e8:	e054      	b.n	8010694 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 80105ea:	683b      	ldr	r3, [r7, #0]
 80105ec:	0a5b      	lsrs	r3, r3, #9
 80105ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80105f0:	4413      	add	r3, r2
 80105f2:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	699a      	ldr	r2, [r3, #24]
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	68db      	ldr	r3, [r3, #12]
 80105fc:	429a      	cmp	r2, r3
 80105fe:	d90a      	bls.n	8010616 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	699a      	ldr	r2, [r3, #24]
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	7d1b      	ldrb	r3, [r3, #20]
 801060c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010610:	b2da      	uxtb	r2, r3
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	699b      	ldr	r3, [r3, #24]
 801061a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801061e:	2b00      	cmp	r3, #0
 8010620:	d036      	beq.n	8010690 <f_lseek+0x406>
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	6a1b      	ldr	r3, [r3, #32]
 8010626:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010628:	429a      	cmp	r2, r3
 801062a:	d031      	beq.n	8010690 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	7d1b      	ldrb	r3, [r3, #20]
 8010630:	b25b      	sxtb	r3, r3
 8010632:	2b00      	cmp	r3, #0
 8010634:	da18      	bge.n	8010668 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010636:	68bb      	ldr	r3, [r7, #8]
 8010638:	7858      	ldrb	r0, [r3, #1]
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	6a1a      	ldr	r2, [r3, #32]
 8010644:	2301      	movs	r3, #1
 8010646:	f7fd fd5f 	bl	800e108 <disk_write>
 801064a:	4603      	mov	r3, r0
 801064c:	2b00      	cmp	r3, #0
 801064e:	d004      	beq.n	801065a <f_lseek+0x3d0>
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2201      	movs	r2, #1
 8010654:	755a      	strb	r2, [r3, #21]
 8010656:	2301      	movs	r3, #1
 8010658:	e01c      	b.n	8010694 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	7d1b      	ldrb	r3, [r3, #20]
 801065e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010662:	b2da      	uxtb	r2, r3
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010668:	68bb      	ldr	r3, [r7, #8]
 801066a:	7858      	ldrb	r0, [r3, #1]
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010672:	2301      	movs	r3, #1
 8010674:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010676:	f7fd fd27 	bl	800e0c8 <disk_read>
 801067a:	4603      	mov	r3, r0
 801067c:	2b00      	cmp	r3, #0
 801067e:	d004      	beq.n	801068a <f_lseek+0x400>
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	2201      	movs	r2, #1
 8010684:	755a      	strb	r2, [r3, #21]
 8010686:	2301      	movs	r3, #1
 8010688:	e004      	b.n	8010694 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801068e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8010690:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8010694:	4618      	mov	r0, r3
 8010696:	3740      	adds	r7, #64	@ 0x40
 8010698:	46bd      	mov	sp, r7
 801069a:	bd80      	pop	{r7, pc}

0801069c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801069c:	b480      	push	{r7}
 801069e:	b087      	sub	sp, #28
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	60f8      	str	r0, [r7, #12]
 80106a4:	60b9      	str	r1, [r7, #8]
 80106a6:	4613      	mov	r3, r2
 80106a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80106aa:	2301      	movs	r3, #1
 80106ac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80106ae:	2300      	movs	r3, #0
 80106b0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80106b2:	4b1f      	ldr	r3, [pc, #124]	@ (8010730 <FATFS_LinkDriverEx+0x94>)
 80106b4:	7a5b      	ldrb	r3, [r3, #9]
 80106b6:	b2db      	uxtb	r3, r3
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d131      	bne.n	8010720 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80106bc:	4b1c      	ldr	r3, [pc, #112]	@ (8010730 <FATFS_LinkDriverEx+0x94>)
 80106be:	7a5b      	ldrb	r3, [r3, #9]
 80106c0:	b2db      	uxtb	r3, r3
 80106c2:	461a      	mov	r2, r3
 80106c4:	4b1a      	ldr	r3, [pc, #104]	@ (8010730 <FATFS_LinkDriverEx+0x94>)
 80106c6:	2100      	movs	r1, #0
 80106c8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80106ca:	4b19      	ldr	r3, [pc, #100]	@ (8010730 <FATFS_LinkDriverEx+0x94>)
 80106cc:	7a5b      	ldrb	r3, [r3, #9]
 80106ce:	b2db      	uxtb	r3, r3
 80106d0:	4a17      	ldr	r2, [pc, #92]	@ (8010730 <FATFS_LinkDriverEx+0x94>)
 80106d2:	009b      	lsls	r3, r3, #2
 80106d4:	4413      	add	r3, r2
 80106d6:	68fa      	ldr	r2, [r7, #12]
 80106d8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80106da:	4b15      	ldr	r3, [pc, #84]	@ (8010730 <FATFS_LinkDriverEx+0x94>)
 80106dc:	7a5b      	ldrb	r3, [r3, #9]
 80106de:	b2db      	uxtb	r3, r3
 80106e0:	461a      	mov	r2, r3
 80106e2:	4b13      	ldr	r3, [pc, #76]	@ (8010730 <FATFS_LinkDriverEx+0x94>)
 80106e4:	4413      	add	r3, r2
 80106e6:	79fa      	ldrb	r2, [r7, #7]
 80106e8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80106ea:	4b11      	ldr	r3, [pc, #68]	@ (8010730 <FATFS_LinkDriverEx+0x94>)
 80106ec:	7a5b      	ldrb	r3, [r3, #9]
 80106ee:	b2db      	uxtb	r3, r3
 80106f0:	1c5a      	adds	r2, r3, #1
 80106f2:	b2d1      	uxtb	r1, r2
 80106f4:	4a0e      	ldr	r2, [pc, #56]	@ (8010730 <FATFS_LinkDriverEx+0x94>)
 80106f6:	7251      	strb	r1, [r2, #9]
 80106f8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80106fa:	7dbb      	ldrb	r3, [r7, #22]
 80106fc:	3330      	adds	r3, #48	@ 0x30
 80106fe:	b2da      	uxtb	r2, r3
 8010700:	68bb      	ldr	r3, [r7, #8]
 8010702:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010704:	68bb      	ldr	r3, [r7, #8]
 8010706:	3301      	adds	r3, #1
 8010708:	223a      	movs	r2, #58	@ 0x3a
 801070a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	3302      	adds	r3, #2
 8010710:	222f      	movs	r2, #47	@ 0x2f
 8010712:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010714:	68bb      	ldr	r3, [r7, #8]
 8010716:	3303      	adds	r3, #3
 8010718:	2200      	movs	r2, #0
 801071a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801071c:	2300      	movs	r3, #0
 801071e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010720:	7dfb      	ldrb	r3, [r7, #23]
}
 8010722:	4618      	mov	r0, r3
 8010724:	371c      	adds	r7, #28
 8010726:	46bd      	mov	sp, r7
 8010728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072c:	4770      	bx	lr
 801072e:	bf00      	nop
 8010730:	20001954 	.word	0x20001954

08010734 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b082      	sub	sp, #8
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
 801073c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801073e:	2200      	movs	r2, #0
 8010740:	6839      	ldr	r1, [r7, #0]
 8010742:	6878      	ldr	r0, [r7, #4]
 8010744:	f7ff ffaa 	bl	801069c <FATFS_LinkDriverEx>
 8010748:	4603      	mov	r3, r0
}
 801074a:	4618      	mov	r0, r3
 801074c:	3708      	adds	r7, #8
 801074e:	46bd      	mov	sp, r7
 8010750:	bd80      	pop	{r7, pc}
	...

08010754 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010754:	b580      	push	{r7, lr}
 8010756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010758:	2201      	movs	r2, #1
 801075a:	490e      	ldr	r1, [pc, #56]	@ (8010794 <MX_USB_HOST_Init+0x40>)
 801075c:	480e      	ldr	r0, [pc, #56]	@ (8010798 <MX_USB_HOST_Init+0x44>)
 801075e:	f7fb ff8e 	bl	800c67e <USBH_Init>
 8010762:	4603      	mov	r3, r0
 8010764:	2b00      	cmp	r3, #0
 8010766:	d001      	beq.n	801076c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010768:	f7f1 f9c4 	bl	8001af4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 801076c:	490b      	ldr	r1, [pc, #44]	@ (801079c <MX_USB_HOST_Init+0x48>)
 801076e:	480a      	ldr	r0, [pc, #40]	@ (8010798 <MX_USB_HOST_Init+0x44>)
 8010770:	f7fc f832 	bl	800c7d8 <USBH_RegisterClass>
 8010774:	4603      	mov	r3, r0
 8010776:	2b00      	cmp	r3, #0
 8010778:	d001      	beq.n	801077e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801077a:	f7f1 f9bb 	bl	8001af4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801077e:	4806      	ldr	r0, [pc, #24]	@ (8010798 <MX_USB_HOST_Init+0x44>)
 8010780:	f7fc f8b6 	bl	800c8f0 <USBH_Start>
 8010784:	4603      	mov	r3, r0
 8010786:	2b00      	cmp	r3, #0
 8010788:	d001      	beq.n	801078e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801078a:	f7f1 f9b3 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801078e:	bf00      	nop
 8010790:	bd80      	pop	{r7, pc}
 8010792:	bf00      	nop
 8010794:	080107b5 	.word	0x080107b5
 8010798:	20001960 	.word	0x20001960
 801079c:	20000010 	.word	0x20000010

080107a0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80107a4:	4802      	ldr	r0, [pc, #8]	@ (80107b0 <MX_USB_HOST_Process+0x10>)
 80107a6:	f7fc f8b3 	bl	800c910 <USBH_Process>
}
 80107aa:	bf00      	nop
 80107ac:	bd80      	pop	{r7, pc}
 80107ae:	bf00      	nop
 80107b0:	20001960 	.word	0x20001960

080107b4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80107b4:	b480      	push	{r7}
 80107b6:	b083      	sub	sp, #12
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
 80107bc:	460b      	mov	r3, r1
 80107be:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80107c0:	78fb      	ldrb	r3, [r7, #3]
 80107c2:	3b01      	subs	r3, #1
 80107c4:	2b04      	cmp	r3, #4
 80107c6:	d819      	bhi.n	80107fc <USBH_UserProcess+0x48>
 80107c8:	a201      	add	r2, pc, #4	@ (adr r2, 80107d0 <USBH_UserProcess+0x1c>)
 80107ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107ce:	bf00      	nop
 80107d0:	080107fd 	.word	0x080107fd
 80107d4:	080107ed 	.word	0x080107ed
 80107d8:	080107fd 	.word	0x080107fd
 80107dc:	080107f5 	.word	0x080107f5
 80107e0:	080107e5 	.word	0x080107e5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80107e4:	4b09      	ldr	r3, [pc, #36]	@ (801080c <USBH_UserProcess+0x58>)
 80107e6:	2203      	movs	r2, #3
 80107e8:	701a      	strb	r2, [r3, #0]
  break;
 80107ea:	e008      	b.n	80107fe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80107ec:	4b07      	ldr	r3, [pc, #28]	@ (801080c <USBH_UserProcess+0x58>)
 80107ee:	2202      	movs	r2, #2
 80107f0:	701a      	strb	r2, [r3, #0]
  break;
 80107f2:	e004      	b.n	80107fe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80107f4:	4b05      	ldr	r3, [pc, #20]	@ (801080c <USBH_UserProcess+0x58>)
 80107f6:	2201      	movs	r2, #1
 80107f8:	701a      	strb	r2, [r3, #0]
  break;
 80107fa:	e000      	b.n	80107fe <USBH_UserProcess+0x4a>

  default:
  break;
 80107fc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80107fe:	bf00      	nop
 8010800:	370c      	adds	r7, #12
 8010802:	46bd      	mov	sp, r7
 8010804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010808:	4770      	bx	lr
 801080a:	bf00      	nop
 801080c:	20001d38 	.word	0x20001d38

08010810 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b08a      	sub	sp, #40	@ 0x28
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010818:	f107 0314 	add.w	r3, r7, #20
 801081c:	2200      	movs	r2, #0
 801081e:	601a      	str	r2, [r3, #0]
 8010820:	605a      	str	r2, [r3, #4]
 8010822:	609a      	str	r2, [r3, #8]
 8010824:	60da      	str	r2, [r3, #12]
 8010826:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010830:	d147      	bne.n	80108c2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010832:	2300      	movs	r3, #0
 8010834:	613b      	str	r3, [r7, #16]
 8010836:	4b25      	ldr	r3, [pc, #148]	@ (80108cc <HAL_HCD_MspInit+0xbc>)
 8010838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801083a:	4a24      	ldr	r2, [pc, #144]	@ (80108cc <HAL_HCD_MspInit+0xbc>)
 801083c:	f043 0301 	orr.w	r3, r3, #1
 8010840:	6313      	str	r3, [r2, #48]	@ 0x30
 8010842:	4b22      	ldr	r3, [pc, #136]	@ (80108cc <HAL_HCD_MspInit+0xbc>)
 8010844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010846:	f003 0301 	and.w	r3, r3, #1
 801084a:	613b      	str	r3, [r7, #16]
 801084c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801084e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010854:	2300      	movs	r3, #0
 8010856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010858:	2300      	movs	r3, #0
 801085a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801085c:	f107 0314 	add.w	r3, r7, #20
 8010860:	4619      	mov	r1, r3
 8010862:	481b      	ldr	r0, [pc, #108]	@ (80108d0 <HAL_HCD_MspInit+0xc0>)
 8010864:	f7f2 fa82 	bl	8002d6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010868:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801086c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801086e:	2302      	movs	r3, #2
 8010870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010872:	2300      	movs	r3, #0
 8010874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010876:	2303      	movs	r3, #3
 8010878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801087a:	230a      	movs	r3, #10
 801087c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801087e:	f107 0314 	add.w	r3, r7, #20
 8010882:	4619      	mov	r1, r3
 8010884:	4812      	ldr	r0, [pc, #72]	@ (80108d0 <HAL_HCD_MspInit+0xc0>)
 8010886:	f7f2 fa71 	bl	8002d6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801088a:	4b10      	ldr	r3, [pc, #64]	@ (80108cc <HAL_HCD_MspInit+0xbc>)
 801088c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801088e:	4a0f      	ldr	r2, [pc, #60]	@ (80108cc <HAL_HCD_MspInit+0xbc>)
 8010890:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010894:	6353      	str	r3, [r2, #52]	@ 0x34
 8010896:	2300      	movs	r3, #0
 8010898:	60fb      	str	r3, [r7, #12]
 801089a:	4b0c      	ldr	r3, [pc, #48]	@ (80108cc <HAL_HCD_MspInit+0xbc>)
 801089c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801089e:	4a0b      	ldr	r2, [pc, #44]	@ (80108cc <HAL_HCD_MspInit+0xbc>)
 80108a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80108a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80108a6:	4b09      	ldr	r3, [pc, #36]	@ (80108cc <HAL_HCD_MspInit+0xbc>)
 80108a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80108aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80108ae:	60fb      	str	r3, [r7, #12]
 80108b0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80108b2:	2200      	movs	r2, #0
 80108b4:	2100      	movs	r1, #0
 80108b6:	2043      	movs	r0, #67	@ 0x43
 80108b8:	f7f1 fe1f 	bl	80024fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80108bc:	2043      	movs	r0, #67	@ 0x43
 80108be:	f7f1 fe38 	bl	8002532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80108c2:	bf00      	nop
 80108c4:	3728      	adds	r7, #40	@ 0x28
 80108c6:	46bd      	mov	sp, r7
 80108c8:	bd80      	pop	{r7, pc}
 80108ca:	bf00      	nop
 80108cc:	40023800 	.word	0x40023800
 80108d0:	40020000 	.word	0x40020000

080108d4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b082      	sub	sp, #8
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80108e2:	4618      	mov	r0, r3
 80108e4:	f7fc fbeb 	bl	800d0be <USBH_LL_IncTimer>
}
 80108e8:	bf00      	nop
 80108ea:	3708      	adds	r7, #8
 80108ec:	46bd      	mov	sp, r7
 80108ee:	bd80      	pop	{r7, pc}

080108f0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b082      	sub	sp, #8
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80108fe:	4618      	mov	r0, r3
 8010900:	f7fc fc23 	bl	800d14a <USBH_LL_Connect>
}
 8010904:	bf00      	nop
 8010906:	3708      	adds	r7, #8
 8010908:	46bd      	mov	sp, r7
 801090a:	bd80      	pop	{r7, pc}

0801090c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801090c:	b580      	push	{r7, lr}
 801090e:	b082      	sub	sp, #8
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801091a:	4618      	mov	r0, r3
 801091c:	f7fc fc2c 	bl	800d178 <USBH_LL_Disconnect>
}
 8010920:	bf00      	nop
 8010922:	3708      	adds	r7, #8
 8010924:	46bd      	mov	sp, r7
 8010926:	bd80      	pop	{r7, pc}

08010928 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010928:	b480      	push	{r7}
 801092a:	b083      	sub	sp, #12
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
 8010930:	460b      	mov	r3, r1
 8010932:	70fb      	strb	r3, [r7, #3]
 8010934:	4613      	mov	r3, r2
 8010936:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8010938:	bf00      	nop
 801093a:	370c      	adds	r7, #12
 801093c:	46bd      	mov	sp, r7
 801093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010942:	4770      	bx	lr

08010944 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b082      	sub	sp, #8
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010952:	4618      	mov	r0, r3
 8010954:	f7fc fbdd 	bl	800d112 <USBH_LL_PortEnabled>
}
 8010958:	bf00      	nop
 801095a:	3708      	adds	r7, #8
 801095c:	46bd      	mov	sp, r7
 801095e:	bd80      	pop	{r7, pc}

08010960 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b082      	sub	sp, #8
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801096e:	4618      	mov	r0, r3
 8010970:	f7fc fbdd 	bl	800d12e <USBH_LL_PortDisabled>
}
 8010974:	bf00      	nop
 8010976:	3708      	adds	r7, #8
 8010978:	46bd      	mov	sp, r7
 801097a:	bd80      	pop	{r7, pc}

0801097c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b082      	sub	sp, #8
 8010980:	af00      	add	r7, sp, #0
 8010982:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 801098a:	2b01      	cmp	r3, #1
 801098c:	d12a      	bne.n	80109e4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801098e:	4a18      	ldr	r2, [pc, #96]	@ (80109f0 <USBH_LL_Init+0x74>)
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	4a15      	ldr	r2, [pc, #84]	@ (80109f0 <USBH_LL_Init+0x74>)
 801099a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801099e:	4b14      	ldr	r3, [pc, #80]	@ (80109f0 <USBH_LL_Init+0x74>)
 80109a0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80109a4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80109a6:	4b12      	ldr	r3, [pc, #72]	@ (80109f0 <USBH_LL_Init+0x74>)
 80109a8:	2208      	movs	r2, #8
 80109aa:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80109ac:	4b10      	ldr	r3, [pc, #64]	@ (80109f0 <USBH_LL_Init+0x74>)
 80109ae:	2201      	movs	r2, #1
 80109b0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80109b2:	4b0f      	ldr	r3, [pc, #60]	@ (80109f0 <USBH_LL_Init+0x74>)
 80109b4:	2200      	movs	r2, #0
 80109b6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80109b8:	4b0d      	ldr	r3, [pc, #52]	@ (80109f0 <USBH_LL_Init+0x74>)
 80109ba:	2202      	movs	r2, #2
 80109bc:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80109be:	4b0c      	ldr	r3, [pc, #48]	@ (80109f0 <USBH_LL_Init+0x74>)
 80109c0:	2200      	movs	r2, #0
 80109c2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80109c4:	480a      	ldr	r0, [pc, #40]	@ (80109f0 <USBH_LL_Init+0x74>)
 80109c6:	f7f2 fb9e 	bl	8003106 <HAL_HCD_Init>
 80109ca:	4603      	mov	r3, r0
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d001      	beq.n	80109d4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80109d0:	f7f1 f890 	bl	8001af4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80109d4:	4806      	ldr	r0, [pc, #24]	@ (80109f0 <USBH_LL_Init+0x74>)
 80109d6:	f7f2 ffff 	bl	80039d8 <HAL_HCD_GetCurrentFrame>
 80109da:	4603      	mov	r3, r0
 80109dc:	4619      	mov	r1, r3
 80109de:	6878      	ldr	r0, [r7, #4]
 80109e0:	f7fc fb5e 	bl	800d0a0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80109e4:	2300      	movs	r3, #0
}
 80109e6:	4618      	mov	r0, r3
 80109e8:	3708      	adds	r7, #8
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd80      	pop	{r7, pc}
 80109ee:	bf00      	nop
 80109f0:	20001d3c 	.word	0x20001d3c

080109f4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b084      	sub	sp, #16
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80109fc:	2300      	movs	r3, #0
 80109fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010a00:	2300      	movs	r3, #0
 8010a02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	f7f2 ff6c 	bl	80038e8 <HAL_HCD_Start>
 8010a10:	4603      	mov	r3, r0
 8010a12:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010a14:	7bfb      	ldrb	r3, [r7, #15]
 8010a16:	4618      	mov	r0, r3
 8010a18:	f000 f988 	bl	8010d2c <USBH_Get_USB_Status>
 8010a1c:	4603      	mov	r3, r0
 8010a1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a20:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a22:	4618      	mov	r0, r3
 8010a24:	3710      	adds	r7, #16
 8010a26:	46bd      	mov	sp, r7
 8010a28:	bd80      	pop	{r7, pc}

08010a2a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010a2a:	b580      	push	{r7, lr}
 8010a2c:	b084      	sub	sp, #16
 8010a2e:	af00      	add	r7, sp, #0
 8010a30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a32:	2300      	movs	r3, #0
 8010a34:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010a36:	2300      	movs	r3, #0
 8010a38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010a40:	4618      	mov	r0, r3
 8010a42:	f7f2 ff74 	bl	800392e <HAL_HCD_Stop>
 8010a46:	4603      	mov	r3, r0
 8010a48:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010a4a:	7bfb      	ldrb	r3, [r7, #15]
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f000 f96d 	bl	8010d2c <USBH_Get_USB_Status>
 8010a52:	4603      	mov	r3, r0
 8010a54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a56:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a58:	4618      	mov	r0, r3
 8010a5a:	3710      	adds	r7, #16
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	bd80      	pop	{r7, pc}

08010a60 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b084      	sub	sp, #16
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010a68:	2301      	movs	r3, #1
 8010a6a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010a72:	4618      	mov	r0, r3
 8010a74:	f7f2 ffbe 	bl	80039f4 <HAL_HCD_GetCurrentSpeed>
 8010a78:	4603      	mov	r3, r0
 8010a7a:	2b02      	cmp	r3, #2
 8010a7c:	d00c      	beq.n	8010a98 <USBH_LL_GetSpeed+0x38>
 8010a7e:	2b02      	cmp	r3, #2
 8010a80:	d80d      	bhi.n	8010a9e <USBH_LL_GetSpeed+0x3e>
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d002      	beq.n	8010a8c <USBH_LL_GetSpeed+0x2c>
 8010a86:	2b01      	cmp	r3, #1
 8010a88:	d003      	beq.n	8010a92 <USBH_LL_GetSpeed+0x32>
 8010a8a:	e008      	b.n	8010a9e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	73fb      	strb	r3, [r7, #15]
    break;
 8010a90:	e008      	b.n	8010aa4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8010a92:	2301      	movs	r3, #1
 8010a94:	73fb      	strb	r3, [r7, #15]
    break;
 8010a96:	e005      	b.n	8010aa4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010a98:	2302      	movs	r3, #2
 8010a9a:	73fb      	strb	r3, [r7, #15]
    break;
 8010a9c:	e002      	b.n	8010aa4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010a9e:	2301      	movs	r3, #1
 8010aa0:	73fb      	strb	r3, [r7, #15]
    break;
 8010aa2:	bf00      	nop
  }
  return  speed;
 8010aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	3710      	adds	r7, #16
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}

08010aae <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010aae:	b580      	push	{r7, lr}
 8010ab0:	b084      	sub	sp, #16
 8010ab2:	af00      	add	r7, sp, #0
 8010ab4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010aba:	2300      	movs	r3, #0
 8010abc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	f7f2 ff4f 	bl	8003968 <HAL_HCD_ResetPort>
 8010aca:	4603      	mov	r3, r0
 8010acc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010ace:	7bfb      	ldrb	r3, [r7, #15]
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f000 f92b 	bl	8010d2c <USBH_Get_USB_Status>
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ada:	7bbb      	ldrb	r3, [r7, #14]
}
 8010adc:	4618      	mov	r0, r3
 8010ade:	3710      	adds	r7, #16
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}

08010ae4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b082      	sub	sp, #8
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]
 8010aec:	460b      	mov	r3, r1
 8010aee:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010af6:	78fa      	ldrb	r2, [r7, #3]
 8010af8:	4611      	mov	r1, r2
 8010afa:	4618      	mov	r0, r3
 8010afc:	f7f2 ff57 	bl	80039ae <HAL_HCD_HC_GetXferCount>
 8010b00:	4603      	mov	r3, r0
}
 8010b02:	4618      	mov	r0, r3
 8010b04:	3708      	adds	r7, #8
 8010b06:	46bd      	mov	sp, r7
 8010b08:	bd80      	pop	{r7, pc}

08010b0a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010b0a:	b590      	push	{r4, r7, lr}
 8010b0c:	b089      	sub	sp, #36	@ 0x24
 8010b0e:	af04      	add	r7, sp, #16
 8010b10:	6078      	str	r0, [r7, #4]
 8010b12:	4608      	mov	r0, r1
 8010b14:	4611      	mov	r1, r2
 8010b16:	461a      	mov	r2, r3
 8010b18:	4603      	mov	r3, r0
 8010b1a:	70fb      	strb	r3, [r7, #3]
 8010b1c:	460b      	mov	r3, r1
 8010b1e:	70bb      	strb	r3, [r7, #2]
 8010b20:	4613      	mov	r3, r2
 8010b22:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b24:	2300      	movs	r3, #0
 8010b26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010b28:	2300      	movs	r3, #0
 8010b2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8010b32:	787c      	ldrb	r4, [r7, #1]
 8010b34:	78ba      	ldrb	r2, [r7, #2]
 8010b36:	78f9      	ldrb	r1, [r7, #3]
 8010b38:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010b3a:	9302      	str	r3, [sp, #8]
 8010b3c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010b40:	9301      	str	r3, [sp, #4]
 8010b42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010b46:	9300      	str	r3, [sp, #0]
 8010b48:	4623      	mov	r3, r4
 8010b4a:	f7f2 fb43 	bl	80031d4 <HAL_HCD_HC_Init>
 8010b4e:	4603      	mov	r3, r0
 8010b50:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010b52:	7bfb      	ldrb	r3, [r7, #15]
 8010b54:	4618      	mov	r0, r3
 8010b56:	f000 f8e9 	bl	8010d2c <USBH_Get_USB_Status>
 8010b5a:	4603      	mov	r3, r0
 8010b5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b60:	4618      	mov	r0, r3
 8010b62:	3714      	adds	r7, #20
 8010b64:	46bd      	mov	sp, r7
 8010b66:	bd90      	pop	{r4, r7, pc}

08010b68 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b084      	sub	sp, #16
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
 8010b70:	460b      	mov	r3, r1
 8010b72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b74:	2300      	movs	r3, #0
 8010b76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010b78:	2300      	movs	r3, #0
 8010b7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010b82:	78fa      	ldrb	r2, [r7, #3]
 8010b84:	4611      	mov	r1, r2
 8010b86:	4618      	mov	r0, r3
 8010b88:	f7f2 fbdc 	bl	8003344 <HAL_HCD_HC_Halt>
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010b90:	7bfb      	ldrb	r3, [r7, #15]
 8010b92:	4618      	mov	r0, r3
 8010b94:	f000 f8ca 	bl	8010d2c <USBH_Get_USB_Status>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	3710      	adds	r7, #16
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	bd80      	pop	{r7, pc}

08010ba6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010ba6:	b590      	push	{r4, r7, lr}
 8010ba8:	b089      	sub	sp, #36	@ 0x24
 8010baa:	af04      	add	r7, sp, #16
 8010bac:	6078      	str	r0, [r7, #4]
 8010bae:	4608      	mov	r0, r1
 8010bb0:	4611      	mov	r1, r2
 8010bb2:	461a      	mov	r2, r3
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	70fb      	strb	r3, [r7, #3]
 8010bb8:	460b      	mov	r3, r1
 8010bba:	70bb      	strb	r3, [r7, #2]
 8010bbc:	4613      	mov	r3, r2
 8010bbe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8010bce:	787c      	ldrb	r4, [r7, #1]
 8010bd0:	78ba      	ldrb	r2, [r7, #2]
 8010bd2:	78f9      	ldrb	r1, [r7, #3]
 8010bd4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010bd8:	9303      	str	r3, [sp, #12]
 8010bda:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010bdc:	9302      	str	r3, [sp, #8]
 8010bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010be0:	9301      	str	r3, [sp, #4]
 8010be2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010be6:	9300      	str	r3, [sp, #0]
 8010be8:	4623      	mov	r3, r4
 8010bea:	f7f2 fbcf 	bl	800338c <HAL_HCD_HC_SubmitRequest>
 8010bee:	4603      	mov	r3, r0
 8010bf0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8010bf2:	7bfb      	ldrb	r3, [r7, #15]
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	f000 f899 	bl	8010d2c <USBH_Get_USB_Status>
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010bfe:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c00:	4618      	mov	r0, r3
 8010c02:	3714      	adds	r7, #20
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd90      	pop	{r4, r7, pc}

08010c08 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b082      	sub	sp, #8
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
 8010c10:	460b      	mov	r3, r1
 8010c12:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010c1a:	78fa      	ldrb	r2, [r7, #3]
 8010c1c:	4611      	mov	r1, r2
 8010c1e:	4618      	mov	r0, r3
 8010c20:	f7f2 feb0 	bl	8003984 <HAL_HCD_HC_GetURBState>
 8010c24:	4603      	mov	r3, r0
}
 8010c26:	4618      	mov	r0, r3
 8010c28:	3708      	adds	r7, #8
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	bd80      	pop	{r7, pc}

08010c2e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010c2e:	b580      	push	{r7, lr}
 8010c30:	b082      	sub	sp, #8
 8010c32:	af00      	add	r7, sp, #0
 8010c34:	6078      	str	r0, [r7, #4]
 8010c36:	460b      	mov	r3, r1
 8010c38:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 8010c3a:	20c8      	movs	r0, #200	@ 0xc8
 8010c3c:	f7f1 fb5e 	bl	80022fc <HAL_Delay>
  return USBH_OK;
 8010c40:	2300      	movs	r3, #0
}
 8010c42:	4618      	mov	r0, r3
 8010c44:	3708      	adds	r7, #8
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bd80      	pop	{r7, pc}

08010c4a <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010c4a:	b480      	push	{r7}
 8010c4c:	b085      	sub	sp, #20
 8010c4e:	af00      	add	r7, sp, #0
 8010c50:	6078      	str	r0, [r7, #4]
 8010c52:	460b      	mov	r3, r1
 8010c54:	70fb      	strb	r3, [r7, #3]
 8010c56:	4613      	mov	r3, r2
 8010c58:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010c60:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010c62:	78fa      	ldrb	r2, [r7, #3]
 8010c64:	68f9      	ldr	r1, [r7, #12]
 8010c66:	4613      	mov	r3, r2
 8010c68:	011b      	lsls	r3, r3, #4
 8010c6a:	1a9b      	subs	r3, r3, r2
 8010c6c:	009b      	lsls	r3, r3, #2
 8010c6e:	440b      	add	r3, r1
 8010c70:	3317      	adds	r3, #23
 8010c72:	781b      	ldrb	r3, [r3, #0]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d00a      	beq.n	8010c8e <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010c78:	78fa      	ldrb	r2, [r7, #3]
 8010c7a:	68f9      	ldr	r1, [r7, #12]
 8010c7c:	4613      	mov	r3, r2
 8010c7e:	011b      	lsls	r3, r3, #4
 8010c80:	1a9b      	subs	r3, r3, r2
 8010c82:	009b      	lsls	r3, r3, #2
 8010c84:	440b      	add	r3, r1
 8010c86:	333c      	adds	r3, #60	@ 0x3c
 8010c88:	78ba      	ldrb	r2, [r7, #2]
 8010c8a:	701a      	strb	r2, [r3, #0]
 8010c8c:	e009      	b.n	8010ca2 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010c8e:	78fa      	ldrb	r2, [r7, #3]
 8010c90:	68f9      	ldr	r1, [r7, #12]
 8010c92:	4613      	mov	r3, r2
 8010c94:	011b      	lsls	r3, r3, #4
 8010c96:	1a9b      	subs	r3, r3, r2
 8010c98:	009b      	lsls	r3, r3, #2
 8010c9a:	440b      	add	r3, r1
 8010c9c:	333d      	adds	r3, #61	@ 0x3d
 8010c9e:	78ba      	ldrb	r2, [r7, #2]
 8010ca0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010ca2:	2300      	movs	r3, #0
}
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	3714      	adds	r7, #20
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cae:	4770      	bx	lr

08010cb0 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010cb0:	b480      	push	{r7}
 8010cb2:	b085      	sub	sp, #20
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
 8010cb8:	460b      	mov	r3, r1
 8010cba:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010cc6:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8010cc8:	78fa      	ldrb	r2, [r7, #3]
 8010cca:	68b9      	ldr	r1, [r7, #8]
 8010ccc:	4613      	mov	r3, r2
 8010cce:	011b      	lsls	r3, r3, #4
 8010cd0:	1a9b      	subs	r3, r3, r2
 8010cd2:	009b      	lsls	r3, r3, #2
 8010cd4:	440b      	add	r3, r1
 8010cd6:	3317      	adds	r3, #23
 8010cd8:	781b      	ldrb	r3, [r3, #0]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d00a      	beq.n	8010cf4 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8010cde:	78fa      	ldrb	r2, [r7, #3]
 8010ce0:	68b9      	ldr	r1, [r7, #8]
 8010ce2:	4613      	mov	r3, r2
 8010ce4:	011b      	lsls	r3, r3, #4
 8010ce6:	1a9b      	subs	r3, r3, r2
 8010ce8:	009b      	lsls	r3, r3, #2
 8010cea:	440b      	add	r3, r1
 8010cec:	333c      	adds	r3, #60	@ 0x3c
 8010cee:	781b      	ldrb	r3, [r3, #0]
 8010cf0:	73fb      	strb	r3, [r7, #15]
 8010cf2:	e009      	b.n	8010d08 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8010cf4:	78fa      	ldrb	r2, [r7, #3]
 8010cf6:	68b9      	ldr	r1, [r7, #8]
 8010cf8:	4613      	mov	r3, r2
 8010cfa:	011b      	lsls	r3, r3, #4
 8010cfc:	1a9b      	subs	r3, r3, r2
 8010cfe:	009b      	lsls	r3, r3, #2
 8010d00:	440b      	add	r3, r1
 8010d02:	333d      	adds	r3, #61	@ 0x3d
 8010d04:	781b      	ldrb	r3, [r3, #0]
 8010d06:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8010d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	3714      	adds	r7, #20
 8010d0e:	46bd      	mov	sp, r7
 8010d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d14:	4770      	bx	lr

08010d16 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010d16:	b580      	push	{r7, lr}
 8010d18:	b082      	sub	sp, #8
 8010d1a:	af00      	add	r7, sp, #0
 8010d1c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010d1e:	6878      	ldr	r0, [r7, #4]
 8010d20:	f7f1 faec 	bl	80022fc <HAL_Delay>
}
 8010d24:	bf00      	nop
 8010d26:	3708      	adds	r7, #8
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	bd80      	pop	{r7, pc}

08010d2c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010d2c:	b480      	push	{r7}
 8010d2e:	b085      	sub	sp, #20
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	4603      	mov	r3, r0
 8010d34:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010d36:	2300      	movs	r3, #0
 8010d38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010d3a:	79fb      	ldrb	r3, [r7, #7]
 8010d3c:	2b03      	cmp	r3, #3
 8010d3e:	d817      	bhi.n	8010d70 <USBH_Get_USB_Status+0x44>
 8010d40:	a201      	add	r2, pc, #4	@ (adr r2, 8010d48 <USBH_Get_USB_Status+0x1c>)
 8010d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d46:	bf00      	nop
 8010d48:	08010d59 	.word	0x08010d59
 8010d4c:	08010d5f 	.word	0x08010d5f
 8010d50:	08010d65 	.word	0x08010d65
 8010d54:	08010d6b 	.word	0x08010d6b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010d58:	2300      	movs	r3, #0
 8010d5a:	73fb      	strb	r3, [r7, #15]
    break;
 8010d5c:	e00b      	b.n	8010d76 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010d5e:	2302      	movs	r3, #2
 8010d60:	73fb      	strb	r3, [r7, #15]
    break;
 8010d62:	e008      	b.n	8010d76 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010d64:	2301      	movs	r3, #1
 8010d66:	73fb      	strb	r3, [r7, #15]
    break;
 8010d68:	e005      	b.n	8010d76 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8010d6a:	2302      	movs	r3, #2
 8010d6c:	73fb      	strb	r3, [r7, #15]
    break;
 8010d6e:	e002      	b.n	8010d76 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010d70:	2302      	movs	r3, #2
 8010d72:	73fb      	strb	r3, [r7, #15]
    break;
 8010d74:	bf00      	nop
  }
  return usb_status;
 8010d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d78:	4618      	mov	r0, r3
 8010d7a:	3714      	adds	r7, #20
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d82:	4770      	bx	lr

08010d84 <malloc>:
 8010d84:	4b02      	ldr	r3, [pc, #8]	@ (8010d90 <malloc+0xc>)
 8010d86:	4601      	mov	r1, r0
 8010d88:	6818      	ldr	r0, [r3, #0]
 8010d8a:	f000 b82d 	b.w	8010de8 <_malloc_r>
 8010d8e:	bf00      	nop
 8010d90:	20000030 	.word	0x20000030

08010d94 <free>:
 8010d94:	4b02      	ldr	r3, [pc, #8]	@ (8010da0 <free+0xc>)
 8010d96:	4601      	mov	r1, r0
 8010d98:	6818      	ldr	r0, [r3, #0]
 8010d9a:	f000 b92b 	b.w	8010ff4 <_free_r>
 8010d9e:	bf00      	nop
 8010da0:	20000030 	.word	0x20000030

08010da4 <sbrk_aligned>:
 8010da4:	b570      	push	{r4, r5, r6, lr}
 8010da6:	4e0f      	ldr	r6, [pc, #60]	@ (8010de4 <sbrk_aligned+0x40>)
 8010da8:	460c      	mov	r4, r1
 8010daa:	6831      	ldr	r1, [r6, #0]
 8010dac:	4605      	mov	r5, r0
 8010dae:	b911      	cbnz	r1, 8010db6 <sbrk_aligned+0x12>
 8010db0:	f000 f8ce 	bl	8010f50 <_sbrk_r>
 8010db4:	6030      	str	r0, [r6, #0]
 8010db6:	4621      	mov	r1, r4
 8010db8:	4628      	mov	r0, r5
 8010dba:	f000 f8c9 	bl	8010f50 <_sbrk_r>
 8010dbe:	1c43      	adds	r3, r0, #1
 8010dc0:	d103      	bne.n	8010dca <sbrk_aligned+0x26>
 8010dc2:	f04f 34ff 	mov.w	r4, #4294967295
 8010dc6:	4620      	mov	r0, r4
 8010dc8:	bd70      	pop	{r4, r5, r6, pc}
 8010dca:	1cc4      	adds	r4, r0, #3
 8010dcc:	f024 0403 	bic.w	r4, r4, #3
 8010dd0:	42a0      	cmp	r0, r4
 8010dd2:	d0f8      	beq.n	8010dc6 <sbrk_aligned+0x22>
 8010dd4:	1a21      	subs	r1, r4, r0
 8010dd6:	4628      	mov	r0, r5
 8010dd8:	f000 f8ba 	bl	8010f50 <_sbrk_r>
 8010ddc:	3001      	adds	r0, #1
 8010dde:	d1f2      	bne.n	8010dc6 <sbrk_aligned+0x22>
 8010de0:	e7ef      	b.n	8010dc2 <sbrk_aligned+0x1e>
 8010de2:	bf00      	nop
 8010de4:	2000211c 	.word	0x2000211c

08010de8 <_malloc_r>:
 8010de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010dec:	1ccd      	adds	r5, r1, #3
 8010dee:	f025 0503 	bic.w	r5, r5, #3
 8010df2:	3508      	adds	r5, #8
 8010df4:	2d0c      	cmp	r5, #12
 8010df6:	bf38      	it	cc
 8010df8:	250c      	movcc	r5, #12
 8010dfa:	2d00      	cmp	r5, #0
 8010dfc:	4606      	mov	r6, r0
 8010dfe:	db01      	blt.n	8010e04 <_malloc_r+0x1c>
 8010e00:	42a9      	cmp	r1, r5
 8010e02:	d904      	bls.n	8010e0e <_malloc_r+0x26>
 8010e04:	230c      	movs	r3, #12
 8010e06:	6033      	str	r3, [r6, #0]
 8010e08:	2000      	movs	r0, #0
 8010e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010ee4 <_malloc_r+0xfc>
 8010e12:	f000 f869 	bl	8010ee8 <__malloc_lock>
 8010e16:	f8d8 3000 	ldr.w	r3, [r8]
 8010e1a:	461c      	mov	r4, r3
 8010e1c:	bb44      	cbnz	r4, 8010e70 <_malloc_r+0x88>
 8010e1e:	4629      	mov	r1, r5
 8010e20:	4630      	mov	r0, r6
 8010e22:	f7ff ffbf 	bl	8010da4 <sbrk_aligned>
 8010e26:	1c43      	adds	r3, r0, #1
 8010e28:	4604      	mov	r4, r0
 8010e2a:	d158      	bne.n	8010ede <_malloc_r+0xf6>
 8010e2c:	f8d8 4000 	ldr.w	r4, [r8]
 8010e30:	4627      	mov	r7, r4
 8010e32:	2f00      	cmp	r7, #0
 8010e34:	d143      	bne.n	8010ebe <_malloc_r+0xd6>
 8010e36:	2c00      	cmp	r4, #0
 8010e38:	d04b      	beq.n	8010ed2 <_malloc_r+0xea>
 8010e3a:	6823      	ldr	r3, [r4, #0]
 8010e3c:	4639      	mov	r1, r7
 8010e3e:	4630      	mov	r0, r6
 8010e40:	eb04 0903 	add.w	r9, r4, r3
 8010e44:	f000 f884 	bl	8010f50 <_sbrk_r>
 8010e48:	4581      	cmp	r9, r0
 8010e4a:	d142      	bne.n	8010ed2 <_malloc_r+0xea>
 8010e4c:	6821      	ldr	r1, [r4, #0]
 8010e4e:	1a6d      	subs	r5, r5, r1
 8010e50:	4629      	mov	r1, r5
 8010e52:	4630      	mov	r0, r6
 8010e54:	f7ff ffa6 	bl	8010da4 <sbrk_aligned>
 8010e58:	3001      	adds	r0, #1
 8010e5a:	d03a      	beq.n	8010ed2 <_malloc_r+0xea>
 8010e5c:	6823      	ldr	r3, [r4, #0]
 8010e5e:	442b      	add	r3, r5
 8010e60:	6023      	str	r3, [r4, #0]
 8010e62:	f8d8 3000 	ldr.w	r3, [r8]
 8010e66:	685a      	ldr	r2, [r3, #4]
 8010e68:	bb62      	cbnz	r2, 8010ec4 <_malloc_r+0xdc>
 8010e6a:	f8c8 7000 	str.w	r7, [r8]
 8010e6e:	e00f      	b.n	8010e90 <_malloc_r+0xa8>
 8010e70:	6822      	ldr	r2, [r4, #0]
 8010e72:	1b52      	subs	r2, r2, r5
 8010e74:	d420      	bmi.n	8010eb8 <_malloc_r+0xd0>
 8010e76:	2a0b      	cmp	r2, #11
 8010e78:	d917      	bls.n	8010eaa <_malloc_r+0xc2>
 8010e7a:	1961      	adds	r1, r4, r5
 8010e7c:	42a3      	cmp	r3, r4
 8010e7e:	6025      	str	r5, [r4, #0]
 8010e80:	bf18      	it	ne
 8010e82:	6059      	strne	r1, [r3, #4]
 8010e84:	6863      	ldr	r3, [r4, #4]
 8010e86:	bf08      	it	eq
 8010e88:	f8c8 1000 	streq.w	r1, [r8]
 8010e8c:	5162      	str	r2, [r4, r5]
 8010e8e:	604b      	str	r3, [r1, #4]
 8010e90:	4630      	mov	r0, r6
 8010e92:	f000 f82f 	bl	8010ef4 <__malloc_unlock>
 8010e96:	f104 000b 	add.w	r0, r4, #11
 8010e9a:	1d23      	adds	r3, r4, #4
 8010e9c:	f020 0007 	bic.w	r0, r0, #7
 8010ea0:	1ac2      	subs	r2, r0, r3
 8010ea2:	bf1c      	itt	ne
 8010ea4:	1a1b      	subne	r3, r3, r0
 8010ea6:	50a3      	strne	r3, [r4, r2]
 8010ea8:	e7af      	b.n	8010e0a <_malloc_r+0x22>
 8010eaa:	6862      	ldr	r2, [r4, #4]
 8010eac:	42a3      	cmp	r3, r4
 8010eae:	bf0c      	ite	eq
 8010eb0:	f8c8 2000 	streq.w	r2, [r8]
 8010eb4:	605a      	strne	r2, [r3, #4]
 8010eb6:	e7eb      	b.n	8010e90 <_malloc_r+0xa8>
 8010eb8:	4623      	mov	r3, r4
 8010eba:	6864      	ldr	r4, [r4, #4]
 8010ebc:	e7ae      	b.n	8010e1c <_malloc_r+0x34>
 8010ebe:	463c      	mov	r4, r7
 8010ec0:	687f      	ldr	r7, [r7, #4]
 8010ec2:	e7b6      	b.n	8010e32 <_malloc_r+0x4a>
 8010ec4:	461a      	mov	r2, r3
 8010ec6:	685b      	ldr	r3, [r3, #4]
 8010ec8:	42a3      	cmp	r3, r4
 8010eca:	d1fb      	bne.n	8010ec4 <_malloc_r+0xdc>
 8010ecc:	2300      	movs	r3, #0
 8010ece:	6053      	str	r3, [r2, #4]
 8010ed0:	e7de      	b.n	8010e90 <_malloc_r+0xa8>
 8010ed2:	230c      	movs	r3, #12
 8010ed4:	6033      	str	r3, [r6, #0]
 8010ed6:	4630      	mov	r0, r6
 8010ed8:	f000 f80c 	bl	8010ef4 <__malloc_unlock>
 8010edc:	e794      	b.n	8010e08 <_malloc_r+0x20>
 8010ede:	6005      	str	r5, [r0, #0]
 8010ee0:	e7d6      	b.n	8010e90 <_malloc_r+0xa8>
 8010ee2:	bf00      	nop
 8010ee4:	20002120 	.word	0x20002120

08010ee8 <__malloc_lock>:
 8010ee8:	4801      	ldr	r0, [pc, #4]	@ (8010ef0 <__malloc_lock+0x8>)
 8010eea:	f000 b86b 	b.w	8010fc4 <__retarget_lock_acquire_recursive>
 8010eee:	bf00      	nop
 8010ef0:	20002260 	.word	0x20002260

08010ef4 <__malloc_unlock>:
 8010ef4:	4801      	ldr	r0, [pc, #4]	@ (8010efc <__malloc_unlock+0x8>)
 8010ef6:	f000 b866 	b.w	8010fc6 <__retarget_lock_release_recursive>
 8010efa:	bf00      	nop
 8010efc:	20002260 	.word	0x20002260

08010f00 <siprintf>:
 8010f00:	b40e      	push	{r1, r2, r3}
 8010f02:	b500      	push	{lr}
 8010f04:	b09c      	sub	sp, #112	@ 0x70
 8010f06:	ab1d      	add	r3, sp, #116	@ 0x74
 8010f08:	9002      	str	r0, [sp, #8]
 8010f0a:	9006      	str	r0, [sp, #24]
 8010f0c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010f10:	4809      	ldr	r0, [pc, #36]	@ (8010f38 <siprintf+0x38>)
 8010f12:	9107      	str	r1, [sp, #28]
 8010f14:	9104      	str	r1, [sp, #16]
 8010f16:	4909      	ldr	r1, [pc, #36]	@ (8010f3c <siprintf+0x3c>)
 8010f18:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f1c:	9105      	str	r1, [sp, #20]
 8010f1e:	6800      	ldr	r0, [r0, #0]
 8010f20:	9301      	str	r3, [sp, #4]
 8010f22:	a902      	add	r1, sp, #8
 8010f24:	f000 f90c 	bl	8011140 <_svfiprintf_r>
 8010f28:	9b02      	ldr	r3, [sp, #8]
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	701a      	strb	r2, [r3, #0]
 8010f2e:	b01c      	add	sp, #112	@ 0x70
 8010f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f34:	b003      	add	sp, #12
 8010f36:	4770      	bx	lr
 8010f38:	20000030 	.word	0x20000030
 8010f3c:	ffff0208 	.word	0xffff0208

08010f40 <memset>:
 8010f40:	4402      	add	r2, r0
 8010f42:	4603      	mov	r3, r0
 8010f44:	4293      	cmp	r3, r2
 8010f46:	d100      	bne.n	8010f4a <memset+0xa>
 8010f48:	4770      	bx	lr
 8010f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8010f4e:	e7f9      	b.n	8010f44 <memset+0x4>

08010f50 <_sbrk_r>:
 8010f50:	b538      	push	{r3, r4, r5, lr}
 8010f52:	4d06      	ldr	r5, [pc, #24]	@ (8010f6c <_sbrk_r+0x1c>)
 8010f54:	2300      	movs	r3, #0
 8010f56:	4604      	mov	r4, r0
 8010f58:	4608      	mov	r0, r1
 8010f5a:	602b      	str	r3, [r5, #0]
 8010f5c:	f7f0 ffce 	bl	8001efc <_sbrk>
 8010f60:	1c43      	adds	r3, r0, #1
 8010f62:	d102      	bne.n	8010f6a <_sbrk_r+0x1a>
 8010f64:	682b      	ldr	r3, [r5, #0]
 8010f66:	b103      	cbz	r3, 8010f6a <_sbrk_r+0x1a>
 8010f68:	6023      	str	r3, [r4, #0]
 8010f6a:	bd38      	pop	{r3, r4, r5, pc}
 8010f6c:	2000225c 	.word	0x2000225c

08010f70 <__errno>:
 8010f70:	4b01      	ldr	r3, [pc, #4]	@ (8010f78 <__errno+0x8>)
 8010f72:	6818      	ldr	r0, [r3, #0]
 8010f74:	4770      	bx	lr
 8010f76:	bf00      	nop
 8010f78:	20000030 	.word	0x20000030

08010f7c <__libc_init_array>:
 8010f7c:	b570      	push	{r4, r5, r6, lr}
 8010f7e:	4d0d      	ldr	r5, [pc, #52]	@ (8010fb4 <__libc_init_array+0x38>)
 8010f80:	4c0d      	ldr	r4, [pc, #52]	@ (8010fb8 <__libc_init_array+0x3c>)
 8010f82:	1b64      	subs	r4, r4, r5
 8010f84:	10a4      	asrs	r4, r4, #2
 8010f86:	2600      	movs	r6, #0
 8010f88:	42a6      	cmp	r6, r4
 8010f8a:	d109      	bne.n	8010fa0 <__libc_init_array+0x24>
 8010f8c:	4d0b      	ldr	r5, [pc, #44]	@ (8010fbc <__libc_init_array+0x40>)
 8010f8e:	4c0c      	ldr	r4, [pc, #48]	@ (8010fc0 <__libc_init_array+0x44>)
 8010f90:	f000 fbb0 	bl	80116f4 <_init>
 8010f94:	1b64      	subs	r4, r4, r5
 8010f96:	10a4      	asrs	r4, r4, #2
 8010f98:	2600      	movs	r6, #0
 8010f9a:	42a6      	cmp	r6, r4
 8010f9c:	d105      	bne.n	8010faa <__libc_init_array+0x2e>
 8010f9e:	bd70      	pop	{r4, r5, r6, pc}
 8010fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8010fa4:	4798      	blx	r3
 8010fa6:	3601      	adds	r6, #1
 8010fa8:	e7ee      	b.n	8010f88 <__libc_init_array+0xc>
 8010faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8010fae:	4798      	blx	r3
 8010fb0:	3601      	adds	r6, #1
 8010fb2:	e7f2      	b.n	8010f9a <__libc_init_array+0x1e>
 8010fb4:	080119d8 	.word	0x080119d8
 8010fb8:	080119d8 	.word	0x080119d8
 8010fbc:	080119d8 	.word	0x080119d8
 8010fc0:	080119dc 	.word	0x080119dc

08010fc4 <__retarget_lock_acquire_recursive>:
 8010fc4:	4770      	bx	lr

08010fc6 <__retarget_lock_release_recursive>:
 8010fc6:	4770      	bx	lr

08010fc8 <strcpy>:
 8010fc8:	4603      	mov	r3, r0
 8010fca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010fce:	f803 2b01 	strb.w	r2, [r3], #1
 8010fd2:	2a00      	cmp	r2, #0
 8010fd4:	d1f9      	bne.n	8010fca <strcpy+0x2>
 8010fd6:	4770      	bx	lr

08010fd8 <memcpy>:
 8010fd8:	440a      	add	r2, r1
 8010fda:	4291      	cmp	r1, r2
 8010fdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8010fe0:	d100      	bne.n	8010fe4 <memcpy+0xc>
 8010fe2:	4770      	bx	lr
 8010fe4:	b510      	push	{r4, lr}
 8010fe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010fea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010fee:	4291      	cmp	r1, r2
 8010ff0:	d1f9      	bne.n	8010fe6 <memcpy+0xe>
 8010ff2:	bd10      	pop	{r4, pc}

08010ff4 <_free_r>:
 8010ff4:	b538      	push	{r3, r4, r5, lr}
 8010ff6:	4605      	mov	r5, r0
 8010ff8:	2900      	cmp	r1, #0
 8010ffa:	d041      	beq.n	8011080 <_free_r+0x8c>
 8010ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011000:	1f0c      	subs	r4, r1, #4
 8011002:	2b00      	cmp	r3, #0
 8011004:	bfb8      	it	lt
 8011006:	18e4      	addlt	r4, r4, r3
 8011008:	f7ff ff6e 	bl	8010ee8 <__malloc_lock>
 801100c:	4a1d      	ldr	r2, [pc, #116]	@ (8011084 <_free_r+0x90>)
 801100e:	6813      	ldr	r3, [r2, #0]
 8011010:	b933      	cbnz	r3, 8011020 <_free_r+0x2c>
 8011012:	6063      	str	r3, [r4, #4]
 8011014:	6014      	str	r4, [r2, #0]
 8011016:	4628      	mov	r0, r5
 8011018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801101c:	f7ff bf6a 	b.w	8010ef4 <__malloc_unlock>
 8011020:	42a3      	cmp	r3, r4
 8011022:	d908      	bls.n	8011036 <_free_r+0x42>
 8011024:	6820      	ldr	r0, [r4, #0]
 8011026:	1821      	adds	r1, r4, r0
 8011028:	428b      	cmp	r3, r1
 801102a:	bf01      	itttt	eq
 801102c:	6819      	ldreq	r1, [r3, #0]
 801102e:	685b      	ldreq	r3, [r3, #4]
 8011030:	1809      	addeq	r1, r1, r0
 8011032:	6021      	streq	r1, [r4, #0]
 8011034:	e7ed      	b.n	8011012 <_free_r+0x1e>
 8011036:	461a      	mov	r2, r3
 8011038:	685b      	ldr	r3, [r3, #4]
 801103a:	b10b      	cbz	r3, 8011040 <_free_r+0x4c>
 801103c:	42a3      	cmp	r3, r4
 801103e:	d9fa      	bls.n	8011036 <_free_r+0x42>
 8011040:	6811      	ldr	r1, [r2, #0]
 8011042:	1850      	adds	r0, r2, r1
 8011044:	42a0      	cmp	r0, r4
 8011046:	d10b      	bne.n	8011060 <_free_r+0x6c>
 8011048:	6820      	ldr	r0, [r4, #0]
 801104a:	4401      	add	r1, r0
 801104c:	1850      	adds	r0, r2, r1
 801104e:	4283      	cmp	r3, r0
 8011050:	6011      	str	r1, [r2, #0]
 8011052:	d1e0      	bne.n	8011016 <_free_r+0x22>
 8011054:	6818      	ldr	r0, [r3, #0]
 8011056:	685b      	ldr	r3, [r3, #4]
 8011058:	6053      	str	r3, [r2, #4]
 801105a:	4408      	add	r0, r1
 801105c:	6010      	str	r0, [r2, #0]
 801105e:	e7da      	b.n	8011016 <_free_r+0x22>
 8011060:	d902      	bls.n	8011068 <_free_r+0x74>
 8011062:	230c      	movs	r3, #12
 8011064:	602b      	str	r3, [r5, #0]
 8011066:	e7d6      	b.n	8011016 <_free_r+0x22>
 8011068:	6820      	ldr	r0, [r4, #0]
 801106a:	1821      	adds	r1, r4, r0
 801106c:	428b      	cmp	r3, r1
 801106e:	bf04      	itt	eq
 8011070:	6819      	ldreq	r1, [r3, #0]
 8011072:	685b      	ldreq	r3, [r3, #4]
 8011074:	6063      	str	r3, [r4, #4]
 8011076:	bf04      	itt	eq
 8011078:	1809      	addeq	r1, r1, r0
 801107a:	6021      	streq	r1, [r4, #0]
 801107c:	6054      	str	r4, [r2, #4]
 801107e:	e7ca      	b.n	8011016 <_free_r+0x22>
 8011080:	bd38      	pop	{r3, r4, r5, pc}
 8011082:	bf00      	nop
 8011084:	20002120 	.word	0x20002120

08011088 <__ssputs_r>:
 8011088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801108c:	688e      	ldr	r6, [r1, #8]
 801108e:	461f      	mov	r7, r3
 8011090:	42be      	cmp	r6, r7
 8011092:	680b      	ldr	r3, [r1, #0]
 8011094:	4682      	mov	sl, r0
 8011096:	460c      	mov	r4, r1
 8011098:	4690      	mov	r8, r2
 801109a:	d82d      	bhi.n	80110f8 <__ssputs_r+0x70>
 801109c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80110a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80110a4:	d026      	beq.n	80110f4 <__ssputs_r+0x6c>
 80110a6:	6965      	ldr	r5, [r4, #20]
 80110a8:	6909      	ldr	r1, [r1, #16]
 80110aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80110ae:	eba3 0901 	sub.w	r9, r3, r1
 80110b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80110b6:	1c7b      	adds	r3, r7, #1
 80110b8:	444b      	add	r3, r9
 80110ba:	106d      	asrs	r5, r5, #1
 80110bc:	429d      	cmp	r5, r3
 80110be:	bf38      	it	cc
 80110c0:	461d      	movcc	r5, r3
 80110c2:	0553      	lsls	r3, r2, #21
 80110c4:	d527      	bpl.n	8011116 <__ssputs_r+0x8e>
 80110c6:	4629      	mov	r1, r5
 80110c8:	f7ff fe8e 	bl	8010de8 <_malloc_r>
 80110cc:	4606      	mov	r6, r0
 80110ce:	b360      	cbz	r0, 801112a <__ssputs_r+0xa2>
 80110d0:	6921      	ldr	r1, [r4, #16]
 80110d2:	464a      	mov	r2, r9
 80110d4:	f7ff ff80 	bl	8010fd8 <memcpy>
 80110d8:	89a3      	ldrh	r3, [r4, #12]
 80110da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80110de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80110e2:	81a3      	strh	r3, [r4, #12]
 80110e4:	6126      	str	r6, [r4, #16]
 80110e6:	6165      	str	r5, [r4, #20]
 80110e8:	444e      	add	r6, r9
 80110ea:	eba5 0509 	sub.w	r5, r5, r9
 80110ee:	6026      	str	r6, [r4, #0]
 80110f0:	60a5      	str	r5, [r4, #8]
 80110f2:	463e      	mov	r6, r7
 80110f4:	42be      	cmp	r6, r7
 80110f6:	d900      	bls.n	80110fa <__ssputs_r+0x72>
 80110f8:	463e      	mov	r6, r7
 80110fa:	6820      	ldr	r0, [r4, #0]
 80110fc:	4632      	mov	r2, r6
 80110fe:	4641      	mov	r1, r8
 8011100:	f000 faa8 	bl	8011654 <memmove>
 8011104:	68a3      	ldr	r3, [r4, #8]
 8011106:	1b9b      	subs	r3, r3, r6
 8011108:	60a3      	str	r3, [r4, #8]
 801110a:	6823      	ldr	r3, [r4, #0]
 801110c:	4433      	add	r3, r6
 801110e:	6023      	str	r3, [r4, #0]
 8011110:	2000      	movs	r0, #0
 8011112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011116:	462a      	mov	r2, r5
 8011118:	f000 fab6 	bl	8011688 <_realloc_r>
 801111c:	4606      	mov	r6, r0
 801111e:	2800      	cmp	r0, #0
 8011120:	d1e0      	bne.n	80110e4 <__ssputs_r+0x5c>
 8011122:	6921      	ldr	r1, [r4, #16]
 8011124:	4650      	mov	r0, sl
 8011126:	f7ff ff65 	bl	8010ff4 <_free_r>
 801112a:	230c      	movs	r3, #12
 801112c:	f8ca 3000 	str.w	r3, [sl]
 8011130:	89a3      	ldrh	r3, [r4, #12]
 8011132:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011136:	81a3      	strh	r3, [r4, #12]
 8011138:	f04f 30ff 	mov.w	r0, #4294967295
 801113c:	e7e9      	b.n	8011112 <__ssputs_r+0x8a>
	...

08011140 <_svfiprintf_r>:
 8011140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011144:	4698      	mov	r8, r3
 8011146:	898b      	ldrh	r3, [r1, #12]
 8011148:	061b      	lsls	r3, r3, #24
 801114a:	b09d      	sub	sp, #116	@ 0x74
 801114c:	4607      	mov	r7, r0
 801114e:	460d      	mov	r5, r1
 8011150:	4614      	mov	r4, r2
 8011152:	d510      	bpl.n	8011176 <_svfiprintf_r+0x36>
 8011154:	690b      	ldr	r3, [r1, #16]
 8011156:	b973      	cbnz	r3, 8011176 <_svfiprintf_r+0x36>
 8011158:	2140      	movs	r1, #64	@ 0x40
 801115a:	f7ff fe45 	bl	8010de8 <_malloc_r>
 801115e:	6028      	str	r0, [r5, #0]
 8011160:	6128      	str	r0, [r5, #16]
 8011162:	b930      	cbnz	r0, 8011172 <_svfiprintf_r+0x32>
 8011164:	230c      	movs	r3, #12
 8011166:	603b      	str	r3, [r7, #0]
 8011168:	f04f 30ff 	mov.w	r0, #4294967295
 801116c:	b01d      	add	sp, #116	@ 0x74
 801116e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011172:	2340      	movs	r3, #64	@ 0x40
 8011174:	616b      	str	r3, [r5, #20]
 8011176:	2300      	movs	r3, #0
 8011178:	9309      	str	r3, [sp, #36]	@ 0x24
 801117a:	2320      	movs	r3, #32
 801117c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011180:	f8cd 800c 	str.w	r8, [sp, #12]
 8011184:	2330      	movs	r3, #48	@ 0x30
 8011186:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011324 <_svfiprintf_r+0x1e4>
 801118a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801118e:	f04f 0901 	mov.w	r9, #1
 8011192:	4623      	mov	r3, r4
 8011194:	469a      	mov	sl, r3
 8011196:	f813 2b01 	ldrb.w	r2, [r3], #1
 801119a:	b10a      	cbz	r2, 80111a0 <_svfiprintf_r+0x60>
 801119c:	2a25      	cmp	r2, #37	@ 0x25
 801119e:	d1f9      	bne.n	8011194 <_svfiprintf_r+0x54>
 80111a0:	ebba 0b04 	subs.w	fp, sl, r4
 80111a4:	d00b      	beq.n	80111be <_svfiprintf_r+0x7e>
 80111a6:	465b      	mov	r3, fp
 80111a8:	4622      	mov	r2, r4
 80111aa:	4629      	mov	r1, r5
 80111ac:	4638      	mov	r0, r7
 80111ae:	f7ff ff6b 	bl	8011088 <__ssputs_r>
 80111b2:	3001      	adds	r0, #1
 80111b4:	f000 80a7 	beq.w	8011306 <_svfiprintf_r+0x1c6>
 80111b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80111ba:	445a      	add	r2, fp
 80111bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80111be:	f89a 3000 	ldrb.w	r3, [sl]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	f000 809f 	beq.w	8011306 <_svfiprintf_r+0x1c6>
 80111c8:	2300      	movs	r3, #0
 80111ca:	f04f 32ff 	mov.w	r2, #4294967295
 80111ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80111d2:	f10a 0a01 	add.w	sl, sl, #1
 80111d6:	9304      	str	r3, [sp, #16]
 80111d8:	9307      	str	r3, [sp, #28]
 80111da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80111de:	931a      	str	r3, [sp, #104]	@ 0x68
 80111e0:	4654      	mov	r4, sl
 80111e2:	2205      	movs	r2, #5
 80111e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111e8:	484e      	ldr	r0, [pc, #312]	@ (8011324 <_svfiprintf_r+0x1e4>)
 80111ea:	f7ee fff9 	bl	80001e0 <memchr>
 80111ee:	9a04      	ldr	r2, [sp, #16]
 80111f0:	b9d8      	cbnz	r0, 801122a <_svfiprintf_r+0xea>
 80111f2:	06d0      	lsls	r0, r2, #27
 80111f4:	bf44      	itt	mi
 80111f6:	2320      	movmi	r3, #32
 80111f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80111fc:	0711      	lsls	r1, r2, #28
 80111fe:	bf44      	itt	mi
 8011200:	232b      	movmi	r3, #43	@ 0x2b
 8011202:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011206:	f89a 3000 	ldrb.w	r3, [sl]
 801120a:	2b2a      	cmp	r3, #42	@ 0x2a
 801120c:	d015      	beq.n	801123a <_svfiprintf_r+0xfa>
 801120e:	9a07      	ldr	r2, [sp, #28]
 8011210:	4654      	mov	r4, sl
 8011212:	2000      	movs	r0, #0
 8011214:	f04f 0c0a 	mov.w	ip, #10
 8011218:	4621      	mov	r1, r4
 801121a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801121e:	3b30      	subs	r3, #48	@ 0x30
 8011220:	2b09      	cmp	r3, #9
 8011222:	d94b      	bls.n	80112bc <_svfiprintf_r+0x17c>
 8011224:	b1b0      	cbz	r0, 8011254 <_svfiprintf_r+0x114>
 8011226:	9207      	str	r2, [sp, #28]
 8011228:	e014      	b.n	8011254 <_svfiprintf_r+0x114>
 801122a:	eba0 0308 	sub.w	r3, r0, r8
 801122e:	fa09 f303 	lsl.w	r3, r9, r3
 8011232:	4313      	orrs	r3, r2
 8011234:	9304      	str	r3, [sp, #16]
 8011236:	46a2      	mov	sl, r4
 8011238:	e7d2      	b.n	80111e0 <_svfiprintf_r+0xa0>
 801123a:	9b03      	ldr	r3, [sp, #12]
 801123c:	1d19      	adds	r1, r3, #4
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	9103      	str	r1, [sp, #12]
 8011242:	2b00      	cmp	r3, #0
 8011244:	bfbb      	ittet	lt
 8011246:	425b      	neglt	r3, r3
 8011248:	f042 0202 	orrlt.w	r2, r2, #2
 801124c:	9307      	strge	r3, [sp, #28]
 801124e:	9307      	strlt	r3, [sp, #28]
 8011250:	bfb8      	it	lt
 8011252:	9204      	strlt	r2, [sp, #16]
 8011254:	7823      	ldrb	r3, [r4, #0]
 8011256:	2b2e      	cmp	r3, #46	@ 0x2e
 8011258:	d10a      	bne.n	8011270 <_svfiprintf_r+0x130>
 801125a:	7863      	ldrb	r3, [r4, #1]
 801125c:	2b2a      	cmp	r3, #42	@ 0x2a
 801125e:	d132      	bne.n	80112c6 <_svfiprintf_r+0x186>
 8011260:	9b03      	ldr	r3, [sp, #12]
 8011262:	1d1a      	adds	r2, r3, #4
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	9203      	str	r2, [sp, #12]
 8011268:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801126c:	3402      	adds	r4, #2
 801126e:	9305      	str	r3, [sp, #20]
 8011270:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011334 <_svfiprintf_r+0x1f4>
 8011274:	7821      	ldrb	r1, [r4, #0]
 8011276:	2203      	movs	r2, #3
 8011278:	4650      	mov	r0, sl
 801127a:	f7ee ffb1 	bl	80001e0 <memchr>
 801127e:	b138      	cbz	r0, 8011290 <_svfiprintf_r+0x150>
 8011280:	9b04      	ldr	r3, [sp, #16]
 8011282:	eba0 000a 	sub.w	r0, r0, sl
 8011286:	2240      	movs	r2, #64	@ 0x40
 8011288:	4082      	lsls	r2, r0
 801128a:	4313      	orrs	r3, r2
 801128c:	3401      	adds	r4, #1
 801128e:	9304      	str	r3, [sp, #16]
 8011290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011294:	4824      	ldr	r0, [pc, #144]	@ (8011328 <_svfiprintf_r+0x1e8>)
 8011296:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801129a:	2206      	movs	r2, #6
 801129c:	f7ee ffa0 	bl	80001e0 <memchr>
 80112a0:	2800      	cmp	r0, #0
 80112a2:	d036      	beq.n	8011312 <_svfiprintf_r+0x1d2>
 80112a4:	4b21      	ldr	r3, [pc, #132]	@ (801132c <_svfiprintf_r+0x1ec>)
 80112a6:	bb1b      	cbnz	r3, 80112f0 <_svfiprintf_r+0x1b0>
 80112a8:	9b03      	ldr	r3, [sp, #12]
 80112aa:	3307      	adds	r3, #7
 80112ac:	f023 0307 	bic.w	r3, r3, #7
 80112b0:	3308      	adds	r3, #8
 80112b2:	9303      	str	r3, [sp, #12]
 80112b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112b6:	4433      	add	r3, r6
 80112b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80112ba:	e76a      	b.n	8011192 <_svfiprintf_r+0x52>
 80112bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80112c0:	460c      	mov	r4, r1
 80112c2:	2001      	movs	r0, #1
 80112c4:	e7a8      	b.n	8011218 <_svfiprintf_r+0xd8>
 80112c6:	2300      	movs	r3, #0
 80112c8:	3401      	adds	r4, #1
 80112ca:	9305      	str	r3, [sp, #20]
 80112cc:	4619      	mov	r1, r3
 80112ce:	f04f 0c0a 	mov.w	ip, #10
 80112d2:	4620      	mov	r0, r4
 80112d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80112d8:	3a30      	subs	r2, #48	@ 0x30
 80112da:	2a09      	cmp	r2, #9
 80112dc:	d903      	bls.n	80112e6 <_svfiprintf_r+0x1a6>
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d0c6      	beq.n	8011270 <_svfiprintf_r+0x130>
 80112e2:	9105      	str	r1, [sp, #20]
 80112e4:	e7c4      	b.n	8011270 <_svfiprintf_r+0x130>
 80112e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80112ea:	4604      	mov	r4, r0
 80112ec:	2301      	movs	r3, #1
 80112ee:	e7f0      	b.n	80112d2 <_svfiprintf_r+0x192>
 80112f0:	ab03      	add	r3, sp, #12
 80112f2:	9300      	str	r3, [sp, #0]
 80112f4:	462a      	mov	r2, r5
 80112f6:	4b0e      	ldr	r3, [pc, #56]	@ (8011330 <_svfiprintf_r+0x1f0>)
 80112f8:	a904      	add	r1, sp, #16
 80112fa:	4638      	mov	r0, r7
 80112fc:	f3af 8000 	nop.w
 8011300:	1c42      	adds	r2, r0, #1
 8011302:	4606      	mov	r6, r0
 8011304:	d1d6      	bne.n	80112b4 <_svfiprintf_r+0x174>
 8011306:	89ab      	ldrh	r3, [r5, #12]
 8011308:	065b      	lsls	r3, r3, #25
 801130a:	f53f af2d 	bmi.w	8011168 <_svfiprintf_r+0x28>
 801130e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011310:	e72c      	b.n	801116c <_svfiprintf_r+0x2c>
 8011312:	ab03      	add	r3, sp, #12
 8011314:	9300      	str	r3, [sp, #0]
 8011316:	462a      	mov	r2, r5
 8011318:	4b05      	ldr	r3, [pc, #20]	@ (8011330 <_svfiprintf_r+0x1f0>)
 801131a:	a904      	add	r1, sp, #16
 801131c:	4638      	mov	r0, r7
 801131e:	f000 f879 	bl	8011414 <_printf_i>
 8011322:	e7ed      	b.n	8011300 <_svfiprintf_r+0x1c0>
 8011324:	0801199c 	.word	0x0801199c
 8011328:	080119a6 	.word	0x080119a6
 801132c:	00000000 	.word	0x00000000
 8011330:	08011089 	.word	0x08011089
 8011334:	080119a2 	.word	0x080119a2

08011338 <_printf_common>:
 8011338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801133c:	4616      	mov	r6, r2
 801133e:	4698      	mov	r8, r3
 8011340:	688a      	ldr	r2, [r1, #8]
 8011342:	690b      	ldr	r3, [r1, #16]
 8011344:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011348:	4293      	cmp	r3, r2
 801134a:	bfb8      	it	lt
 801134c:	4613      	movlt	r3, r2
 801134e:	6033      	str	r3, [r6, #0]
 8011350:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011354:	4607      	mov	r7, r0
 8011356:	460c      	mov	r4, r1
 8011358:	b10a      	cbz	r2, 801135e <_printf_common+0x26>
 801135a:	3301      	adds	r3, #1
 801135c:	6033      	str	r3, [r6, #0]
 801135e:	6823      	ldr	r3, [r4, #0]
 8011360:	0699      	lsls	r1, r3, #26
 8011362:	bf42      	ittt	mi
 8011364:	6833      	ldrmi	r3, [r6, #0]
 8011366:	3302      	addmi	r3, #2
 8011368:	6033      	strmi	r3, [r6, #0]
 801136a:	6825      	ldr	r5, [r4, #0]
 801136c:	f015 0506 	ands.w	r5, r5, #6
 8011370:	d106      	bne.n	8011380 <_printf_common+0x48>
 8011372:	f104 0a19 	add.w	sl, r4, #25
 8011376:	68e3      	ldr	r3, [r4, #12]
 8011378:	6832      	ldr	r2, [r6, #0]
 801137a:	1a9b      	subs	r3, r3, r2
 801137c:	42ab      	cmp	r3, r5
 801137e:	dc26      	bgt.n	80113ce <_printf_common+0x96>
 8011380:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011384:	6822      	ldr	r2, [r4, #0]
 8011386:	3b00      	subs	r3, #0
 8011388:	bf18      	it	ne
 801138a:	2301      	movne	r3, #1
 801138c:	0692      	lsls	r2, r2, #26
 801138e:	d42b      	bmi.n	80113e8 <_printf_common+0xb0>
 8011390:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011394:	4641      	mov	r1, r8
 8011396:	4638      	mov	r0, r7
 8011398:	47c8      	blx	r9
 801139a:	3001      	adds	r0, #1
 801139c:	d01e      	beq.n	80113dc <_printf_common+0xa4>
 801139e:	6823      	ldr	r3, [r4, #0]
 80113a0:	6922      	ldr	r2, [r4, #16]
 80113a2:	f003 0306 	and.w	r3, r3, #6
 80113a6:	2b04      	cmp	r3, #4
 80113a8:	bf02      	ittt	eq
 80113aa:	68e5      	ldreq	r5, [r4, #12]
 80113ac:	6833      	ldreq	r3, [r6, #0]
 80113ae:	1aed      	subeq	r5, r5, r3
 80113b0:	68a3      	ldr	r3, [r4, #8]
 80113b2:	bf0c      	ite	eq
 80113b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80113b8:	2500      	movne	r5, #0
 80113ba:	4293      	cmp	r3, r2
 80113bc:	bfc4      	itt	gt
 80113be:	1a9b      	subgt	r3, r3, r2
 80113c0:	18ed      	addgt	r5, r5, r3
 80113c2:	2600      	movs	r6, #0
 80113c4:	341a      	adds	r4, #26
 80113c6:	42b5      	cmp	r5, r6
 80113c8:	d11a      	bne.n	8011400 <_printf_common+0xc8>
 80113ca:	2000      	movs	r0, #0
 80113cc:	e008      	b.n	80113e0 <_printf_common+0xa8>
 80113ce:	2301      	movs	r3, #1
 80113d0:	4652      	mov	r2, sl
 80113d2:	4641      	mov	r1, r8
 80113d4:	4638      	mov	r0, r7
 80113d6:	47c8      	blx	r9
 80113d8:	3001      	adds	r0, #1
 80113da:	d103      	bne.n	80113e4 <_printf_common+0xac>
 80113dc:	f04f 30ff 	mov.w	r0, #4294967295
 80113e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113e4:	3501      	adds	r5, #1
 80113e6:	e7c6      	b.n	8011376 <_printf_common+0x3e>
 80113e8:	18e1      	adds	r1, r4, r3
 80113ea:	1c5a      	adds	r2, r3, #1
 80113ec:	2030      	movs	r0, #48	@ 0x30
 80113ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80113f2:	4422      	add	r2, r4
 80113f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80113f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80113fc:	3302      	adds	r3, #2
 80113fe:	e7c7      	b.n	8011390 <_printf_common+0x58>
 8011400:	2301      	movs	r3, #1
 8011402:	4622      	mov	r2, r4
 8011404:	4641      	mov	r1, r8
 8011406:	4638      	mov	r0, r7
 8011408:	47c8      	blx	r9
 801140a:	3001      	adds	r0, #1
 801140c:	d0e6      	beq.n	80113dc <_printf_common+0xa4>
 801140e:	3601      	adds	r6, #1
 8011410:	e7d9      	b.n	80113c6 <_printf_common+0x8e>
	...

08011414 <_printf_i>:
 8011414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011418:	7e0f      	ldrb	r7, [r1, #24]
 801141a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801141c:	2f78      	cmp	r7, #120	@ 0x78
 801141e:	4691      	mov	r9, r2
 8011420:	4680      	mov	r8, r0
 8011422:	460c      	mov	r4, r1
 8011424:	469a      	mov	sl, r3
 8011426:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801142a:	d807      	bhi.n	801143c <_printf_i+0x28>
 801142c:	2f62      	cmp	r7, #98	@ 0x62
 801142e:	d80a      	bhi.n	8011446 <_printf_i+0x32>
 8011430:	2f00      	cmp	r7, #0
 8011432:	f000 80d2 	beq.w	80115da <_printf_i+0x1c6>
 8011436:	2f58      	cmp	r7, #88	@ 0x58
 8011438:	f000 80b9 	beq.w	80115ae <_printf_i+0x19a>
 801143c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011440:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011444:	e03a      	b.n	80114bc <_printf_i+0xa8>
 8011446:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801144a:	2b15      	cmp	r3, #21
 801144c:	d8f6      	bhi.n	801143c <_printf_i+0x28>
 801144e:	a101      	add	r1, pc, #4	@ (adr r1, 8011454 <_printf_i+0x40>)
 8011450:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011454:	080114ad 	.word	0x080114ad
 8011458:	080114c1 	.word	0x080114c1
 801145c:	0801143d 	.word	0x0801143d
 8011460:	0801143d 	.word	0x0801143d
 8011464:	0801143d 	.word	0x0801143d
 8011468:	0801143d 	.word	0x0801143d
 801146c:	080114c1 	.word	0x080114c1
 8011470:	0801143d 	.word	0x0801143d
 8011474:	0801143d 	.word	0x0801143d
 8011478:	0801143d 	.word	0x0801143d
 801147c:	0801143d 	.word	0x0801143d
 8011480:	080115c1 	.word	0x080115c1
 8011484:	080114eb 	.word	0x080114eb
 8011488:	0801157b 	.word	0x0801157b
 801148c:	0801143d 	.word	0x0801143d
 8011490:	0801143d 	.word	0x0801143d
 8011494:	080115e3 	.word	0x080115e3
 8011498:	0801143d 	.word	0x0801143d
 801149c:	080114eb 	.word	0x080114eb
 80114a0:	0801143d 	.word	0x0801143d
 80114a4:	0801143d 	.word	0x0801143d
 80114a8:	08011583 	.word	0x08011583
 80114ac:	6833      	ldr	r3, [r6, #0]
 80114ae:	1d1a      	adds	r2, r3, #4
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	6032      	str	r2, [r6, #0]
 80114b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80114b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80114bc:	2301      	movs	r3, #1
 80114be:	e09d      	b.n	80115fc <_printf_i+0x1e8>
 80114c0:	6833      	ldr	r3, [r6, #0]
 80114c2:	6820      	ldr	r0, [r4, #0]
 80114c4:	1d19      	adds	r1, r3, #4
 80114c6:	6031      	str	r1, [r6, #0]
 80114c8:	0606      	lsls	r6, r0, #24
 80114ca:	d501      	bpl.n	80114d0 <_printf_i+0xbc>
 80114cc:	681d      	ldr	r5, [r3, #0]
 80114ce:	e003      	b.n	80114d8 <_printf_i+0xc4>
 80114d0:	0645      	lsls	r5, r0, #25
 80114d2:	d5fb      	bpl.n	80114cc <_printf_i+0xb8>
 80114d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80114d8:	2d00      	cmp	r5, #0
 80114da:	da03      	bge.n	80114e4 <_printf_i+0xd0>
 80114dc:	232d      	movs	r3, #45	@ 0x2d
 80114de:	426d      	negs	r5, r5
 80114e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80114e4:	4859      	ldr	r0, [pc, #356]	@ (801164c <_printf_i+0x238>)
 80114e6:	230a      	movs	r3, #10
 80114e8:	e011      	b.n	801150e <_printf_i+0xfa>
 80114ea:	6821      	ldr	r1, [r4, #0]
 80114ec:	6833      	ldr	r3, [r6, #0]
 80114ee:	0608      	lsls	r0, r1, #24
 80114f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80114f4:	d402      	bmi.n	80114fc <_printf_i+0xe8>
 80114f6:	0649      	lsls	r1, r1, #25
 80114f8:	bf48      	it	mi
 80114fa:	b2ad      	uxthmi	r5, r5
 80114fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80114fe:	4853      	ldr	r0, [pc, #332]	@ (801164c <_printf_i+0x238>)
 8011500:	6033      	str	r3, [r6, #0]
 8011502:	bf14      	ite	ne
 8011504:	230a      	movne	r3, #10
 8011506:	2308      	moveq	r3, #8
 8011508:	2100      	movs	r1, #0
 801150a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801150e:	6866      	ldr	r6, [r4, #4]
 8011510:	60a6      	str	r6, [r4, #8]
 8011512:	2e00      	cmp	r6, #0
 8011514:	bfa2      	ittt	ge
 8011516:	6821      	ldrge	r1, [r4, #0]
 8011518:	f021 0104 	bicge.w	r1, r1, #4
 801151c:	6021      	strge	r1, [r4, #0]
 801151e:	b90d      	cbnz	r5, 8011524 <_printf_i+0x110>
 8011520:	2e00      	cmp	r6, #0
 8011522:	d04b      	beq.n	80115bc <_printf_i+0x1a8>
 8011524:	4616      	mov	r6, r2
 8011526:	fbb5 f1f3 	udiv	r1, r5, r3
 801152a:	fb03 5711 	mls	r7, r3, r1, r5
 801152e:	5dc7      	ldrb	r7, [r0, r7]
 8011530:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011534:	462f      	mov	r7, r5
 8011536:	42bb      	cmp	r3, r7
 8011538:	460d      	mov	r5, r1
 801153a:	d9f4      	bls.n	8011526 <_printf_i+0x112>
 801153c:	2b08      	cmp	r3, #8
 801153e:	d10b      	bne.n	8011558 <_printf_i+0x144>
 8011540:	6823      	ldr	r3, [r4, #0]
 8011542:	07df      	lsls	r7, r3, #31
 8011544:	d508      	bpl.n	8011558 <_printf_i+0x144>
 8011546:	6923      	ldr	r3, [r4, #16]
 8011548:	6861      	ldr	r1, [r4, #4]
 801154a:	4299      	cmp	r1, r3
 801154c:	bfde      	ittt	le
 801154e:	2330      	movle	r3, #48	@ 0x30
 8011550:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011554:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011558:	1b92      	subs	r2, r2, r6
 801155a:	6122      	str	r2, [r4, #16]
 801155c:	f8cd a000 	str.w	sl, [sp]
 8011560:	464b      	mov	r3, r9
 8011562:	aa03      	add	r2, sp, #12
 8011564:	4621      	mov	r1, r4
 8011566:	4640      	mov	r0, r8
 8011568:	f7ff fee6 	bl	8011338 <_printf_common>
 801156c:	3001      	adds	r0, #1
 801156e:	d14a      	bne.n	8011606 <_printf_i+0x1f2>
 8011570:	f04f 30ff 	mov.w	r0, #4294967295
 8011574:	b004      	add	sp, #16
 8011576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801157a:	6823      	ldr	r3, [r4, #0]
 801157c:	f043 0320 	orr.w	r3, r3, #32
 8011580:	6023      	str	r3, [r4, #0]
 8011582:	4833      	ldr	r0, [pc, #204]	@ (8011650 <_printf_i+0x23c>)
 8011584:	2778      	movs	r7, #120	@ 0x78
 8011586:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801158a:	6823      	ldr	r3, [r4, #0]
 801158c:	6831      	ldr	r1, [r6, #0]
 801158e:	061f      	lsls	r7, r3, #24
 8011590:	f851 5b04 	ldr.w	r5, [r1], #4
 8011594:	d402      	bmi.n	801159c <_printf_i+0x188>
 8011596:	065f      	lsls	r7, r3, #25
 8011598:	bf48      	it	mi
 801159a:	b2ad      	uxthmi	r5, r5
 801159c:	6031      	str	r1, [r6, #0]
 801159e:	07d9      	lsls	r1, r3, #31
 80115a0:	bf44      	itt	mi
 80115a2:	f043 0320 	orrmi.w	r3, r3, #32
 80115a6:	6023      	strmi	r3, [r4, #0]
 80115a8:	b11d      	cbz	r5, 80115b2 <_printf_i+0x19e>
 80115aa:	2310      	movs	r3, #16
 80115ac:	e7ac      	b.n	8011508 <_printf_i+0xf4>
 80115ae:	4827      	ldr	r0, [pc, #156]	@ (801164c <_printf_i+0x238>)
 80115b0:	e7e9      	b.n	8011586 <_printf_i+0x172>
 80115b2:	6823      	ldr	r3, [r4, #0]
 80115b4:	f023 0320 	bic.w	r3, r3, #32
 80115b8:	6023      	str	r3, [r4, #0]
 80115ba:	e7f6      	b.n	80115aa <_printf_i+0x196>
 80115bc:	4616      	mov	r6, r2
 80115be:	e7bd      	b.n	801153c <_printf_i+0x128>
 80115c0:	6833      	ldr	r3, [r6, #0]
 80115c2:	6825      	ldr	r5, [r4, #0]
 80115c4:	6961      	ldr	r1, [r4, #20]
 80115c6:	1d18      	adds	r0, r3, #4
 80115c8:	6030      	str	r0, [r6, #0]
 80115ca:	062e      	lsls	r6, r5, #24
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	d501      	bpl.n	80115d4 <_printf_i+0x1c0>
 80115d0:	6019      	str	r1, [r3, #0]
 80115d2:	e002      	b.n	80115da <_printf_i+0x1c6>
 80115d4:	0668      	lsls	r0, r5, #25
 80115d6:	d5fb      	bpl.n	80115d0 <_printf_i+0x1bc>
 80115d8:	8019      	strh	r1, [r3, #0]
 80115da:	2300      	movs	r3, #0
 80115dc:	6123      	str	r3, [r4, #16]
 80115de:	4616      	mov	r6, r2
 80115e0:	e7bc      	b.n	801155c <_printf_i+0x148>
 80115e2:	6833      	ldr	r3, [r6, #0]
 80115e4:	1d1a      	adds	r2, r3, #4
 80115e6:	6032      	str	r2, [r6, #0]
 80115e8:	681e      	ldr	r6, [r3, #0]
 80115ea:	6862      	ldr	r2, [r4, #4]
 80115ec:	2100      	movs	r1, #0
 80115ee:	4630      	mov	r0, r6
 80115f0:	f7ee fdf6 	bl	80001e0 <memchr>
 80115f4:	b108      	cbz	r0, 80115fa <_printf_i+0x1e6>
 80115f6:	1b80      	subs	r0, r0, r6
 80115f8:	6060      	str	r0, [r4, #4]
 80115fa:	6863      	ldr	r3, [r4, #4]
 80115fc:	6123      	str	r3, [r4, #16]
 80115fe:	2300      	movs	r3, #0
 8011600:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011604:	e7aa      	b.n	801155c <_printf_i+0x148>
 8011606:	6923      	ldr	r3, [r4, #16]
 8011608:	4632      	mov	r2, r6
 801160a:	4649      	mov	r1, r9
 801160c:	4640      	mov	r0, r8
 801160e:	47d0      	blx	sl
 8011610:	3001      	adds	r0, #1
 8011612:	d0ad      	beq.n	8011570 <_printf_i+0x15c>
 8011614:	6823      	ldr	r3, [r4, #0]
 8011616:	079b      	lsls	r3, r3, #30
 8011618:	d413      	bmi.n	8011642 <_printf_i+0x22e>
 801161a:	68e0      	ldr	r0, [r4, #12]
 801161c:	9b03      	ldr	r3, [sp, #12]
 801161e:	4298      	cmp	r0, r3
 8011620:	bfb8      	it	lt
 8011622:	4618      	movlt	r0, r3
 8011624:	e7a6      	b.n	8011574 <_printf_i+0x160>
 8011626:	2301      	movs	r3, #1
 8011628:	4632      	mov	r2, r6
 801162a:	4649      	mov	r1, r9
 801162c:	4640      	mov	r0, r8
 801162e:	47d0      	blx	sl
 8011630:	3001      	adds	r0, #1
 8011632:	d09d      	beq.n	8011570 <_printf_i+0x15c>
 8011634:	3501      	adds	r5, #1
 8011636:	68e3      	ldr	r3, [r4, #12]
 8011638:	9903      	ldr	r1, [sp, #12]
 801163a:	1a5b      	subs	r3, r3, r1
 801163c:	42ab      	cmp	r3, r5
 801163e:	dcf2      	bgt.n	8011626 <_printf_i+0x212>
 8011640:	e7eb      	b.n	801161a <_printf_i+0x206>
 8011642:	2500      	movs	r5, #0
 8011644:	f104 0619 	add.w	r6, r4, #25
 8011648:	e7f5      	b.n	8011636 <_printf_i+0x222>
 801164a:	bf00      	nop
 801164c:	080119ad 	.word	0x080119ad
 8011650:	080119be 	.word	0x080119be

08011654 <memmove>:
 8011654:	4288      	cmp	r0, r1
 8011656:	b510      	push	{r4, lr}
 8011658:	eb01 0402 	add.w	r4, r1, r2
 801165c:	d902      	bls.n	8011664 <memmove+0x10>
 801165e:	4284      	cmp	r4, r0
 8011660:	4623      	mov	r3, r4
 8011662:	d807      	bhi.n	8011674 <memmove+0x20>
 8011664:	1e43      	subs	r3, r0, #1
 8011666:	42a1      	cmp	r1, r4
 8011668:	d008      	beq.n	801167c <memmove+0x28>
 801166a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801166e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011672:	e7f8      	b.n	8011666 <memmove+0x12>
 8011674:	4402      	add	r2, r0
 8011676:	4601      	mov	r1, r0
 8011678:	428a      	cmp	r2, r1
 801167a:	d100      	bne.n	801167e <memmove+0x2a>
 801167c:	bd10      	pop	{r4, pc}
 801167e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011682:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011686:	e7f7      	b.n	8011678 <memmove+0x24>

08011688 <_realloc_r>:
 8011688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801168c:	4680      	mov	r8, r0
 801168e:	4615      	mov	r5, r2
 8011690:	460c      	mov	r4, r1
 8011692:	b921      	cbnz	r1, 801169e <_realloc_r+0x16>
 8011694:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011698:	4611      	mov	r1, r2
 801169a:	f7ff bba5 	b.w	8010de8 <_malloc_r>
 801169e:	b92a      	cbnz	r2, 80116ac <_realloc_r+0x24>
 80116a0:	f7ff fca8 	bl	8010ff4 <_free_r>
 80116a4:	2400      	movs	r4, #0
 80116a6:	4620      	mov	r0, r4
 80116a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116ac:	f000 f81a 	bl	80116e4 <_malloc_usable_size_r>
 80116b0:	4285      	cmp	r5, r0
 80116b2:	4606      	mov	r6, r0
 80116b4:	d802      	bhi.n	80116bc <_realloc_r+0x34>
 80116b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80116ba:	d8f4      	bhi.n	80116a6 <_realloc_r+0x1e>
 80116bc:	4629      	mov	r1, r5
 80116be:	4640      	mov	r0, r8
 80116c0:	f7ff fb92 	bl	8010de8 <_malloc_r>
 80116c4:	4607      	mov	r7, r0
 80116c6:	2800      	cmp	r0, #0
 80116c8:	d0ec      	beq.n	80116a4 <_realloc_r+0x1c>
 80116ca:	42b5      	cmp	r5, r6
 80116cc:	462a      	mov	r2, r5
 80116ce:	4621      	mov	r1, r4
 80116d0:	bf28      	it	cs
 80116d2:	4632      	movcs	r2, r6
 80116d4:	f7ff fc80 	bl	8010fd8 <memcpy>
 80116d8:	4621      	mov	r1, r4
 80116da:	4640      	mov	r0, r8
 80116dc:	f7ff fc8a 	bl	8010ff4 <_free_r>
 80116e0:	463c      	mov	r4, r7
 80116e2:	e7e0      	b.n	80116a6 <_realloc_r+0x1e>

080116e4 <_malloc_usable_size_r>:
 80116e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80116e8:	1f18      	subs	r0, r3, #4
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	bfbc      	itt	lt
 80116ee:	580b      	ldrlt	r3, [r1, r0]
 80116f0:	18c0      	addlt	r0, r0, r3
 80116f2:	4770      	bx	lr

080116f4 <_init>:
 80116f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116f6:	bf00      	nop
 80116f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116fa:	bc08      	pop	{r3}
 80116fc:	469e      	mov	lr, r3
 80116fe:	4770      	bx	lr

08011700 <_fini>:
 8011700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011702:	bf00      	nop
 8011704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011706:	bc08      	pop	{r3}
 8011708:	469e      	mov	lr, r3
 801170a:	4770      	bx	lr
